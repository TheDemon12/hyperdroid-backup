-- MySQL dump 10.13  Distrib 5.7.20, for Linux (x86_64)
--
-- Host: localhost    Database: wordpress
-- ------------------------------------------------------
-- Server version	5.7.20-0ubuntu0.16.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
INSERT INTO `wp_commentmeta` VALUES (3,6,'_wp_trash_meta_status','1'),(4,6,'_wp_trash_meta_time','1513268717'),(5,7,'_wp_trash_meta_status','1'),(6,7,'_wp_trash_meta_time','1513412672');
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (1,1,'A WordPress Commenter','wapuu@wordpress.example','https://wordpress.org/','','2017-12-03 18:04:33','2017-12-03 18:04:33','Hi, this is a comment.\nTo get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.\nCommenter avatars come from <a href=\"https://gravatar.com\">Gravatar</a>.',0,'post-trashed','','',0,0),(2,5,'A WordPress Commenter','wapuu@wordpress.example','https://wordpress.org/','','2017-11-30 19:50:37','2017-11-30 19:50:37','Hi, this is a comment.\nTo get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.\nCommenter avatars come from <a href=\"https://gravatar.com\" rel=\"nofollow\">Gravatar</a>.',0,'post-trashed','','',0,0),(3,7,'Xaif','huzaifaamirka46@gmail.com','','43.243.80.146','2017-12-13 00:59:23','2017-12-12 19:29:23','Thanks. This was easy and explained very well',0,'1','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36','',0,0),(5,7,'Kartik B.','kartikbhalla12@gmail.com','http://www.hyperdroid.in','103.212.146.178','2017-12-14 19:26:21','2017-12-14 13:56:21','You\'re Welcome!',0,'1','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36','',3,1),(6,36,'Installing WordPress On Ubuntu &#8211; Hyperdroid','','https://www.hyperdroid.in/index.php/2017/12/06/installing-wordpress-on-ubuntu/','35.196.242.183','2017-12-14 19:47:53','2017-12-14 14:17:53','[&#8230;] Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install LAMP on Ubuntu. [&#8230;]',0,'trash','The Incutio XML-RPC PHP Library -- WordPress/4.9.1','pingback',0,0),(7,36,'Hosting Multiple Websites On Ubuntu &#8211; Hyperdroid','','https://www.hyperdroid.in/index.php/2017/12/16/hosting-multiple-websites-on-ubuntu/','35.196.242.183','2017-12-16 13:49:13','2017-12-16 08:19:13','[&#8230;] you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install LAMP on Ubuntu. [&#8230;]',0,'spam','The Incutio XML-RPC PHP Library -- WordPress/4.9.1','pingback',0,0),(8,144,'Akhil Narang','akhil@akhilnarang.me','http://akhilnarang.me','45.117.221.241','2017-12-17 20:36:21','2017-12-17 15:06:21','Nice!',0,'1','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36','',0,0),(9,144,'Jagrav','jagravnaik0@gmail.com','','167.21.142.43','2017-12-19 00:06:00','2017-12-18 18:36:00','Good tutorial.',0,'1','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36','',0,0),(10,144,'Sushant','sushantghanwatdk@gmail.com','','49.35.94.151','2017-12-19 09:43:26','2017-12-19 04:13:26','Perfect tutorial for newbies sir. Thanks',0,'1','Mozilla/5.0 (Linux; Android 8.1.0; Redmi 3S Build/OPM1.171019.011) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.83 Mobile Safari/537.36','',0,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_itsec_lockouts`
--

DROP TABLE IF EXISTS `wp_itsec_lockouts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_itsec_lockouts` (
  `lockout_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `lockout_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `lockout_start` datetime NOT NULL,
  `lockout_start_gmt` datetime NOT NULL,
  `lockout_expire` datetime NOT NULL,
  `lockout_expire_gmt` datetime NOT NULL,
  `lockout_host` varchar(40) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `lockout_user` bigint(20) unsigned DEFAULT NULL,
  `lockout_username` varchar(60) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `lockout_active` int(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`lockout_id`),
  KEY `lockout_expire_gmt` (`lockout_expire_gmt`),
  KEY `lockout_host` (`lockout_host`),
  KEY `lockout_user` (`lockout_user`),
  KEY `lockout_username` (`lockout_username`),
  KEY `lockout_active` (`lockout_active`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_itsec_lockouts`
--

LOCK TABLES `wp_itsec_lockouts` WRITE;
/*!40000 ALTER TABLE `wp_itsec_lockouts` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_itsec_lockouts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_itsec_log`
--

DROP TABLE IF EXISTS `wp_itsec_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_itsec_log` (
  `log_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `log_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `log_function` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `log_priority` int(2) NOT NULL DEFAULT '1',
  `log_date` datetime NOT NULL DEFAULT '1000-01-01 00:00:00',
  `log_date_gmt` datetime NOT NULL DEFAULT '1000-01-01 00:00:00',
  `log_host` varchar(40) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `log_username` varchar(60) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `log_user` bigint(20) unsigned DEFAULT NULL,
  `log_url` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `log_referrer` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `log_data` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  PRIMARY KEY (`log_id`),
  KEY `log_type` (`log_type`),
  KEY `log_date_gmt` (`log_date_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_itsec_log`
--

LOCK TABLES `wp_itsec_log` WRITE;
/*!40000 ALTER TABLE `wp_itsec_log` DISABLE KEYS */;
INSERT INTO `wp_itsec_log` VALUES (1,'backup','Database Backup Executed',3,'2017-12-19 01:22:19','2017-12-18 19:52:19','','',0,'','','a:1:{i:0;a:2:{s:6:\"status\";s:7:\"Success\";s:7:\"details\";s:13:\"saved locally\";}}'),(2,'backup','Database Backup Executed',3,'2017-12-19 01:23:35','2017-12-18 19:53:35','','',0,'','','a:1:{i:0;a:2:{s:6:\"status\";s:7:\"Success\";s:7:\"details\";s:13:\"saved locally\";}}'),(3,'backup','Database Backup Executed',3,'2017-12-19 01:23:50','2017-12-18 19:53:50','','',0,'','','a:1:{i:0;a:2:{s:6:\"status\";s:7:\"Success\";s:7:\"details\";s:13:\"saved locally\";}}'),(4,'brute_force','Invalid Login Attempt',5,'2017-12-19 13:51:41','2017-12-19 08:21:41','176.8.89.80','thedemon12',1,'','','a:2:{s:6:\"source\";s:6:\"xmlrpc\";s:20:\"authentication_types\";a:1:{i:0;s:21:\"username_and_password\";}}');
/*!40000 ALTER TABLE `wp_itsec_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_itsec_temp`
--

DROP TABLE IF EXISTS `wp_itsec_temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_itsec_temp` (
  `temp_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `temp_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `temp_date` datetime NOT NULL,
  `temp_date_gmt` datetime NOT NULL,
  `temp_host` varchar(40) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `temp_user` bigint(20) unsigned DEFAULT NULL,
  `temp_username` varchar(60) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  PRIMARY KEY (`temp_id`),
  KEY `temp_date_gmt` (`temp_date_gmt`),
  KEY `temp_host` (`temp_host`),
  KEY `temp_user` (`temp_user`),
  KEY `temp_username` (`temp_username`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_itsec_temp`
--

LOCK TABLES `wp_itsec_temp` WRITE;
/*!40000 ALTER TABLE `wp_itsec_temp` DISABLE KEYS */;
INSERT INTO `wp_itsec_temp` VALUES (1,'brute_force','2017-12-19 13:51:41','2017-12-19 08:21:41','176.8.89.80',NULL,NULL),(2,'brute_force','2017-12-19 13:51:41','2017-12-19 08:21:41',NULL,1,'thedemon12');
/*!40000 ALTER TABLE `wp_itsec_temp` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=1100 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','https://www.hyperdroid.in','yes'),(2,'home','https://www.hyperdroid.in','yes'),(3,'blogname','Hyperdroid','yes'),(4,'blogdescription','All About Tech','yes'),(5,'users_can_register','1','yes'),(6,'admin_email','kartikbhalla12@gmail.com','yes'),(7,'start_of_week','1','yes'),(8,'use_balanceTags','0','yes'),(9,'use_smilies','1','yes'),(10,'require_name_email','1','yes'),(11,'comments_notify','1','yes'),(12,'posts_per_rss','10','yes'),(13,'rss_use_excerpt','1','yes'),(14,'mailserver_url','mail.example.com','yes'),(15,'mailserver_login','login@example.com','yes'),(16,'mailserver_pass','password','yes'),(17,'mailserver_port','110','yes'),(18,'default_category','1','yes'),(19,'default_comment_status','open','yes'),(20,'default_ping_status','open','yes'),(21,'default_pingback_flag','1','yes'),(22,'posts_per_page','10','yes'),(23,'date_format','F j, Y','yes'),(24,'time_format','g:i A','yes'),(25,'links_updated_date_format','F j, Y g:i a','yes'),(26,'comment_moderation','','yes'),(27,'moderation_notify','1','yes'),(28,'permalink_structure','/%postname%/','yes'),(29,'rewrite_rules','a:107:{s:19:\"sitemap_index\\.xml$\";s:19:\"index.php?sitemap=1\";s:31:\"([^/]+?)-sitemap([0-9]+)?\\.xml$\";s:51:\"index.php?sitemap=$matches[1]&sitemap_n=$matches[2]\";s:24:\"([a-z]+)?-?sitemap\\.xsl$\";s:25:\"index.php?xsl=$matches[1]\";s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:39:\"amn_mi-lite/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:49:\"amn_mi-lite/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:69:\"amn_mi-lite/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:64:\"amn_mi-lite/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:64:\"amn_mi-lite/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:45:\"amn_mi-lite/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:28:\"amn_mi-lite/([^/]+)/embed/?$\";s:44:\"index.php?amn_mi-lite=$matches[1]&embed=true\";s:32:\"amn_mi-lite/([^/]+)/trackback/?$\";s:38:\"index.php?amn_mi-lite=$matches[1]&tb=1\";s:40:\"amn_mi-lite/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?amn_mi-lite=$matches[1]&paged=$matches[2]\";s:47:\"amn_mi-lite/([^/]+)/comment-page-([0-9]{1,})/?$\";s:51:\"index.php?amn_mi-lite=$matches[1]&cpage=$matches[2]\";s:36:\"amn_mi-lite/([^/]+)(?:/([0-9]+))?/?$\";s:50:\"index.php?amn_mi-lite=$matches[1]&page=$matches[2]\";s:28:\"amn_mi-lite/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:38:\"amn_mi-lite/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:58:\"amn_mi-lite/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:53:\"amn_mi-lite/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:53:\"amn_mi-lite/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:34:\"amn_mi-lite/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:27:\"[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\"[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\"[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"([^/]+)/embed/?$\";s:37:\"index.php?name=$matches[1]&embed=true\";s:20:\"([^/]+)/trackback/?$\";s:31:\"index.php?name=$matches[1]&tb=1\";s:40:\"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:35:\"([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:28:\"([^/]+)/page/?([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&paged=$matches[2]\";s:35:\"([^/]+)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&cpage=$matches[2]\";s:24:\"([^/]+)(?:/([0-9]+))?/?$\";s:43:\"index.php?name=$matches[1]&page=$matches[2]\";s:16:\"[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:26:\"[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:46:\"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:22:\"[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";}','yes'),(30,'hack_file','0','yes'),(31,'blog_charset','UTF-8','yes'),(32,'moderation_keys','','no'),(33,'active_plugins','a:9:{i:0;s:30:\"advanced-custom-fields/acf.php\";i:1;s:35:\"backupwordpress/backupwordpress.php\";i:2;s:41:\"better-wp-security/better-wp-security.php\";i:3;s:50:\"google-analytics-for-wordpress/googleanalytics.php\";i:5;s:22:\"swift-mailer/index.php\";i:6;s:37:\"tinymce-advanced/tinymce-advanced.php\";i:8;s:41:\"wordpress-importer/wordpress-importer.php\";i:9;s:24:\"wordpress-seo/wp-seo.php\";i:10;s:27:\"wp-super-cache/wp-cache.php\";}','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'comment_max_links','2','yes'),(37,'gmt_offset','5.5','yes'),(38,'default_email_category','1','yes'),(39,'recently_edited','a:5:{i:0;s:50:\"/var/www/html/wp-content/themes/big-pix/footer.php\";i:2;s:58:\"/var/www/html/wp-content/themes/big-pix/library/bigpix.php\";i:3;s:61:\"/var/www/html/wp-content/themes/big-pix/library/css/style.css\";i:4;s:53:\"/var/www/html/wp-content/themes/big-pix/functions.php\";i:5;s:49:\"/var/www/html/wp-content/themes/big-pix/style.css\";}','no'),(40,'template','big-pix','yes'),(41,'stylesheet','big-pix','yes'),(42,'comment_whitelist','','yes'),(43,'blacklist_keys','','no'),(44,'comment_registration','','yes'),(45,'html_type','text/html','yes'),(46,'use_trackback','0','yes'),(47,'default_role','subscriber','yes'),(48,'db_version','38590','yes'),(49,'uploads_use_yearmonth_folders','1','yes'),(50,'upload_path','','yes'),(51,'blog_public','1','yes'),(52,'default_link_category','2','yes'),(53,'show_on_front','posts','yes'),(54,'tag_base','','yes'),(55,'show_avatars','1','yes'),(56,'avatar_rating','G','yes'),(57,'upload_url_path','','yes'),(58,'thumbnail_size_w','150','yes'),(59,'thumbnail_size_h','150','yes'),(60,'thumbnail_crop','1','yes'),(61,'medium_size_w','300','yes'),(62,'medium_size_h','300','yes'),(63,'avatar_default','identicon','yes'),(64,'large_size_w','1024','yes'),(65,'large_size_h','1024','yes'),(66,'image_default_link_type','none','yes'),(67,'image_default_size','','yes'),(68,'image_default_align','','yes'),(69,'close_comments_for_old_posts','','yes'),(70,'close_comments_days_old','14','yes'),(71,'thread_comments','1','yes'),(72,'thread_comments_depth','5','yes'),(73,'page_comments','','yes'),(74,'comments_per_page','50','yes'),(75,'default_comments_page','newest','yes'),(76,'comment_order','asc','yes'),(77,'sticky_posts','a:0:{}','yes'),(78,'widget_categories','a:6:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}i:3;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}i:4;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}i:5;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}i:6;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(79,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(80,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'uninstall_plugins','a:4:{s:50:\"google-analytics-for-wordpress/googleanalytics.php\";s:35:\"monsterinsights_lite_uninstall_hook\";s:53:\"child-theme-configurator/child-theme-configurator.php\";s:22:\"chld_thm_cfg_uninstall\";s:27:\"wp-super-cache/wp-cache.php\";s:22:\"wpsupercache_uninstall\";s:41:\"better-wp-security/better-wp-security.php\";a:2:{i:0;s:10:\"ITSEC_Core\";i:1;s:16:\"handle_uninstall\";}}','no'),(82,'timezone_string','','yes'),(83,'page_for_posts','0','yes'),(84,'page_on_front','0','yes'),(85,'default_post_format','0','yes'),(86,'link_manager_enabled','0','yes'),(87,'finished_splitting_shared_terms','1','yes'),(88,'site_icon','0','yes'),(89,'medium_large_size_w','768','yes'),(90,'medium_large_size_h','0','yes'),(91,'initial_db_version','38590','yes'),(92,'wp_user_roles','a:7:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:62:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:20:\"wpseo_manage_options\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:35:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:15:\"wpseo_bulk_edit\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}s:13:\"wpseo_manager\";a:2:{s:4:\"name\";s:11:\"SEO Manager\";s:12:\"capabilities\";a:37:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:15:\"wpseo_bulk_edit\";b:1;s:28:\"wpseo_edit_advanced_metadata\";b:1;s:20:\"wpseo_manage_options\";b:1;}}s:12:\"wpseo_editor\";a:2:{s:4:\"name\";s:10:\"SEO Editor\";s:12:\"capabilities\";a:36:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:15:\"wpseo_bulk_edit\";b:1;s:28:\"wpseo_edit_advanced_metadata\";b:1;}}}','yes'),(93,'fresh_site','0','yes'),(94,'widget_search','a:5:{i:2;a:1:{s:5:\"title\";s:0:\"\";}i:3;a:1:{s:5:\"title\";s:0:\"\";}i:4;a:1:{s:5:\"title\";s:0:\"\";}i:5;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(95,'widget_recent-posts','a:6:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}i:3;a:3:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;s:9:\"show_date\";b:0;}i:4;a:3:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;s:9:\"show_date\";b:0;}i:5;a:3:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;s:9:\"show_date\";b:0;}i:6;a:3:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;s:9:\"show_date\";b:0;}s:12:\"_multiwidget\";i:1;}','yes'),(96,'widget_recent-comments','a:5:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}i:3;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}i:4;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}i:5;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(97,'widget_archives','a:5:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}i:3;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}i:4;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}i:5;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(98,'widget_meta','a:5:{i:2;a:1:{s:5:\"title\";s:0:\"\";}i:3;a:1:{s:5:\"title\";s:0:\"\";}i:4;a:1:{s:5:\"title\";s:0:\"\";}i:5;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(99,'sidebars_widgets','a:7:{s:19:\"wp_inactive_widgets\";a:0:{}s:8:\"sidebar3\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:8:\"sidebar1\";a:6:{i:0;s:8:\"search-3\";i:1;s:14:\"recent-posts-3\";i:2;s:17:\"recent-comments-3\";i:3;s:10:\"archives-3\";i:4;s:12:\"categories-3\";i:5;s:6:\"meta-3\";}s:8:\"sidebar2\";a:6:{i:0;s:8:\"search-4\";i:1;s:14:\"recent-posts-4\";i:2;s:17:\"recent-comments-4\";i:3;s:10:\"archives-4\";i:4;s:12:\"categories-4\";i:5;s:6:\"meta-4\";}s:8:\"sidebar5\";a:6:{i:0;s:8:\"search-5\";i:1;s:17:\"recent-comments-5\";i:2;s:14:\"recent-posts-5\";i:3;s:10:\"archives-5\";i:4;s:12:\"categories-5\";i:5;s:6:\"meta-5\";}s:8:\"sidebar4\";a:2:{i:0;s:12:\"categories-6\";i:1;s:14:\"recent-posts-6\";}s:13:\"array_version\";i:3;}','yes'),(100,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(101,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(102,'widget_media_audio','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(103,'widget_media_image','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(104,'widget_media_gallery','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(105,'widget_media_video','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(106,'nonce_key','7!}fQ>rUxk?IdjpulO~6UCK3ILxxNkQ{Ba{*,Px<;#Jx]7+ngxy~%aLl5ZFLc`_P','no'),(107,'nonce_salt','zCU%jpXA<N50TSG:$B,A<H<g V_ab.g-KS#)6LbQ+/CW~.7m>:vKx48FT 2}h^UQ','no'),(108,'widget_tag_cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(109,'widget_nav_menu','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(110,'widget_custom_html','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(111,'cron','a:10:{i:1513706673;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1513706682;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1513706975;a:1:{s:11:\"wp_cache_gc\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1513707266;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1513708895;a:1:{s:34:\"monsterinsights_send_tracking_data\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1513728060;a:1:{s:26:\"monsterinsights_daily_cron\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1513777037;a:1:{s:19:\"wpseo-reindex-links\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1513778094;a:3:{s:16:\"itsec_purge_logs\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:20:\"itsec_purge_lockouts\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:17:\"itsec_clear_locks\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1513791000;a:1:{s:19:\"hmbkp_schedule_hook\";a:1:{s:32:\"65efd44481302a5d30ec550a6021f8da\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:1:{s:2:\"id\";s:10:\"1512804770\";}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(112,'theme_mods_twentyseventeen','a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1512324682;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}','yes'),(116,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.9.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.9.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.9.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.9.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.9.1\";s:7:\"version\";s:5:\"4.9.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1513706375;s:15:\"version_checked\";s:5:\"4.9.1\";s:12:\"translations\";a:0:{}}','no'),(122,'auth_key','K%1<W78Y5aV#kc6+OV&g830o+#G8Uc?+iQSR9qrp%5y?`:0~x[q(w.68.?;FX0XY','no'),(123,'auth_salt','aQaCI}O*ykgt-Fj!p8EU]pFN,>,cZ9OyZ( }oV6@@=L:K:O{r9R:;WwiUTH3b+3~','no'),(124,'logged_in_key','aTikQB;Wn(GvcvP}P#aK&&vPgNJfs_$1K<3~6:T{~C+@F0;V/E0<yY7MH&Iuga>-','no'),(125,'logged_in_salt','t~|f,$]Fi&C1eg$QvxVxPgMl.#bB&{Q]a<rU+8n4]7)zZ(A/&M5 f;(Vy99XBFoY','no'),(133,'can_compress_scripts','0','no'),(139,'recently_activated','a:6:{s:27:\"updraftplus/updraftplus.php\";i:1513627108;s:45:\"remove-footer-credit/remove-footer-credit.php\";i:1513626990;s:53:\"child-theme-configurator/child-theme-configurator.php\";i:1513418468;s:49:\"sendgrid-email-delivery-simplified/wpsendgrid.php\";i:1513170941;s:27:\"check-email/check-email.php\";i:1513089384;s:19:\"gmail-smtp/main.php\";i:1513089185;}','yes'),(145,'current_theme','BIG PIX','yes'),(146,'theme_mods_big-pix','a:15:{i:0;b:0;s:18:\"nav_menu_locations\";a:0:{}s:18:\"custom_css_post_id\";i:-1;s:11:\"BIGPIX_logo\";s:63:\"http://35.196.242.183/wp-content/uploads/2017/12/Untitled-1.png\";s:14:\"BIGPIX_favicon\";s:97:\"http://35.196.242.183/wp-content/uploads/2017/12/2000px-Logo-ubuntu_cof-white_orange-hex.svg_.png\";s:23:\"BIGPIX_color_settings_3\";s:7:\"#ff2121\";s:21:\"BIGPIX_color_settings\";s:7:\"#0a0a0a\";s:23:\"BIGPIX_color_settings_2\";s:7:\"#4f4f4f\";s:16:\"background_color\";s:6:\"ffffff\";s:17:\"BIGPIX_author_bio\";s:0:\"\";s:20:\"BIGPIX_related_posts\";i:1;s:14:\"BIGPIX_twitter\";s:32:\"https://twitter.com/TheDemon1253\";s:13:\"BIGPIX_google\";s:37:\"https://plus.google.com/+KartikBhalla\";s:14:\"BIGPIX_youtube\";s:56:\"https://www.youtube.com/channel/UCS3TDkQidab81sW_pWbDjsg\";s:12:\"BIGPIX_email\";s:24:\"kartikbhalla12@gmail.com\";}','yes'),(147,'theme_switched','','yes'),(152,'WPLANG','','yes'),(153,'new_admin_email','kartikbhalla12@gmail.com','yes'),(156,'acf_version','4.4.12','yes'),(204,'secure_auth_key','|:CED;v([&GH]WSl5h1m]P~beo5!9VP,N>epP*C!#|H}#_xckY`];dZcSK4f3,<V','no'),(205,'secure_auth_salt','*,T&4zrhnjtZHGSExjv<-*xE3!*1rMy8N)cI/T.w[y>`CPQKf53E/J-T3+-As|e]','no'),(258,'hmbkp_plugin_version','3.6.4','yes'),(261,'hmbkp_schedule_1512804770','a:8:{s:11:\"max_backups\";i:1;s:8:\"excludes\";a:0:{}s:4:\"type\";s:8:\"complete\";s:12:\"reoccurrence\";s:5:\"daily\";s:19:\"schedule_start_time\";d:1513704600;s:5:\"email\";a:1:{s:5:\"email\";s:24:\"kartikbhalla12@gmail.com\";}s:14:\"duration_total\";i:22696628298;s:16:\"backup_run_count\";i:15;}','yes'),(262,'hmbkp_schedule_1512804771','a:8:{s:11:\"max_backups\";i:1;s:8:\"excludes\";a:0:{}s:4:\"type\";s:8:\"complete\";s:12:\"reoccurrence\";s:8:\"manually\";s:19:\"schedule_start_time\";d:1512855000;s:14:\"duration_total\";i:3026330132;s:16:\"backup_run_count\";i:2;s:5:\"email\";a:1:{s:5:\"email\";s:0:\"\";}}','yes'),(275,'hmbkp_hide_info_notice','1','no'),(385,'_site_transient_timeout_browser_c0240375e5f78b3776a428e860006b96','1513694265','no'),(386,'_site_transient_browser_c0240375e5f78b3776a428e860006b96','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"63.0.3239.84\";s:8:\"platform\";s:5:\"Linux\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(398,'sendgrid_asm_permission','true','yes'),(400,'sendgrid_api_key','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','yes'),(401,'sendgrid_from_name','Kartik B.','yes'),(402,'sendgrid_from_email','admin@hyperdroid.in','yes'),(403,'sendgrid_reply_to','','yes'),(404,'sendgrid_categories','','yes'),(405,'sendgrid_stats_categories','','yes'),(406,'sendgrid_template','','yes'),(407,'sendgrid_api','smtp','yes'),(408,'sendgrid_port','25','yes'),(409,'sendgrid_content_type','plaintext','yes'),(411,'sendgrid_mc_widget_notice_dismissed','true','yes'),(412,'sendgrid_mc_opt_use_transactional','true','yes'),(413,'sendgrid_mc_api_key','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','yes'),(414,'sendgrid_mc_opt_incl_fname_lname','false','yes'),(415,'sendgrid_mc_opt_req_fname_lname','false','yes'),(416,'sendgrid_mc_signup_email_subject','Confirm your subscription to Hyperdroid','yes'),(417,'sendgrid_mc_signup_email_content','&amp;lt;p&amp;gt;Greetings!&amp;lt;/p&amp;gt;\r\n\r\n&amp;lt;p&amp;gt;Please click &amp;lt;a href=\\&amp;quot;%confirmation_link%\\&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; in order to subscribe to our newsletter!&amp;lt;/p&amp;gt;\r\n\r\n&amp;lt;p&amp;gt;Thank you,&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;Hyperdroid&amp;lt;/p&amp;gt;','yes'),(418,'sendgrid_mc_signup_email_content_text','Greetings!\r\n\r\nPlease open %confirmation_link% in order to subscribe to our newsletter!\r\n\r\nThank you,\r\nHyperdroid','yes'),(419,'sendgrid_mc_signup_confirmation_page','default','yes'),(420,'sendgrid_mc_email_label','Email','yes'),(421,'sendgrid_mc_first_name_label','First Name','yes'),(422,'sendgrid_mc_last_name_label','Last Name','yes'),(423,'sendgrid_mc_subscribe_label','SUBSCRIBE','yes'),(424,'sendgrid_mc_input_padding','{\"top\":\"10\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}','yes'),(425,'sendgrid_mc_button_padding','{\"top\":\"10\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}','yes'),(426,'sendgrid_mc_auth_valid','true','yes'),(429,'widget_sendgrid_nlvx_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(488,'_site_transient_timeout_browser_fa5c043f06825a47ff00e60ab06e639c','1513832620','no'),(489,'_site_transient_browser_fa5c043f06825a47ff00e60ab06e639c','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"62.0.3202.73\";s:8:\"platform\";s:5:\"Linux\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(499,'theme_mods_siteorigin-unwind','a:3:{s:18:\"custom_css_post_id\";i:-1;s:10:\"custom_css\";s:436:\"@media screen and (max-width: 768px) { .main-navigation .menu-toggle { display: block; } .main-navigation > div, .main-navigation > div ul, .main-navigation .shopping-cart { display: none; } } @media screen and (min-width: 769px) { #mobile-navigation { display: none !important; } .main-navigation > div ul { display: block; } .main-navigation .shopping-cart { display: inline-block; } .main-navigation .menu-toggle { display: none; } }\";s:14:\"custom_css_key\";s:32:\"738c93cf7370e767524313174bc51ac6\";}','yes'),(500,'_transient_siteorigin_unwind_categories','1','yes'),(503,'widget_pr_about_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(504,'widget_pr_services_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(505,'widget_pr_testimonial_style2_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(506,'widget_pr_blog_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(507,'widget_pr_contact_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(508,'widget_pr_about_style2_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(509,'widget_pr_features_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(510,'widget_pr_services_style2_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(511,'widget_pr_portfolio_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(512,'widget_pr_cta_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(513,'widget_pr_team_style2_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(514,'widget_pr_clients_section_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(515,'widget_pr_counters_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(516,'theme_mods_prasoon','a:1:{s:18:\"custom_css_post_id\";i:-1;}','yes'),(522,'theme_mods_avata','a:1:{s:18:\"custom_css_post_id\";i:-1;}','yes'),(525,'wrm_2ee83c10dc182d8831df','1513260804','yes'),(526,'theme_mods_tracks','a:1:{s:18:\"custom_css_post_id\";i:-1;}','yes'),(532,'tadv_settings','a:6:{s:7:\"options\";s:15:\"menubar,advlist\";s:9:\"toolbar_1\";s:106:\"formatselect,bold,italic,blockquote,bullist,numlist,alignleft,aligncenter,alignright,link,unlink,undo,redo\";s:9:\"toolbar_2\";s:103:\"fontselect,fontsizeselect,outdent,indent,pastetext,removeformat,charmap,wp_more,forecolor,table,wp_help\";s:9:\"toolbar_3\";s:0:\"\";s:9:\"toolbar_4\";s:0:\"\";s:7:\"plugins\";s:104:\"anchor,code,insertdatetime,nonbreaking,print,searchreplace,table,visualblocks,visualchars,advlist,wptadv\";}','yes'),(533,'tadv_admin_settings','a:1:{s:7:\"options\";a:0:{}}','yes'),(534,'tadv_version','4000','yes'),(548,'_site_transient_timeout_browser_76973f252ad0942fd599fdc04d17d45c','1513873222','no'),(549,'_site_transient_browser_76973f252ad0942fd599fdc04d17d45c','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"63.0.3239.84\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(566,'monsterinsights_over_time','a:3:{s:17:\"installed_version\";s:5:\"6.2.6\";s:14:\"installed_date\";i:1513269045;s:13:\"installed_pro\";b:0;}','yes'),(567,'monsterinsights_db_version','6.2.0','yes'),(568,'monsterinsights_settings_version','6.0.0','yes'),(569,'monsterinsights_current_version','6.2.6','yes'),(570,'monsterinsights_settings','a:27:{s:17:\"analytics_profile\";i:165197751;s:22:\"analytics_profile_code\";s:13:\"UA-89462011-6\";s:26:\"track_internal_as_outbound\";i:0;s:23:\"track_internal_as_label\";s:0:\"\";s:14:\"track_outbound\";i:1;s:14:\"allow_tracking\";i:0;s:13:\"tracking_mode\";s:9:\"analytics\";s:11:\"events_mode\";s:2:\"js\";s:12:\"demographics\";i:1;s:12:\"ignore_users\";a:2:{i:0;s:13:\"administrator\";i:1;s:6:\"editor\";}s:19:\"dashboards_disabled\";i:0;s:13:\"anonymize_ips\";i:0;s:17:\"track_download_as\";s:5:\"event\";s:19:\"extensions_of_files\";s:30:\"doc,exe,js,pdf,ppt,tgz,zip,xls\";s:18:\"subdomain_tracking\";s:0:\"\";s:16:\"tag_links_in_rss\";i:0;s:12:\"allow_anchor\";i:0;s:16:\"add_allow_linker\";i:0;s:25:\"enhanced_link_attribution\";i:1;s:11:\"custom_code\";s:0:\"\";s:10:\"debug_mode\";i:0;s:14:\"anonymous_data\";i:1;s:13:\"save_settings\";a:0:{}s:12:\"view_reports\";a:0:{}s:22:\"analytics_profile_name\";s:33:\"All Web Site Data (UA-89462011-6)\";s:13:\"oauth_version\";s:3:\"1.0\";s:13:\"cron_last_run\";i:1513269080;}','yes'),(571,'_amn_mi-lite_last_checked','1513641600','yes'),(574,'monsterinsights_get_profiles','a:1:{i:89462011;a:4:{s:2:\"id\";s:8:\"89462011\";s:7:\"ua_code\";s:13:\"UA-89462011-1\";s:11:\"parent_name\";s:23:\"http://www.phenexos.com\";s:5:\"items\";a:6:{i:132690947;a:3:{s:2:\"id\";s:13:\"UA-89462011-1\";s:4:\"name\";s:23:\"http://www.phenexos.com\";s:5:\"items\";a:1:{i:136666772;a:3:{s:4:\"name\";s:33:\"All Web Site Data (UA-89462011-1)\";s:7:\"ua_code\";s:13:\"UA-89462011-1\";s:2:\"id\";s:9:\"136666772\";}}}i:133641959;a:3:{s:2:\"id\";s:13:\"UA-89462011-2\";s:4:\"name\";s:29:\"http://downloads.phenexos.com\";s:5:\"items\";a:1:{i:137690566;a:3:{s:4:\"name\";s:33:\"All Web Site Data (UA-89462011-2)\";s:7:\"ua_code\";s:13:\"UA-89462011-2\";s:2:\"id\";s:9:\"137690566\";}}}i:134079529;a:3:{s:2:\"id\";s:13:\"UA-89462011-3\";s:4:\"name\";s:24:\"http://www.thetwoguys.me\";s:5:\"items\";a:1:{i:138147254;a:3:{s:4:\"name\";s:33:\"All Web Site Data (UA-89462011-3)\";s:7:\"ua_code\";s:13:\"UA-89462011-3\";s:2:\"id\";s:9:\"138147254\";}}}i:155255335;a:3:{s:2:\"id\";s:13:\"UA-89462011-4\";s:4:\"name\";s:17:\"http://hyperx1.me\";s:5:\"items\";a:1:{i:156939883;a:3:{s:4:\"name\";s:33:\"All Web Site Data (UA-89462011-4)\";s:7:\"ua_code\";s:13:\"UA-89462011-4\";s:2:\"id\";s:9:\"156939883\";}}}i:163418651;a:3:{s:2:\"id\";s:13:\"UA-89462011-5\";s:4:\"name\";s:24:\"http://www.hyperdroid.tk\";s:5:\"items\";a:1:{i:164293761;a:3:{s:4:\"name\";s:33:\"All Web Site Data (UA-89462011-5)\";s:7:\"ua_code\";s:13:\"UA-89462011-5\";s:2:\"id\";s:9:\"164293761\";}}}i:164487767;a:3:{s:2:\"id\";s:13:\"UA-89462011-6\";s:4:\"name\";s:24:\"http://www.hyperdroid.in\";s:5:\"items\";a:1:{i:165197751;a:3:{s:4:\"name\";s:33:\"All Web Site Data (UA-89462011-6)\";s:7:\"ua_code\";s:13:\"UA-89462011-6\";s:2:\"id\";s:9:\"165197751\";}}}}}}','yes'),(575,'monsterinsights_lite_access_token','a:5:{s:13:\"refresh_token\";s:45:\"1/oqVDkElcu9uor5Jt6XQqoh3FQrKfbXjoGqRZMKxvLL4\";s:12:\"access_token\";s:131:\"ya29.GlwnBbBk9TisOfWpyTCs75_ofbrWBwnKABaoO1hT-bGVKiLxqLlVVuQKOQZQLjc-5xsVVvIXfnEX5aQWBl4Oe2MBVQI6Dam9s3HqIg45VLObWWS__HiO5gqyAWhDbg\";s:7:\"expires\";d:1513729591;s:10:\"expires_in\";i:3600;s:7:\"created\";i:1513706191;}','yes'),(576,'monsterinsights_lite_refresh_token','1/oqVDkElcu9uor5Jt6XQqoh3FQrKfbXjoGqRZMKxvLL4','yes'),(577,'monsterinsights_report_overview_pageviews','a:4:{s:10:\"start-date\";s:10:\"2017-11-14\";s:8:\"end-date\";s:10:\"2017-12-13\";s:5:\"total\";a:1:{s:12:\"ga:pageviews\";s:3:\"122\";}s:4:\"data\";a:30:{i:0;a:2:{i:0;s:8:\"20171114\";i:1;s:1:\"0\";}i:1;a:2:{i:0;s:8:\"20171115\";i:1;s:1:\"0\";}i:2;a:2:{i:0;s:8:\"20171116\";i:1;s:1:\"0\";}i:3;a:2:{i:0;s:8:\"20171117\";i:1;s:1:\"0\";}i:4;a:2:{i:0;s:8:\"20171118\";i:1;s:1:\"0\";}i:5;a:2:{i:0;s:8:\"20171119\";i:1;s:1:\"0\";}i:6;a:2:{i:0;s:8:\"20171120\";i:1;s:1:\"0\";}i:7;a:2:{i:0;s:8:\"20171121\";i:1;s:1:\"0\";}i:8;a:2:{i:0;s:8:\"20171122\";i:1;s:1:\"0\";}i:9;a:2:{i:0;s:8:\"20171123\";i:1;s:1:\"0\";}i:10;a:2:{i:0;s:8:\"20171124\";i:1;s:1:\"0\";}i:11;a:2:{i:0;s:8:\"20171125\";i:1;s:1:\"0\";}i:12;a:2:{i:0;s:8:\"20171126\";i:1;s:2:\"21\";}i:13;a:2:{i:0;s:8:\"20171127\";i:1;s:2:\"54\";}i:14;a:2:{i:0;s:8:\"20171128\";i:1;s:2:\"14\";}i:15;a:2:{i:0;s:8:\"20171129\";i:1;s:1:\"5\";}i:16;a:2:{i:0;s:8:\"20171130\";i:1;s:1:\"0\";}i:17;a:2:{i:0;s:8:\"20171201\";i:1;s:2:\"28\";}i:18;a:2:{i:0;s:8:\"20171202\";i:1;s:1:\"0\";}i:19;a:2:{i:0;s:8:\"20171203\";i:1;s:1:\"0\";}i:20;a:2:{i:0;s:8:\"20171204\";i:1;s:1:\"0\";}i:21;a:2:{i:0;s:8:\"20171205\";i:1;s:1:\"0\";}i:22;a:2:{i:0;s:8:\"20171206\";i:1;s:1:\"0\";}i:23;a:2:{i:0;s:8:\"20171207\";i:1;s:1:\"0\";}i:24;a:2:{i:0;s:8:\"20171208\";i:1;s:1:\"0\";}i:25;a:2:{i:0;s:8:\"20171209\";i:1;s:1:\"0\";}i:26;a:2:{i:0;s:8:\"20171210\";i:1;s:1:\"0\";}i:27;a:2:{i:0;s:8:\"20171211\";i:1;s:1:\"0\";}i:28;a:2:{i:0;s:8:\"20171212\";i:1;s:1:\"0\";}i:29;a:2:{i:0;s:8:\"20171213\";i:1;s:1:\"0\";}}}','yes'),(578,'monsterinsights_report_overview_top_content','a:4:{s:10:\"start-date\";s:10:\"2017-11-14\";s:8:\"end-date\";s:10:\"2017-12-13\";s:5:\"total\";a:1:{s:12:\"ga:pageviews\";s:3:\"122\";}s:4:\"data\";a:6:{i:0;a:2:{i:0;s:1:\"/\";i:1;s:2:\"82\";}i:1;a:2:{i:0;s:57:\"/index.php/2017/11/12/installing-h5ai-on-your-web-server/\";i:1;s:2:\"16\";}i:2;a:2:{i:0;s:57:\"/index.php/2017/11/10/how-to-install-wordpress-on-ubuntu/\";i:1;s:2:\"11\";}i:3;a:2:{i:0;s:66:\"/index.php/2017/11/09/how-to-host-multiple-website-on-same-server/\";i:1;s:1:\"6\";}i:4;a:2:{i:0;s:60:\"/index.php/2017/11/08/how-to-host-your-website-using-ubuntu/\";i:1;s:1:\"5\";}i:5;a:2:{i:0;s:30:\"/index.php/category/how-to-do/\";i:1;s:1:\"2\";}}}','yes'),(579,'monsterinsights_report_overview_top_sources','a:4:{s:10:\"start-date\";s:10:\"2017-11-14\";s:8:\"end-date\";s:10:\"2017-12-13\";s:5:\"total\";a:1:{s:12:\"ga:pageviews\";s:3:\"122\";}s:4:\"data\";a:1:{i:0;a:2:{i:0;s:8:\"(direct)\";i:1;s:3:\"122\";}}}','yes'),(580,'monsterinsights_report_overview_countries','a:4:{s:10:\"start-date\";s:10:\"2017-11-14\";s:8:\"end-date\";s:10:\"2017-12-13\";s:5:\"total\";a:1:{s:12:\"ga:pageviews\";s:3:\"122\";}s:4:\"data\";a:2:{i:0;a:2:{i:0;s:2:\"IN\";i:1;s:3:\"118\";}i:1;a:2:{i:0;s:2:\"CZ\";i:1;s:1:\"4\";}}}','yes'),(581,'monsterinsights_tracking_notice','1','yes'),(582,'monsterinsights_notices','a:1:{s:33:\"monsterinsights_automatic_updates\";b:1;}','yes'),(597,'mi_tracking_last_send','1513574873','yes'),(646,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1513706377;s:7:\"checked\";a:11:{s:6:\"astrid\";s:4:\"1.15\";s:5:\"avata\";s:5:\"1.4.0\";s:13:\"big-pix-child\";s:14:\"3.2.1513418439\";s:7:\"big-pix\";s:3:\"3.2\";s:7:\"krystal\";s:5:\"1.0.6\";s:7:\"prasoon\";s:5:\"1.9.6\";s:17:\"siteorigin-unwind\";s:5:\"1.2.3\";s:6:\"tracks\";s:4:\"1.59\";s:13:\"twentyfifteen\";s:3:\"1.9\";s:15:\"twentyseventeen\";s:3:\"1.4\";s:13:\"twentysixteen\";s:3:\"1.4\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}}','no'),(647,'theme_mods_twentysixteen','a:1:{s:18:\"custom_css_post_id\";i:-1;}','yes'),(649,'_transient_twentysixteen_categories','1','yes'),(661,'category_children','a:0:{}','yes'),(690,'theme_mods_big-pix-child','a:1:{s:18:\"custom_css_post_id\";i:-1;}','yes'),(725,'ossdl_off_cdn_url','https://www.hyperdroid.in','yes'),(726,'ossdl_off_blog_url','https://www.hyperdroid.in','yes'),(727,'ossdl_off_include_dirs','wp-content,wp-includes','yes'),(728,'ossdl_off_exclude','.php','yes'),(729,'ossdl_cname','','yes'),(730,'wp_super_cache_index_detected','3','no'),(733,'wpsupercache_start','1513431250','yes'),(734,'wpsupercache_count','0','yes'),(735,'ossdl_https','0','yes'),(736,'supercache_stats','a:3:{s:9:\"generated\";i:1513431350;s:10:\"supercache\";a:5:{s:7:\"expired\";i:0;s:6:\"cached\";i:0;s:5:\"fsize\";i:0;s:11:\"cached_list\";a:0:{}s:12:\"expired_list\";a:0:{}}s:7:\"wpcache\";a:5:{s:7:\"expired\";i:0;s:6:\"cached\";i:0;s:5:\"fsize\";i:0;s:11:\"cached_list\";a:0:{}s:12:\"expired_list\";a:0:{}}}','yes'),(737,'wpsupercache_gc_time','1513706375','yes'),(744,'wpseo','a:25:{s:14:\"blocking_files\";a:1:{i:0;s:25:\"/var/www/html/sitemap.xml\";}s:15:\"ms_defaults_set\";b:0;s:7:\"version\";s:5:\"5.9.3\";s:12:\"company_logo\";s:0:\"\";s:12:\"company_name\";s:0:\"\";s:17:\"company_or_person\";s:6:\"person\";s:20:\"disableadvanced_meta\";b:0;s:19:\"onpage_indexability\";b:1;s:12:\"googleverify\";s:0:\"\";s:8:\"msverify\";s:0:\"\";s:11:\"person_name\";s:13:\"Kartik Bhalla\";s:12:\"website_name\";s:10:\"Hyperdroid\";s:22:\"alternate_website_name\";s:0:\"\";s:12:\"yandexverify\";s:0:\"\";s:9:\"site_type\";s:4:\"blog\";s:20:\"has_multiple_authors\";b:1;s:16:\"environment_type\";s:10:\"production\";s:23:\"content_analysis_active\";b:1;s:23:\"keyword_analysis_active\";b:1;s:20:\"enable_setting_pages\";b:0;s:21:\"enable_admin_bar_menu\";b:1;s:26:\"enable_cornerstone_content\";b:1;s:24:\"enable_text_link_counter\";b:1;s:22:\"show_onboarding_notice\";b:0;s:18:\"first_activated_on\";b:0;}','yes'),(745,'wpseo_permalinks','a:9:{s:15:\"cleanpermalinks\";b:0;s:24:\"cleanpermalink-extravars\";s:0:\"\";s:29:\"cleanpermalink-googlecampaign\";b:0;s:31:\"cleanpermalink-googlesitesearch\";b:0;s:15:\"cleanreplytocom\";b:0;s:10:\"cleanslugs\";b:1;s:18:\"redirectattachment\";b:0;s:17:\"stripcategorybase\";b:0;s:13:\"trailingslash\";b:0;}','yes'),(746,'wpseo_titles','a:53:{s:10:\"title_test\";i:0;s:17:\"forcerewritetitle\";b:0;s:9:\"separator\";s:7:\"sc-dash\";s:15:\"usemetakeywords\";b:0;s:16:\"title-home-wpseo\";s:42:\"%%sitename%% %%page%% %%sep%% %%sitedesc%%\";s:18:\"title-author-wpseo\";s:41:\"%%name%%, Author at %%sitename%% %%page%%\";s:19:\"title-archive-wpseo\";s:38:\"%%date%% %%page%% %%sep%% %%sitename%%\";s:18:\"title-search-wpseo\";s:63:\"You searched for %%searchphrase%% %%page%% %%sep%% %%sitename%%\";s:15:\"title-404-wpseo\";s:35:\"Page not found %%sep%% %%sitename%%\";s:19:\"metadesc-home-wpseo\";s:0:\"\";s:21:\"metadesc-author-wpseo\";s:0:\"\";s:22:\"metadesc-archive-wpseo\";s:0:\"\";s:18:\"metakey-home-wpseo\";s:0:\"\";s:20:\"metakey-author-wpseo\";s:0:\"\";s:22:\"noindex-subpages-wpseo\";b:0;s:20:\"noindex-author-wpseo\";b:0;s:21:\"noindex-archive-wpseo\";b:1;s:14:\"disable-author\";b:0;s:12:\"disable-date\";b:0;s:19:\"disable-post_format\";b:0;s:10:\"title-post\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:13:\"metadesc-post\";s:0:\"\";s:12:\"metakey-post\";s:0:\"\";s:12:\"noindex-post\";b:0;s:13:\"showdate-post\";b:0;s:16:\"hideeditbox-post\";b:0;s:10:\"title-page\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:13:\"metadesc-page\";s:0:\"\";s:12:\"metakey-page\";s:0:\"\";s:12:\"noindex-page\";b:0;s:13:\"showdate-page\";b:0;s:16:\"hideeditbox-page\";b:0;s:16:\"title-attachment\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:19:\"metadesc-attachment\";s:0:\"\";s:18:\"metakey-attachment\";s:0:\"\";s:18:\"noindex-attachment\";b:0;s:19:\"showdate-attachment\";b:0;s:22:\"hideeditbox-attachment\";b:0;s:18:\"title-tax-category\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:21:\"metadesc-tax-category\";s:0:\"\";s:20:\"metakey-tax-category\";s:0:\"\";s:24:\"hideeditbox-tax-category\";b:0;s:20:\"noindex-tax-category\";b:0;s:18:\"title-tax-post_tag\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:21:\"metadesc-tax-post_tag\";s:0:\"\";s:20:\"metakey-tax-post_tag\";s:0:\"\";s:24:\"hideeditbox-tax-post_tag\";b:0;s:20:\"noindex-tax-post_tag\";b:0;s:21:\"title-tax-post_format\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:24:\"metadesc-tax-post_format\";s:0:\"\";s:23:\"metakey-tax-post_format\";s:0:\"\";s:27:\"hideeditbox-tax-post_format\";b:0;s:23:\"noindex-tax-post_format\";b:1;}','yes'),(747,'wpseo_social','a:20:{s:9:\"fb_admins\";a:0:{}s:12:\"fbconnectkey\";s:32:\"f88f119bc4b92ea24af195c985a84d08\";s:13:\"facebook_site\";s:0:\"\";s:13:\"instagram_url\";s:0:\"\";s:12:\"linkedin_url\";s:0:\"\";s:11:\"myspace_url\";s:0:\"\";s:16:\"og_default_image\";s:0:\"\";s:18:\"og_frontpage_title\";s:0:\"\";s:17:\"og_frontpage_desc\";s:0:\"\";s:18:\"og_frontpage_image\";s:0:\"\";s:9:\"opengraph\";b:1;s:13:\"pinterest_url\";s:0:\"\";s:15:\"pinterestverify\";s:0:\"\";s:14:\"plus-publisher\";s:0:\"\";s:7:\"twitter\";b:1;s:12:\"twitter_site\";s:12:\"TheDemon1253\";s:17:\"twitter_card_type\";s:19:\"summary_large_image\";s:11:\"youtube_url\";s:0:\"\";s:15:\"google_plus_url\";s:37:\"https://plus.google.com/+KartikBhalla\";s:10:\"fbadminapp\";s:0:\"\";}','yes'),(748,'wpseo_rss','a:2:{s:9:\"rssbefore\";s:0:\"\";s:8:\"rssafter\";s:53:\"The post %%POSTLINK%% appeared first on %%BLOGLINK%%.\";}','yes'),(749,'wpseo_internallinks','a:10:{s:20:\"breadcrumbs-404crumb\";s:25:\"Error 404: Page not found\";s:23:\"breadcrumbs-blog-remove\";b:0;s:20:\"breadcrumbs-boldlast\";b:0;s:25:\"breadcrumbs-archiveprefix\";s:12:\"Archives for\";s:18:\"breadcrumbs-enable\";b:0;s:16:\"breadcrumbs-home\";s:4:\"Home\";s:18:\"breadcrumbs-prefix\";s:0:\"\";s:24:\"breadcrumbs-searchprefix\";s:16:\"You searched for\";s:15:\"breadcrumbs-sep\";s:7:\"&raquo;\";s:23:\"post_types-post-maintax\";i:0;}','yes'),(750,'wpseo_xml','a:16:{s:22:\"disable_author_sitemap\";b:1;s:22:\"disable_author_noposts\";b:1;s:16:\"enablexmlsitemap\";b:1;s:16:\"entries-per-page\";i:1000;s:14:\"excluded-posts\";s:0:\"\";s:38:\"user_role-administrator-not_in_sitemap\";b:0;s:31:\"user_role-editor-not_in_sitemap\";b:0;s:31:\"user_role-author-not_in_sitemap\";b:0;s:36:\"user_role-contributor-not_in_sitemap\";b:0;s:35:\"user_role-subscriber-not_in_sitemap\";b:0;s:30:\"post_types-post-not_in_sitemap\";b:0;s:30:\"post_types-page-not_in_sitemap\";b:0;s:36:\"post_types-attachment-not_in_sitemap\";b:1;s:34:\"taxonomies-category-not_in_sitemap\";b:0;s:34:\"taxonomies-post_tag-not_in_sitemap\";b:0;s:37:\"taxonomies-post_format-not_in_sitemap\";b:0;}','yes'),(751,'wpseo_flush_rewrite','1','yes'),(755,'wpseo_sitemap_cache_validator_global','eCcC','no'),(759,'wpseo-gsc-refresh_token','1/hXvr7y5NxjABjnuM1ZqP36ooBfJdnzECCI2uq-Tz3UoJCeNt6YCL8xexoJCkM378','yes'),(760,'wpseo-gsc-access_token','a:5:{s:13:\"refresh_token\";s:66:\"1/hXvr7y5NxjABjnuM1ZqP36ooBfJdnzECCI2uq-Tz3UoJCeNt6YCL8xexoJCkM378\";s:12:\"access_token\";s:129:\"ya29.GlskBenVWjfRLo5qdT07w-gh5IlL35jfOAD6-OX9AuS2Mcyt6KXCZuaoI9EIcBVEDx3LZ1tSTK3cTVfkcwRzCt8V1XeHBM8QfNPqr7ZipJQE1tWo1VgLkRena4Re\";s:7:\"expires\";d:1513455291;s:10:\"expires_in\";i:3600;s:7:\"created\";i:1513431891;}','yes'),(761,'wpseo-gsc','a:1:{s:7:\"profile\";s:25:\"https://www.hyperdroid.in\";}','yes'),(769,'itsec-storage','a:5:{s:6:\"global\";a:31:{s:15:\"lockout_message\";s:5:\"error\";s:20:\"user_lockout_message\";s:64:\"You have been locked out due to too many invalid login attempts.\";s:25:\"community_lockout_message\";s:77:\"Your IP address has been flagged as a threat by the iThemes Security network.\";s:9:\"blacklist\";b:1;s:15:\"blacklist_count\";i:3;s:16:\"blacklist_period\";i:7;s:14:\"lockout_period\";i:15;s:18:\"lockout_white_list\";a:0:{}s:12:\"log_rotation\";i:14;s:8:\"log_type\";s:8:\"database\";s:12:\"log_location\";s:54:\"/var/www/html/wp-content/uploads/ithemes-security/logs\";s:8:\"log_info\";s:41:\"hyperdroid-s87VVX8g4rdYlhrBAHnRVh3LnhSlD9\";s:14:\"allow_tracking\";b:0;s:11:\"write_files\";b:1;s:10:\"nginx_file\";s:24:\"/var/www/html/nginx.conf\";s:24:\"infinitewp_compatibility\";b:0;s:11:\"did_upgrade\";b:0;s:9:\"lock_file\";b:0;s:14:\"proxy_override\";b:0;s:14:\"hide_admin_bar\";b:0;s:16:\"show_error_codes\";b:0;s:25:\"show_new_dashboard_notice\";b:0;s:19:\"show_security_check\";b:0;s:5:\"build\";i:4078;s:20:\"activation_timestamp\";i:1513432494;s:16:\"digest_last_sent\";N;s:15:\"digest_messages\";N;s:12:\"digest_email\";N;s:19:\"email_notifications\";N;s:18:\"notification_email\";N;s:12:\"backup_email\";N;}s:19:\"network-brute-force\";a:5:{s:7:\"api_key\";s:32:\"0y38it3P4HLpNy58a4r4s46J6U3kMfkv\";s:10:\"api_secret\";s:128:\"3QU32zYAA6b6vf463TS9J1Tw0IcQ52r7A2IV6N8x5L65BJ86Clr9nUWIViz22Yrn692jb1m39F3rMYuP4841njc8zNg701ZO93l6Es38B4M3vsfJ87gn5KzJ8uBJVfN9\";s:10:\"enable_ban\";b:1;s:13:\"updates_optin\";b:1;s:7:\"api_nag\";b:0;}s:16:\"wordpress-tweaks\";a:12:{s:14:\"disable_xmlrpc\";i:0;s:22:\"allow_xmlrpc_multiauth\";b:0;s:8:\"rest_api\";s:15:\"restrict-access\";s:21:\"valid_user_login_type\";s:4:\"both\";s:18:\"wlwmanifest_header\";b:0;s:14:\"edituri_header\";b:0;s:12:\"comment_spam\";b:0;s:11:\"file_editor\";b:0;s:12:\"login_errors\";b:0;s:21:\"force_unique_nicename\";b:0;s:27:\"disable_unused_author_pages\";b:0;s:16:\"block_tabnapping\";b:0;}s:19:\"notification-center\";a:6:{s:9:\"last_sent\";a:1:{s:6:\"digest\";i:1513693831;}s:9:\"resend_at\";a:0:{}s:4:\"data\";a:1:{s:6:\"digest\";a:0:{}}s:11:\"mail_errors\";a:3:{s:13:\"5a381c73633bd\";a:3:{s:5:\"error\";a:2:{s:7:\"message\";s:54:\"You must provide at least one recipient email address.\";s:4:\"code\";s:14:\"wp_mail_failed\";}s:4:\"time\";i:1513626739;s:12:\"notification\";s:6:\"backup\";}s:13:\"5a381cc01c834\";a:3:{s:5:\"error\";a:2:{s:7:\"message\";s:54:\"You must provide at least one recipient email address.\";s:4:\"code\";s:14:\"wp_mail_failed\";}s:4:\"time\";i:1513626815;s:12:\"notification\";s:6:\"backup\";}s:13:\"5a381cce9126d\";a:3:{s:5:\"error\";a:2:{s:7:\"message\";s:54:\"You must provide at least one recipient email address.\";s:4:\"code\";s:14:\"wp_mail_failed\";}s:4:\"time\";i:1513626830;s:12:\"notification\";s:6:\"backup\";}}s:13:\"notifications\";a:2:{s:6:\"digest\";a:5:{s:8:\"schedule\";s:5:\"daily\";s:7:\"enabled\";b:1;s:9:\"user_list\";a:1:{i:0;s:18:\"role:administrator\";}s:15:\"previous_emails\";a:0:{}s:7:\"subject\";N;}s:7:\"lockout\";a:4:{s:7:\"enabled\";b:1;s:9:\"user_list\";a:1:{i:0;s:18:\"role:administrator\";}s:15:\"previous_emails\";a:0:{}s:7:\"subject\";N;}}s:12:\"admin_emails\";a:0:{}}s:6:\"backup\";a:9:{s:9:\"all_sites\";b:1;s:6:\"method\";i:2;s:8:\"location\";s:57:\"/var/www/html/wp-content/uploads/ithemes-security/backups\";s:6:\"retain\";i:1;s:3:\"zip\";b:1;s:7:\"exclude\";a:3:{i:0;s:14:\"itsec_lockouts\";i:1;s:9:\"itsec_log\";i:2;s:10:\"itsec_temp\";}s:7:\"enabled\";b:1;s:8:\"interval\";i:1;s:8:\"last_run\";i:0;}}','yes'),(770,'itsec_temp_whitelist_ip','a:3:{s:15:\"103.212.146.178\";i:1513712807;s:15:\"106.223.240.203\";i:1513767647;s:15:\"103.212.145.242\";i:1513792591;}','no'),(772,'itsec_active_modules','a:6:{s:9:\"ban-users\";b:1;s:6:\"backup\";b:0;s:11:\"brute-force\";b:1;s:19:\"network-brute-force\";b:1;s:16:\"strong-passwords\";b:1;s:16:\"wordpress-tweaks\";b:1;}','yes'),(776,'wpsc_feed_list','a:1:{i:0;s:110:\"/var/www/html/wp-content/cache/supercache/www.hyperdroid.in/feed/wp-cache-274211717f40ab278038cd499bef38ad.php\";}','yes'),(777,'wpseo_sitemap_1_cache_validator','5Go5O','no'),(778,'wpseo_sitemap_category_cache_validator','5Go5T','no'),(779,'wpseo_sitemap_post_cache_validator','5Go5Y','no'),(841,'wpseo_sitemap_144_cache_validator','3ryDp','no'),(888,'jabrfc_text','a:4:{s:4:\"find\";a:1:{i:0;s:38:\"- Powered by WordPress and WP Dev Shed\";}s:7:\"replace\";a:1:{i:0;s:0:\"\";}s:12:\"willLinkback\";s:2:\"no\";s:14:\"linkbackPostId\";s:3:\"106\";}','yes'),(902,'_site_transient_timeout_browser_c1f01d27de4c093a3b5e4a2750681814','1514128376','no'),(903,'_site_transient_browser_c1f01d27de4c093a3b5e4a2750681814','a:10:{s:4:\"name\";s:7:\"unknown\";s:7:\"version\";s:0:\"\";s:8:\"platform\";s:0:\"\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(908,'_site_transient_timeout_browser_3f45a2131ce965ea2a03cdb712b45502','1514128581','no'),(909,'_site_transient_browser_3f45a2131ce965ea2a03cdb712b45502','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"63.0.3239.108\";s:8:\"platform\";s:5:\"Linux\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(982,'_site_transient_timeout_itsec_ipcheck_103.212.146.178','1513624690','no'),(983,'_site_transient_itsec_ipcheck_103.212.146.178','a:3:{s:5:\"block\";b:0;s:9:\"cache_ttl\";i:1513624690;s:10:\"report_ttl\";i:0;}','no'),(986,'_site_transient_timeout_browser_fabb8f13ecdec521816b242cd4007251','1514225891','no'),(987,'_site_transient_browser_fabb8f13ecdec521816b242cd4007251','a:10:{s:4:\"name\";s:8:\"Chromium\";s:7:\"version\";s:12:\"62.0.3202.94\";s:8:\"platform\";s:5:\"Linux\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(1011,'_transient_timeout_hmbkp_database_size','1514226351','no'),(1012,'_transient_hmbkp_database_size','3883008','no'),(1013,'_transient_timeout_hmbkp_root_size','1513707951','no'),(1014,'_transient_hmbkp_root_size','70159357','no'),(1015,'_transient_timeout_hmbkp_wp_cron_test_beacon','1514226351','no'),(1016,'_transient_hmbkp_wp_cron_test_beacon','1','no'),(1017,'_site_transient_timeout_popular_importers_e413c3a501e7d89089f2f53c8d193e84','1513794368','no'),(1018,'_site_transient_popular_importers_e413c3a501e7d89089f2f53c8d193e84','a:2:{s:9:\"importers\";a:8:{s:7:\"blogger\";a:4:{s:4:\"name\";s:7:\"Blogger\";s:11:\"description\";s:54:\"Import posts, comments, and users from a Blogger blog.\";s:11:\"plugin-slug\";s:16:\"blogger-importer\";s:11:\"importer-id\";s:7:\"blogger\";}s:9:\"wpcat2tag\";a:4:{s:4:\"name\";s:29:\"Categories and Tags Converter\";s:11:\"description\";s:71:\"Convert existing categories to tags or tags to categories, selectively.\";s:11:\"plugin-slug\";s:18:\"wpcat2tag-importer\";s:11:\"importer-id\";s:10:\"wp-cat2tag\";}s:11:\"livejournal\";a:4:{s:4:\"name\";s:11:\"LiveJournal\";s:11:\"description\";s:46:\"Import posts from LiveJournal using their API.\";s:11:\"plugin-slug\";s:20:\"livejournal-importer\";s:11:\"importer-id\";s:11:\"livejournal\";}s:11:\"movabletype\";a:4:{s:4:\"name\";s:24:\"Movable Type and TypePad\";s:11:\"description\";s:62:\"Import posts and comments from a Movable Type or TypePad blog.\";s:11:\"plugin-slug\";s:20:\"movabletype-importer\";s:11:\"importer-id\";s:2:\"mt\";}s:4:\"opml\";a:4:{s:4:\"name\";s:8:\"Blogroll\";s:11:\"description\";s:28:\"Import links in OPML format.\";s:11:\"plugin-slug\";s:13:\"opml-importer\";s:11:\"importer-id\";s:4:\"opml\";}s:3:\"rss\";a:4:{s:4:\"name\";s:3:\"RSS\";s:11:\"description\";s:30:\"Import posts from an RSS feed.\";s:11:\"plugin-slug\";s:12:\"rss-importer\";s:11:\"importer-id\";s:3:\"rss\";}s:6:\"tumblr\";a:4:{s:4:\"name\";s:6:\"Tumblr\";s:11:\"description\";s:53:\"Import posts &amp; media from Tumblr using their API.\";s:11:\"plugin-slug\";s:15:\"tumblr-importer\";s:11:\"importer-id\";s:6:\"tumblr\";}s:9:\"wordpress\";a:4:{s:4:\"name\";s:9:\"WordPress\";s:11:\"description\";s:96:\"Import posts, pages, comments, custom fields, categories, and tags from a WordPress export file.\";s:11:\"plugin-slug\";s:18:\"wordpress-importer\";s:11:\"importer-id\";s:9:\"wordpress\";}}s:10:\"translated\";b:0;}','no'),(1019,'_site_transient_timeout_browser_9815ad9a82b72bbf6673b51f3e62751f','1514226672','no'),(1020,'_site_transient_browser_9815ad9a82b72bbf6673b51f3e62751f','a:10:{s:4:\"name\";s:6:\"Safari\";s:7:\"version\";s:3:\"7.0\";s:8:\"platform\";s:6:\"iPhone\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:1;}','no'),(1022,'_site_transient_timeout_itsec_ipcheck_167.21.142.43','1513625779','no'),(1023,'_site_transient_itsec_ipcheck_167.21.142.43','a:3:{s:5:\"block\";b:0;s:9:\"cache_ttl\";i:1513625779;s:10:\"report_ttl\";i:0;}','no'),(1024,'_site_transient_timeout_browser_ba081c70c62b1a73f7586809b37ba98f','1514226979','no'),(1025,'_site_transient_browser_ba081c70c62b1a73f7586809b37ba98f','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"59.0.3071.115\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(1028,'_site_transient_timeout_community-events-f93eb7c995174e2d69a20ea2c245bdc0','1513665381','no'),(1029,'_site_transient_community-events-f93eb7c995174e2d69a20ea2c245bdc0','a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"167.21.142.0\";}s:6:\"events\";a:2:{i:0;a:7:{s:4:\"type\";s:6:\"meetup\";s:5:\"title\";s:37:\"Year-End Review + WordPress Help Desk\";s:3:\"url\";s:60:\"https://www.meetup.com/WordPress-Lancaster/events/245297012/\";s:6:\"meetup\";s:19:\"WordPress Lancaster\";s:10:\"meetup_url\";s:43:\"https://www.meetup.com/WordPress-Lancaster/\";s:4:\"date\";s:19:\"2017-12-21 19:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:18:\"Lancaster, PA, USA\";s:7:\"country\";s:2:\"us\";s:8:\"latitude\";d:40.043407000000002;s:9:\"longitude\";d:-76.306808000000004;}}i:1;a:7:{s:4:\"type\";s:8:\"wordcamp\";s:5:\"title\";s:22:\"WordCamp Lancaster, PA\";s:3:\"url\";s:37:\"https://2018.lancasterpa.wordcamp.org\";s:6:\"meetup\";N;s:10:\"meetup_url\";N;s:4:\"date\";s:19:\"2018-03-03 00:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:13:\"Lancaster, PA\";s:7:\"country\";s:2:\"US\";s:8:\"latitude\";d:40.054489500000003;s:9:\"longitude\";d:-76.282538299999999;}}}}','no'),(1038,'_transient_timeout_plugin_slugs','1513713508','no'),(1039,'_transient_plugin_slugs','a:11:{i:0;s:30:\"advanced-custom-fields/acf.php\";i:1;s:35:\"backupwordpress/backupwordpress.php\";i:2;s:50:\"google-analytics-for-wordpress/googleanalytics.php\";i:3;s:9:\"hello.php\";i:4;s:41:\"better-wp-security/better-wp-security.php\";i:5;s:22:\"swift-mailer/index.php\";i:6;s:37:\"tinymce-advanced/tinymce-advanced.php\";i:7;s:27:\"updraftplus/updraftplus.php\";i:8;s:41:\"wordpress-importer/wordpress-importer.php\";i:9;s:27:\"wp-super-cache/wp-cache.php\";i:10;s:24:\"wordpress-seo/wp-seo.php\";}','no'),(1040,'_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a','1513637751','no'),(1041,'_site_transient_poptags_40cd750bba9870f18aada2478b24840a','O:8:\"stdClass\":100:{s:6:\"widget\";a:3:{s:4:\"name\";s:6:\"widget\";s:4:\"slug\";s:6:\"widget\";s:5:\"count\";i:4413;}s:4:\"post\";a:3:{s:4:\"name\";s:4:\"post\";s:4:\"slug\";s:4:\"post\";s:5:\"count\";i:2522;}s:11:\"woocommerce\";a:3:{s:4:\"name\";s:11:\"woocommerce\";s:4:\"slug\";s:11:\"woocommerce\";s:5:\"count\";i:2469;}s:5:\"admin\";a:3:{s:4:\"name\";s:5:\"admin\";s:4:\"slug\";s:5:\"admin\";s:5:\"count\";i:2381;}s:5:\"posts\";a:3:{s:4:\"name\";s:5:\"posts\";s:4:\"slug\";s:5:\"posts\";s:5:\"count\";i:1849;}s:8:\"comments\";a:3:{s:4:\"name\";s:8:\"comments\";s:4:\"slug\";s:8:\"comments\";s:5:\"count\";i:1618;}s:9:\"shortcode\";a:3:{s:4:\"name\";s:9:\"shortcode\";s:4:\"slug\";s:9:\"shortcode\";s:5:\"count\";i:1614;}s:7:\"twitter\";a:3:{s:4:\"name\";s:7:\"twitter\";s:4:\"slug\";s:7:\"twitter\";s:5:\"count\";i:1439;}s:6:\"images\";a:3:{s:4:\"name\";s:6:\"images\";s:4:\"slug\";s:6:\"images\";s:5:\"count\";i:1370;}s:6:\"google\";a:3:{s:4:\"name\";s:6:\"google\";s:4:\"slug\";s:6:\"google\";s:5:\"count\";i:1369;}s:8:\"facebook\";a:3:{s:4:\"name\";s:8:\"facebook\";s:4:\"slug\";s:8:\"facebook\";s:5:\"count\";i:1356;}s:5:\"image\";a:3:{s:4:\"name\";s:5:\"image\";s:4:\"slug\";s:5:\"image\";s:5:\"count\";i:1284;}s:7:\"sidebar\";a:3:{s:4:\"name\";s:7:\"sidebar\";s:4:\"slug\";s:7:\"sidebar\";s:5:\"count\";i:1281;}s:3:\"seo\";a:3:{s:4:\"name\";s:3:\"seo\";s:4:\"slug\";s:3:\"seo\";s:5:\"count\";i:1162;}s:7:\"gallery\";a:3:{s:4:\"name\";s:7:\"gallery\";s:4:\"slug\";s:7:\"gallery\";s:5:\"count\";i:1072;}s:4:\"page\";a:3:{s:4:\"name\";s:4:\"page\";s:4:\"slug\";s:4:\"page\";s:5:\"count\";i:1055;}s:6:\"social\";a:3:{s:4:\"name\";s:6:\"social\";s:4:\"slug\";s:6:\"social\";s:5:\"count\";i:1005;}s:5:\"email\";a:3:{s:4:\"name\";s:5:\"email\";s:4:\"slug\";s:5:\"email\";s:5:\"count\";i:973;}s:9:\"ecommerce\";a:3:{s:4:\"name\";s:9:\"ecommerce\";s:4:\"slug\";s:9:\"ecommerce\";s:5:\"count\";i:846;}s:5:\"login\";a:3:{s:4:\"name\";s:5:\"login\";s:4:\"slug\";s:5:\"login\";s:5:\"count\";i:837;}s:5:\"links\";a:3:{s:4:\"name\";s:5:\"links\";s:4:\"slug\";s:5:\"links\";s:5:\"count\";i:817;}s:7:\"widgets\";a:3:{s:4:\"name\";s:7:\"widgets\";s:4:\"slug\";s:7:\"widgets\";s:5:\"count\";i:786;}s:5:\"video\";a:3:{s:4:\"name\";s:5:\"video\";s:4:\"slug\";s:5:\"video\";s:5:\"count\";i:778;}s:7:\"content\";a:3:{s:4:\"name\";s:7:\"content\";s:4:\"slug\";s:7:\"content\";s:5:\"count\";i:683;}s:3:\"rss\";a:3:{s:4:\"name\";s:3:\"rss\";s:4:\"slug\";s:3:\"rss\";s:5:\"count\";i:675;}s:8:\"security\";a:3:{s:4:\"name\";s:8:\"security\";s:4:\"slug\";s:8:\"security\";s:5:\"count\";i:673;}s:10:\"buddypress\";a:3:{s:4:\"name\";s:10:\"buddypress\";s:4:\"slug\";s:10:\"buddypress\";s:5:\"count\";i:670;}s:4:\"spam\";a:3:{s:4:\"name\";s:4:\"spam\";s:4:\"slug\";s:4:\"spam\";s:5:\"count\";i:665;}s:5:\"pages\";a:3:{s:4:\"name\";s:5:\"pages\";s:4:\"slug\";s:5:\"pages\";s:5:\"count\";i:651;}s:6:\"slider\";a:3:{s:4:\"name\";s:6:\"slider\";s:4:\"slug\";s:6:\"slider\";s:5:\"count\";i:640;}s:6:\"jquery\";a:3:{s:4:\"name\";s:6:\"jquery\";s:4:\"slug\";s:6:\"jquery\";s:5:\"count\";i:640;}s:5:\"media\";a:3:{s:4:\"name\";s:5:\"media\";s:4:\"slug\";s:5:\"media\";s:5:\"count\";i:619;}s:9:\"analytics\";a:3:{s:4:\"name\";s:9:\"analytics\";s:4:\"slug\";s:9:\"analytics\";s:5:\"count\";i:619;}s:4:\"feed\";a:3:{s:4:\"name\";s:4:\"feed\";s:4:\"slug\";s:4:\"feed\";s:5:\"count\";i:600;}s:10:\"e-commerce\";a:3:{s:4:\"name\";s:10:\"e-commerce\";s:4:\"slug\";s:10:\"e-commerce\";s:5:\"count\";i:593;}s:4:\"ajax\";a:3:{s:4:\"name\";s:4:\"ajax\";s:4:\"slug\";s:4:\"ajax\";s:5:\"count\";i:593;}s:6:\"search\";a:3:{s:4:\"name\";s:6:\"search\";s:4:\"slug\";s:6:\"search\";s:5:\"count\";i:591;}s:8:\"category\";a:3:{s:4:\"name\";s:8:\"category\";s:4:\"slug\";s:8:\"category\";s:5:\"count\";i:583;}s:4:\"menu\";a:3:{s:4:\"name\";s:4:\"menu\";s:4:\"slug\";s:4:\"menu\";s:5:\"count\";i:572;}s:4:\"form\";a:3:{s:4:\"name\";s:4:\"form\";s:4:\"slug\";s:4:\"form\";s:5:\"count\";i:570;}s:5:\"embed\";a:3:{s:4:\"name\";s:5:\"embed\";s:4:\"slug\";s:5:\"embed\";s:5:\"count\";i:550;}s:10:\"javascript\";a:3:{s:4:\"name\";s:10:\"javascript\";s:4:\"slug\";s:10:\"javascript\";s:5:\"count\";i:542;}s:4:\"link\";a:3:{s:4:\"name\";s:4:\"link\";s:4:\"slug\";s:4:\"link\";s:5:\"count\";i:530;}s:3:\"css\";a:3:{s:4:\"name\";s:3:\"css\";s:4:\"slug\";s:3:\"css\";s:5:\"count\";i:526;}s:5:\"share\";a:3:{s:4:\"name\";s:5:\"share\";s:4:\"slug\";s:5:\"share\";s:5:\"count\";i:513;}s:7:\"comment\";a:3:{s:4:\"name\";s:7:\"comment\";s:4:\"slug\";s:7:\"comment\";s:5:\"count\";i:505;}s:7:\"youtube\";a:3:{s:4:\"name\";s:7:\"youtube\";s:4:\"slug\";s:7:\"youtube\";s:5:\"count\";i:504;}s:5:\"theme\";a:3:{s:4:\"name\";s:5:\"theme\";s:4:\"slug\";s:5:\"theme\";s:5:\"count\";i:498;}s:9:\"dashboard\";a:3:{s:4:\"name\";s:9:\"dashboard\";s:4:\"slug\";s:9:\"dashboard\";s:5:\"count\";i:485;}s:10:\"responsive\";a:3:{s:4:\"name\";s:10:\"responsive\";s:4:\"slug\";s:10:\"responsive\";s:5:\"count\";i:482;}s:6:\"custom\";a:3:{s:4:\"name\";s:6:\"custom\";s:4:\"slug\";s:6:\"custom\";s:5:\"count\";i:480;}s:10:\"categories\";a:3:{s:4:\"name\";s:10:\"categories\";s:4:\"slug\";s:10:\"categories\";s:5:\"count\";i:474;}s:6:\"editor\";a:3:{s:4:\"name\";s:6:\"editor\";s:4:\"slug\";s:6:\"editor\";s:5:\"count\";i:462;}s:3:\"ads\";a:3:{s:4:\"name\";s:3:\"ads\";s:4:\"slug\";s:3:\"ads\";s:5:\"count\";i:458;}s:9:\"affiliate\";a:3:{s:4:\"name\";s:9:\"affiliate\";s:4:\"slug\";s:9:\"affiliate\";s:5:\"count\";i:458;}s:12:\"contact-form\";a:3:{s:4:\"name\";s:12:\"contact form\";s:4:\"slug\";s:12:\"contact-form\";s:5:\"count\";i:451;}s:6:\"button\";a:3:{s:4:\"name\";s:6:\"button\";s:4:\"slug\";s:6:\"button\";s:5:\"count\";i:451;}s:4:\"tags\";a:3:{s:4:\"name\";s:4:\"tags\";s:4:\"slug\";s:4:\"tags\";s:5:\"count\";i:447;}s:4:\"user\";a:3:{s:4:\"name\";s:4:\"user\";s:4:\"slug\";s:4:\"user\";s:5:\"count\";i:429;}s:6:\"mobile\";a:3:{s:4:\"name\";s:6:\"mobile\";s:4:\"slug\";s:6:\"mobile\";s:5:\"count\";i:417;}s:7:\"contact\";a:3:{s:4:\"name\";s:7:\"contact\";s:4:\"slug\";s:7:\"contact\";s:5:\"count\";i:417;}s:5:\"photo\";a:3:{s:4:\"name\";s:5:\"photo\";s:4:\"slug\";s:5:\"photo\";s:5:\"count\";i:416;}s:5:\"stats\";a:3:{s:4:\"name\";s:5:\"stats\";s:4:\"slug\";s:5:\"stats\";s:5:\"count\";i:410;}s:5:\"users\";a:3:{s:4:\"name\";s:5:\"users\";s:4:\"slug\";s:5:\"users\";s:5:\"count\";i:410;}s:9:\"slideshow\";a:3:{s:4:\"name\";s:9:\"slideshow\";s:4:\"slug\";s:9:\"slideshow\";s:5:\"count\";i:406;}s:6:\"photos\";a:3:{s:4:\"name\";s:6:\"photos\";s:4:\"slug\";s:6:\"photos\";s:5:\"count\";i:402;}s:3:\"api\";a:3:{s:4:\"name\";s:3:\"api\";s:4:\"slug\";s:3:\"api\";s:5:\"count\";i:401;}s:6:\"events\";a:3:{s:4:\"name\";s:6:\"events\";s:4:\"slug\";s:6:\"events\";s:5:\"count\";i:391;}s:10:\"statistics\";a:3:{s:4:\"name\";s:10:\"statistics\";s:4:\"slug\";s:10:\"statistics\";s:5:\"count\";i:386;}s:10:\"navigation\";a:3:{s:4:\"name\";s:10:\"navigation\";s:4:\"slug\";s:10:\"navigation\";s:5:\"count\";i:379;}s:4:\"news\";a:3:{s:4:\"name\";s:4:\"news\";s:4:\"slug\";s:4:\"news\";s:5:\"count\";i:359;}s:7:\"payment\";a:3:{s:4:\"name\";s:7:\"payment\";s:4:\"slug\";s:7:\"payment\";s:5:\"count\";i:354;}s:8:\"calendar\";a:3:{s:4:\"name\";s:8:\"calendar\";s:4:\"slug\";s:8:\"calendar\";s:5:\"count\";i:352;}s:10:\"shortcodes\";a:3:{s:4:\"name\";s:10:\"shortcodes\";s:4:\"slug\";s:10:\"shortcodes\";s:5:\"count\";i:346;}s:12:\"social-media\";a:3:{s:4:\"name\";s:12:\"social media\";s:4:\"slug\";s:12:\"social-media\";s:5:\"count\";i:337;}s:5:\"popup\";a:3:{s:4:\"name\";s:5:\"popup\";s:4:\"slug\";s:5:\"popup\";s:5:\"count\";i:337;}s:9:\"multisite\";a:3:{s:4:\"name\";s:9:\"multisite\";s:4:\"slug\";s:9:\"multisite\";s:5:\"count\";i:336;}s:7:\"plugins\";a:3:{s:4:\"name\";s:7:\"plugins\";s:4:\"slug\";s:7:\"plugins\";s:5:\"count\";i:333;}s:4:\"code\";a:3:{s:4:\"name\";s:4:\"code\";s:4:\"slug\";s:4:\"code\";s:5:\"count\";i:331;}s:10:\"newsletter\";a:3:{s:4:\"name\";s:10:\"newsletter\";s:4:\"slug\";s:10:\"newsletter\";s:5:\"count\";i:331;}s:4:\"list\";a:3:{s:4:\"name\";s:4:\"list\";s:4:\"slug\";s:4:\"list\";s:5:\"count\";i:328;}s:4:\"meta\";a:3:{s:4:\"name\";s:4:\"meta\";s:4:\"slug\";s:4:\"meta\";s:5:\"count\";i:325;}s:3:\"url\";a:3:{s:4:\"name\";s:3:\"url\";s:4:\"slug\";s:3:\"url\";s:5:\"count\";i:324;}s:9:\"marketing\";a:3:{s:4:\"name\";s:9:\"marketing\";s:4:\"slug\";s:9:\"marketing\";s:5:\"count\";i:324;}s:4:\"chat\";a:3:{s:4:\"name\";s:4:\"chat\";s:4:\"slug\";s:4:\"chat\";s:5:\"count\";i:320;}s:8:\"redirect\";a:3:{s:4:\"name\";s:8:\"redirect\";s:4:\"slug\";s:8:\"redirect\";s:5:\"count\";i:307;}s:15:\"payment-gateway\";a:3:{s:4:\"name\";s:15:\"payment gateway\";s:4:\"slug\";s:15:\"payment-gateway\";s:5:\"count\";i:305;}s:3:\"tag\";a:3:{s:4:\"name\";s:3:\"tag\";s:4:\"slug\";s:3:\"tag\";s:5:\"count\";i:300;}s:16:\"custom-post-type\";a:3:{s:4:\"name\";s:16:\"custom post type\";s:4:\"slug\";s:16:\"custom-post-type\";s:5:\"count\";i:299;}s:5:\"forms\";a:3:{s:4:\"name\";s:5:\"forms\";s:4:\"slug\";s:5:\"forms\";s:5:\"count\";i:299;}s:6:\"simple\";a:3:{s:4:\"name\";s:6:\"simple\";s:4:\"slug\";s:6:\"simple\";s:5:\"count\";i:299;}s:11:\"advertising\";a:3:{s:4:\"name\";s:11:\"advertising\";s:4:\"slug\";s:11:\"advertising\";s:5:\"count\";i:292;}s:7:\"adsense\";a:3:{s:4:\"name\";s:7:\"adsense\";s:4:\"slug\";s:7:\"adsense\";s:5:\"count\";i:288;}s:4:\"html\";a:3:{s:4:\"name\";s:4:\"html\";s:4:\"slug\";s:4:\"html\";s:5:\"count\";i:288;}s:6:\"author\";a:3:{s:4:\"name\";s:6:\"author\";s:4:\"slug\";s:6:\"author\";s:5:\"count\";i:286;}s:8:\"tracking\";a:3:{s:4:\"name\";s:8:\"tracking\";s:4:\"slug\";s:8:\"tracking\";s:5:\"count\";i:284;}s:8:\"lightbox\";a:3:{s:4:\"name\";s:8:\"lightbox\";s:4:\"slug\";s:8:\"lightbox\";s:5:\"count\";i:282;}s:12:\"notification\";a:3:{s:4:\"name\";s:12:\"notification\";s:4:\"slug\";s:12:\"notification\";s:5:\"count\";i:280;}s:16:\"google-analytics\";a:3:{s:4:\"name\";s:16:\"google analytics\";s:4:\"slug\";s:16:\"google-analytics\";s:5:\"count\";i:280;}s:7:\"tinymce\";a:3:{s:4:\"name\";s:7:\"tinyMCE\";s:4:\"slug\";s:7:\"tinymce\";s:5:\"count\";i:279;}}','no'),(1045,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1513706376;s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:10:{s:30:\"advanced-custom-fields/acf.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:36:\"w.org/plugins/advanced-custom-fields\";s:4:\"slug\";s:22:\"advanced-custom-fields\";s:6:\"plugin\";s:30:\"advanced-custom-fields/acf.php\";s:11:\"new_version\";s:6:\"4.4.12\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/advanced-custom-fields/\";s:7:\"package\";s:72:\"https://downloads.wordpress.org/plugin/advanced-custom-fields.4.4.12.zip\";s:5:\"icons\";a:3:{s:2:\"1x\";s:75:\"https://ps.w.org/advanced-custom-fields/assets/icon-128x128.png?rev=1082746\";s:2:\"2x\";s:75:\"https://ps.w.org/advanced-custom-fields/assets/icon-256x256.png?rev=1082746\";s:7:\"default\";s:75:\"https://ps.w.org/advanced-custom-fields/assets/icon-256x256.png?rev=1082746\";}s:7:\"banners\";a:3:{s:2:\"2x\";s:78:\"https://ps.w.org/advanced-custom-fields/assets/banner-1544x500.jpg?rev=1729099\";s:2:\"1x\";s:77:\"https://ps.w.org/advanced-custom-fields/assets/banner-772x250.jpg?rev=1729102\";s:7:\"default\";s:78:\"https://ps.w.org/advanced-custom-fields/assets/banner-1544x500.jpg?rev=1729099\";}s:11:\"banners_rtl\";a:0:{}}s:35:\"backupwordpress/backupwordpress.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:29:\"w.org/plugins/backupwordpress\";s:4:\"slug\";s:15:\"backupwordpress\";s:6:\"plugin\";s:35:\"backupwordpress/backupwordpress.php\";s:11:\"new_version\";s:5:\"3.6.4\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/backupwordpress/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/backupwordpress.3.6.4.zip\";s:5:\"icons\";a:3:{s:2:\"1x\";s:68:\"https://ps.w.org/backupwordpress/assets/icon-128x128.png?rev=1105225\";s:2:\"2x\";s:68:\"https://ps.w.org/backupwordpress/assets/icon-256x256.jpg?rev=1105225\";s:7:\"default\";s:68:\"https://ps.w.org/backupwordpress/assets/icon-256x256.jpg?rev=1105225\";}s:7:\"banners\";a:3:{s:2:\"2x\";s:70:\"https://ps.w.org/backupwordpress/assets/banner-1544x500.jpg?rev=904756\";s:2:\"1x\";s:69:\"https://ps.w.org/backupwordpress/assets/banner-772x250.jpg?rev=904756\";s:7:\"default\";s:70:\"https://ps.w.org/backupwordpress/assets/banner-1544x500.jpg?rev=904756\";}s:11:\"banners_rtl\";a:0:{}}s:50:\"google-analytics-for-wordpress/googleanalytics.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:44:\"w.org/plugins/google-analytics-for-wordpress\";s:4:\"slug\";s:30:\"google-analytics-for-wordpress\";s:6:\"plugin\";s:50:\"google-analytics-for-wordpress/googleanalytics.php\";s:11:\"new_version\";s:5:\"6.2.6\";s:3:\"url\";s:61:\"https://wordpress.org/plugins/google-analytics-for-wordpress/\";s:7:\"package\";s:79:\"https://downloads.wordpress.org/plugin/google-analytics-for-wordpress.6.2.6.zip\";s:5:\"icons\";a:4:{s:2:\"1x\";s:83:\"https://ps.w.org/google-analytics-for-wordpress/assets/icon-128x128.png?rev=1598927\";s:2:\"2x\";s:83:\"https://ps.w.org/google-analytics-for-wordpress/assets/icon-256x256.png?rev=1598927\";s:3:\"svg\";s:75:\"https://ps.w.org/google-analytics-for-wordpress/assets/icon.svg?rev=1598927\";s:7:\"default\";s:75:\"https://ps.w.org/google-analytics-for-wordpress/assets/icon.svg?rev=1598927\";}s:7:\"banners\";a:3:{s:2:\"2x\";s:86:\"https://ps.w.org/google-analytics-for-wordpress/assets/banner-1544x500.png?rev=1598927\";s:2:\"1x\";s:85:\"https://ps.w.org/google-analytics-for-wordpress/assets/banner-772x250.png?rev=1598927\";s:7:\"default\";s:86:\"https://ps.w.org/google-analytics-for-wordpress/assets/banner-1544x500.png?rev=1598927\";}s:11:\"banners_rtl\";a:0:{}}s:9:\"hello.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";s:5:\"icons\";a:3:{s:2:\"1x\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=969907\";s:2:\"2x\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=969907\";s:7:\"default\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=969907\";}s:7:\"banners\";a:2:{s:2:\"1x\";s:65:\"https://ps.w.org/hello-dolly/assets/banner-772x250.png?rev=478342\";s:7:\"default\";s:65:\"https://ps.w.org/hello-dolly/assets/banner-772x250.png?rev=478342\";}s:11:\"banners_rtl\";a:0:{}}s:41:\"better-wp-security/better-wp-security.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:32:\"w.org/plugins/better-wp-security\";s:4:\"slug\";s:18:\"better-wp-security\";s:6:\"plugin\";s:41:\"better-wp-security/better-wp-security.php\";s:11:\"new_version\";s:5:\"6.7.0\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/better-wp-security/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/better-wp-security.6.7.0.zip\";s:5:\"icons\";a:4:{s:2:\"1x\";s:70:\"https://ps.w.org/better-wp-security/assets/icon-128x128.jpg?rev=969999\";s:2:\"2x\";s:70:\"https://ps.w.org/better-wp-security/assets/icon-256x256.jpg?rev=969999\";s:3:\"svg\";s:62:\"https://ps.w.org/better-wp-security/assets/icon.svg?rev=970042\";s:7:\"default\";s:62:\"https://ps.w.org/better-wp-security/assets/icon.svg?rev=970042\";}s:7:\"banners\";a:2:{s:2:\"1x\";s:72:\"https://ps.w.org/better-wp-security/assets/banner-772x250.png?rev=881897\";s:7:\"default\";s:72:\"https://ps.w.org/better-wp-security/assets/banner-772x250.png?rev=881897\";}s:11:\"banners_rtl\";a:0:{}}s:22:\"swift-mailer/index.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:26:\"w.org/plugins/swift-mailer\";s:4:\"slug\";s:12:\"swift-mailer\";s:6:\"plugin\";s:22:\"swift-mailer/index.php\";s:11:\"new_version\";s:5:\"5.4.3\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/swift-mailer/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/swift-mailer.5.4.3.zip\";s:5:\"icons\";a:0:{}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}}s:37:\"tinymce-advanced/tinymce-advanced.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:30:\"w.org/plugins/tinymce-advanced\";s:4:\"slug\";s:16:\"tinymce-advanced\";s:6:\"plugin\";s:37:\"tinymce-advanced/tinymce-advanced.php\";s:11:\"new_version\";s:5:\"4.6.7\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/tinymce-advanced/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/tinymce-advanced.4.6.7.zip\";s:5:\"icons\";a:3:{s:2:\"1x\";s:68:\"https://ps.w.org/tinymce-advanced/assets/icon-128x128.png?rev=971511\";s:2:\"2x\";s:68:\"https://ps.w.org/tinymce-advanced/assets/icon-256x256.png?rev=971511\";s:7:\"default\";s:68:\"https://ps.w.org/tinymce-advanced/assets/icon-256x256.png?rev=971511\";}s:7:\"banners\";a:2:{s:2:\"1x\";s:70:\"https://ps.w.org/tinymce-advanced/assets/banner-772x250.png?rev=894078\";s:7:\"default\";s:70:\"https://ps.w.org/tinymce-advanced/assets/banner-772x250.png?rev=894078\";}s:11:\"banners_rtl\";a:0:{}}s:41:\"wordpress-importer/wordpress-importer.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:32:\"w.org/plugins/wordpress-importer\";s:4:\"slug\";s:18:\"wordpress-importer\";s:6:\"plugin\";s:41:\"wordpress-importer/wordpress-importer.php\";s:11:\"new_version\";s:5:\"0.6.3\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/wordpress-importer/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/wordpress-importer.0.6.3.zip\";s:5:\"icons\";a:0:{}s:7:\"banners\";a:2:{s:2:\"1x\";s:72:\"https://ps.w.org/wordpress-importer/assets/banner-772x250.png?rev=547654\";s:7:\"default\";s:72:\"https://ps.w.org/wordpress-importer/assets/banner-772x250.png?rev=547654\";}s:11:\"banners_rtl\";a:0:{}}s:27:\"wp-super-cache/wp-cache.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:28:\"w.org/plugins/wp-super-cache\";s:4:\"slug\";s:14:\"wp-super-cache\";s:6:\"plugin\";s:27:\"wp-super-cache/wp-cache.php\";s:11:\"new_version\";s:5:\"1.5.9\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/wp-super-cache/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/wp-super-cache.1.5.9.zip\";s:5:\"icons\";a:3:{s:2:\"1x\";s:67:\"https://ps.w.org/wp-super-cache/assets/icon-128x128.png?rev=1095422\";s:2:\"2x\";s:67:\"https://ps.w.org/wp-super-cache/assets/icon-256x256.png?rev=1095422\";s:7:\"default\";s:67:\"https://ps.w.org/wp-super-cache/assets/icon-256x256.png?rev=1095422\";}s:7:\"banners\";a:3:{s:2:\"2x\";s:70:\"https://ps.w.org/wp-super-cache/assets/banner-1544x500.png?rev=1082414\";s:2:\"1x\";s:69:\"https://ps.w.org/wp-super-cache/assets/banner-772x250.png?rev=1082414\";s:7:\"default\";s:70:\"https://ps.w.org/wp-super-cache/assets/banner-1544x500.png?rev=1082414\";}s:11:\"banners_rtl\";a:0:{}}s:24:\"wordpress-seo/wp-seo.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:27:\"w.org/plugins/wordpress-seo\";s:4:\"slug\";s:13:\"wordpress-seo\";s:6:\"plugin\";s:24:\"wordpress-seo/wp-seo.php\";s:11:\"new_version\";s:5:\"5.9.3\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/wordpress-seo/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/wordpress-seo.5.9.3.zip\";s:5:\"icons\";a:4:{s:2:\"1x\";s:66:\"https://ps.w.org/wordpress-seo/assets/icon-128x128.png?rev=1550389\";s:2:\"2x\";s:66:\"https://ps.w.org/wordpress-seo/assets/icon-256x256.png?rev=1550389\";s:3:\"svg\";s:58:\"https://ps.w.org/wordpress-seo/assets/icon.svg?rev=1203032\";s:7:\"default\";s:58:\"https://ps.w.org/wordpress-seo/assets/icon.svg?rev=1203032\";}s:7:\"banners\";a:3:{s:2:\"2x\";s:69:\"https://ps.w.org/wordpress-seo/assets/banner-1544x500.png?rev=1695112\";s:2:\"1x\";s:68:\"https://ps.w.org/wordpress-seo/assets/banner-772x250.png?rev=1695112\";s:7:\"default\";s:69:\"https://ps.w.org/wordpress-seo/assets/banner-1544x500.png?rev=1695112\";}s:11:\"banners_rtl\";a:3:{s:2:\"2x\";s:73:\"https://ps.w.org/wordpress-seo/assets/banner-1544x500-rtl.png?rev=1695112\";s:2:\"1x\";s:72:\"https://ps.w.org/wordpress-seo/assets/banner-772x250-rtl.png?rev=1695112\";s:7:\"default\";s:73:\"https://ps.w.org/wordpress-seo/assets/banner-1544x500-rtl.png?rev=1695112\";}}}}','no'),(1046,'updraft_updraftvault','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-8d1bf232930606b6752280fefb16a3b2\";a:0:{}}}','yes'),(1047,'updraft_dropbox','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-4e5ed6cf8cc609af8d0dfc40f5edc7e1\";a:0:{}}}','yes'),(1048,'updraft_s3','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-8a22a2d0db29b362bcb88ece88f1b041\";a:0:{}}}','yes'),(1049,'updraft_cloudfiles','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-72511525f3d2e0eea8ad33993ecd37ab\";a:0:{}}}','yes'),(1050,'updraft_googledrive','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-fa1de3dbbd2da0245fa9182c71100384\";a:0:{}}}','yes'),(1051,'updraft_onedrive','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-4846eda6fa5a459f400f1cb4b776cdf2\";a:0:{}}}','yes'),(1052,'updraft_ftp','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-5dd2dc983eaf0c88974f4ce75b9b89c5\";a:0:{}}}','yes'),(1053,'updraft_azure','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-e81610761b71e8b5f536c73180cf05f2\";a:0:{}}}','yes'),(1054,'updraft_sftp','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-22f69be66f205613fd18f6ab82742e0a\";a:0:{}}}','yes'),(1055,'updraft_googlecloud','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-428a58fd26937d7e0f1b17a81699362f\";a:0:{}}}','yes'),(1056,'updraft_backblaze','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-34ec3225f011c9d8159651ae1411fdff\";a:0:{}}}','yes'),(1057,'updraft_webdav','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-1d218dc1d60b2ada0cda28be82a55467\";a:0:{}}}','yes'),(1058,'updraft_s3generic','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-4925e67c24494abe1fbbcd2be1e2e84d\";a:0:{}}}','yes'),(1059,'updraft_openstack','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-884c787d92182d9bd98d4988d1f37d7d\";a:0:{}}}','yes'),(1060,'updraft_dreamobjects','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-36f3ad5bcecabadb7edb2e5919fe598c\";a:0:{}}}','yes'),(1061,'updraftplus-addons_siteid','366d4bf9d202f1ae1a6c28074c6795cf','no'),(1067,'_transient_timeout_hmbkp_schedules','1514232068','no'),(1068,'_transient_hmbkp_schedules','a:2:{i:0;s:25:\"hmbkp_schedule_1512804770\";i:1;s:25:\"hmbkp_schedule_1512804771\";}','no'),(1070,'wpseo_sitemap_196_cache_validator','6hEno','no'),(1073,'_transient_doing_cron','1513706375.3193900585174560546875','yes'),(1074,'_site_transient_timeout_itsec_ipcheck_176.8.89.80','1513675301','no'),(1075,'_site_transient_itsec_ipcheck_176.8.89.80','a:3:{s:5:\"block\";b:0;s:9:\"cache_ttl\";i:1513675301;s:10:\"report_ttl\";i:1513671706;}','no'),(1076,'_site_transient_timeout_itsec_wp_upload_dir','1513780231','no'),(1077,'_site_transient_itsec_wp_upload_dir','a:6:{s:4:\"path\";s:40:\"/var/www/html/wp-content/uploads/2017/12\";s:3:\"url\";s:52:\"https://www.hyperdroid.in/wp-content/uploads/2017/12\";s:6:\"subdir\";s:8:\"/2017/12\";s:7:\"basedir\";s:32:\"/var/www/html/wp-content/uploads\";s:7:\"baseurl\";s:44:\"https://www.hyperdroid.in/wp-content/uploads\";s:5:\"error\";b:0;}','no'),(1083,'_site_transient_timeout_community-events-6a691dfa1b2a53dfcf8991559d49cdce','1513745743','no'),(1084,'_site_transient_community-events-6a691dfa1b2a53dfcf8991559d49cdce','a:2:{s:8:\"location\";a:3:{s:11:\"description\";s:9:\"New Delhi\";s:8:\"latitude\";s:10:\"28.6519500\";s:9:\"longitude\";s:10:\"77.2314900\";}s:6:\"events\";a:5:{i:0;a:7:{s:4:\"type\";s:6:\"meetup\";s:5:\"title\";s:44:\"New-year Celebration with WP Delhi community\";s:3:\"url\";s:60:\"https://www.meetup.com/WordPress-New-Delhi/events/242983176/\";s:6:\"meetup\";s:25:\"WordPress New Delhi (NCR)\";s:10:\"meetup_url\";s:43:\"https://www.meetup.com/WordPress-New-Delhi/\";s:4:\"date\";s:19:\"2017-12-30 17:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:12:\"Delhi, India\";s:7:\"country\";s:2:\"in\";s:8:\"latitude\";d:28.703849999999999;s:9:\"longitude\";d:77.133769999999998;}}i:1;a:7:{s:4:\"type\";s:6:\"meetup\";s:5:\"title\";s:32:\"Developing WP Themes and Plugins\";s:3:\"url\";s:60:\"https://www.meetup.com/WordPress-New-Delhi/events/242983093/\";s:6:\"meetup\";s:25:\"WordPress New Delhi (NCR)\";s:10:\"meetup_url\";s:43:\"https://www.meetup.com/WordPress-New-Delhi/\";s:4:\"date\";s:19:\"2018-01-06 15:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:12:\"Delhi, India\";s:7:\"country\";s:2:\"in\";s:8:\"latitude\";d:28.703849999999999;s:9:\"longitude\";d:77.133769999999998;}}i:2;a:7:{s:4:\"type\";s:6:\"meetup\";s:5:\"title\";s:34:\"Mastering PHPMyAdmin for WordPress\";s:3:\"url\";s:60:\"https://www.meetup.com/WordPress-New-Delhi/events/242982967/\";s:6:\"meetup\";s:25:\"WordPress New Delhi (NCR)\";s:10:\"meetup_url\";s:43:\"https://www.meetup.com/WordPress-New-Delhi/\";s:4:\"date\";s:19:\"2018-01-20 16:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:12:\"Delhi, India\";s:7:\"country\";s:2:\"in\";s:8:\"latitude\";d:28.703849999999999;s:9:\"longitude\";d:77.133769999999998;}}i:3;a:7:{s:4:\"type\";s:6:\"meetup\";s:5:\"title\";s:29:\"Adding custom fields in WP DB\";s:3:\"url\";s:60:\"https://www.meetup.com/WordPress-New-Delhi/events/242983000/\";s:6:\"meetup\";s:25:\"WordPress New Delhi (NCR)\";s:10:\"meetup_url\";s:43:\"https://www.meetup.com/WordPress-New-Delhi/\";s:4:\"date\";s:19:\"2018-02-03 16:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:12:\"Delhi, India\";s:7:\"country\";s:2:\"in\";s:8:\"latitude\";d:28.703849999999999;s:9:\"longitude\";d:77.133769999999998;}}i:4;a:7:{s:4:\"type\";s:6:\"meetup\";s:5:\"title\";s:25:\"Child themes and its uses\";s:3:\"url\";s:60:\"https://www.meetup.com/WordPress-New-Delhi/events/242983052/\";s:6:\"meetup\";s:25:\"WordPress New Delhi (NCR)\";s:10:\"meetup_url\";s:43:\"https://www.meetup.com/WordPress-New-Delhi/\";s:4:\"date\";s:19:\"2018-02-17 16:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:12:\"Delhi, India\";s:7:\"country\";s:2:\"in\";s:8:\"latitude\";d:28.703849999999999;s:9:\"longitude\";d:77.133769999999998;}}}}','no'),(1085,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1513745744','no'),(1086,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"\n	Wed, 06 Dec 2017 18:39:27 +0000	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://wordpress.org/?v=5.0-alpha-42411\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:33:\"\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"The Month in WordPress: November 2017\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://wordpress.org/news/2017/12/the-month-in-wordpress-november-2017/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 01 Dec 2017 11:00:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Month in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5290\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:354:\"The WordPress project recently released WordPress 4.9, “Tipton” — a new major release named in honor of musician and band leader Billy Tipton. Read on to find out more about this and other interesting news from around the WordPress world in November. WordPress 4.9 “Tipton” On November 16, WordPress 4.9 was released with new features [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Hugh Lashbrooke\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4234:\"\n<p>The WordPress project recently released WordPress 4.9, “Tipton” — a new major release named in honor of musician and band leader Billy Tipton. Read on to find out more about this and other interesting news from around the WordPress world in November.</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<h2>WordPress 4.9 “Tipton”</h2>\n\n\n\n<p>On November 16, <a href=\"https://wordpress.org/news/2017/11/tipton/\">WordPress 4.9 was released</a> with new features for publishers and developers alike. Release highlights include design locking, scheduling, and previews in the Customizer, an even more secure and usable code editing experience, a new gallery widget, and text widget improvements.</p>\n\n\n\n<p>The follow up security and maintenance, v4.9.1, <a href=\"https://wordpress.org/news/2017/11/wordpress-4-9-1-security-and-maintenance-release/\">has now been released</a> to tighten up the security of WordPress as a whole.</p>\n\n\n\n<p>To get involved in building WordPress Core, jump into the #core channel in the<a href=\"https://make.wordpress.org/chat/\"> Making WordPress Slack group</a>, and follow<a href=\"https://make.wordpress.org/core/\"> the Core team blog</a>.</p>\n\n\n\n<h2>Apply to Speak At WordCamp Europe 2018</h2>\n\n\n\n<p>The next edition of WordCamp Europe takes place in June, 2018. While the organizing team is still in the early stages of planning, <a href=\"https://2018.europe.wordcamp.org/2017/11/15/are-you-ready-to-speak-at-the-largest-wordpress-event-in-europe/\">they are accepting speaker applications</a>.</p>\n\n\n\n<p>WordCamp Europe is the largest WordCamp in the world and, along with WordCamp US, one of the flagship events of the WordCamp program — speaking at this event is a great way to give back to the global WordPress community by sharing your knowledge and expertise with thousands of WordPress enthusiasts.</p>\n\n\n\n<h2>Diversity Outreach Speaker Training Initiative</h2>\n\n\n\n<p>To help WordPress community organizers offer diverse speaker lineups, <a href=\"https://make.wordpress.org/community/2017/11/13/call-for-volunteers-diversity-outreach-speaker-training/\">a new community initiative has kicked off</a> to use existing <a href=\"https://make.wordpress.org/training/handbook/speaker-training/\">speaker training workshops</a> to demystify speaking requirements and help participants gain confidence in their ability to share their WordPress knowledge in a WordCamp session.</p>\n\n\n\n<p>The working group behind this initiative will be meeting regularly to discuss and plan how they can help local communities to train speakers for WordCamps and other events.</p>\n\n\n\n<p>To get involved in this initiative, you can join the meetings at 5pm UTC every other Wednesday in the #community-team channel of the<a href=\"https://make.wordpress.org/chat/\"> Making WordPress Slack group</a>.</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<h2>Further Reading:</h2>\n\n\n\n<ul>\n    <li><a href=\"https://2017.us.wordcamp.org/\">WordCamp US 2017</a> is happening on December 1-3 in Nashville, with the annual State of the Word talk happening on Saturday afternoon — <a href=\"https://2017.us.wordcamp.org/live-stream/\">the live stream of the entire event is available to view for free</a>.</li>\n    <li><a href=\"https://xwp.co/tide-a-path-to-better-code-across-the-wordpress-ecosystem/\">Tide</a>, a new service from XWP designed to help users make informed plugin choices, is due to launch at WordCamp US.</li>\n    <li>Gutenberg development is continuing rapidly, with <a href=\"https://make.wordpress.org/core/2017/11/28/whats-new-in-gutenberg-28th-november/\">a packed new release</a> and a focus on <a href=\"https://make.wordpress.org/test/2017/11/22/testing-flow-in-gutenberg/\">usability testing</a>.</li>\n    <li>After some discussion among the community, <a href=\"https://make.wordpress.org/community/2017/11/10/discussion-micro-regional-wordcamps/\">a new type of micro-regional WordCamp</a> is going to be introduced into the global WordCamp program.</li>\n</ul>\n\n\n\n<p><em></em></p>\n\n\n\n<p><em>If you have a story we should consider including in the next “Month in WordPress” post, please <a href=\"https://make.wordpress.org/community/month-in-wordpress-submissions/\">submit it here</a>.</em></p>\n\n\n\n<p><em></em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5290\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.9.1 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://wordpress.org/news/2017/11/wordpress-4-9-1-security-and-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Nov 2017 20:33:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5215\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:359:\"WordPress 4.9.1 is now available. This is a security and maintenance release for all versions since WordPress 3.7. We strongly encourage you to update your sites immediately. WordPress versions 4.9 and earlier are affected by four security issues which could potentially be exploited as part of a multi-vector attack. As part of the core team&#x27;s [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"John Blackbourn\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4287:\"\n<p>WordPress 4.9.1 is now available. This is a <strong>security and maintenance release</strong> for all versions since WordPress 3.7. We strongly encourage you to update your sites immediately.</p>\n\n\n\n<p>WordPress versions 4.9 and earlier are affected by four security issues which could potentially be exploited as part of a multi-vector attack. As part of the core team&#x27;s ongoing commitment to security hardening, the following fixes have been implemented in 4.9.1:</p>\n\n\n\n<ol>\n    <li>Use a properly generated hash for the <code>newbloguser</code> key instead of a determinate substring.</li>\n    <li>Add escaping to the language attributes used on <code>html</code> elements.</li>\n    <li>Ensure the attributes of enclosures are correctly escaped in RSS and Atom feeds.</li>\n    <li>Remove the ability to upload JavaScript files for users who do not have the <code>unfiltered_html</code> capability.</li>\n</ol>\n\n\n\n<p>Thank you to the reporters of these issues for practicing <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible security disclosure</a>: <a href=\"https://twitter.com/0x62626262\">Rahul Pratap Singh</a> and John Blackbourn.</p>\n\n\n\n<p>Eleven other bugs were fixed in WordPress 4.9.1. Particularly of note were:</p>\n\n\n\n<ul>\n    <li>Issues relating to the caching of theme template files.</li>\n    <li>A MediaElement JavaScript error preventing users of certain languages from being able to upload media files.</li>\n    <li>The inability to edit theme and plugin files on Windows based servers.</li>\n</ul>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2017/11/28/wordpress-4-9-1-scheduled-for-november-29th/\">This post has more information about all of the issues fixed in 4.9.1 if you&#x27;d like to learn more</a>.</p>\n\n\n\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.9.1</a> or venture over to Dashboard → Updates and click &quot;Update Now.&quot; Sites that support automatic background updates are already beginning to update automatically.</p>\n\n\n\n<p>Thank you to everyone who contributed to WordPress 4.9.1:</p>\n\n\n\n<p><a href=\"https://profiles.wordpress.org/schlessera/\">Alain Schlesser</a>, <a href=\"https://profiles.wordpress.org/afercia/\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/la-geek/\">Angelika Reisiger</a>, <a href=\"https://profiles.wordpress.org/blobfolio/\">Blobfolio</a>, <a href=\"https://profiles.wordpress.org/bobbingwide/\">bobbingwide</a>, <a href=\"https://profiles.wordpress.org/chetan200891/\">Chetan Prajapati</a>, <a href=\"https://profiles.wordpress.org/dd32/\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90/\">Dominik Schilling (ocean90)</a>, <a href=\"https://profiles.wordpress.org/edo888/\">edo888</a>, <a href=\"https://profiles.wordpress.org/erich_k4wp/\">Erich Munz</a>, <a href=\"https://profiles.wordpress.org/flixos90/\">Felix Arntz</a>, <a href=\"https://profiles.wordpress.org/mista-flo/\">Florian TIAR</a>, <a href=\"https://profiles.wordpress.org/pento/\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/ibenic/\">Igor Benic</a>, <a href=\"https://profiles.wordpress.org/jfarthing84/\">Jeff Farthing</a>, <a href=\"https://profiles.wordpress.org/jbpaul17/\">Jeffrey Paul</a>, <a href=\"https://profiles.wordpress.org/jeremyescott/\">jeremyescott</a>, <a href=\"https://profiles.wordpress.org/joemcgill/\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/johnbillion/\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/johnpgreen/\">johnpgreen</a>, <a href=\"https://profiles.wordpress.org/ryelle/\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/lenasterg/\">lenasterg</a>, <a href=\"https://profiles.wordpress.org/clorith/\">Marius L. J.</a>, <a href=\"https://profiles.wordpress.org/melchoyce/\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/mariovalney/\">Mário Valney</a>, <a href=\"https://profiles.wordpress.org/natacado/\">natacado</a>, <a href=\"https://profiles.wordpress.org/odysseygate/\">odyssey</a>, <a href=\"https://profiles.wordpress.org/precies/\">precies</a>, <a href=\"https://profiles.wordpress.org/stodorovic/\">Saša</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">Sergey Biryukov</a>, and <a href=\"https://profiles.wordpress.org/westonruter/\">Weston Ruter</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5215\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:33:\"\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"WordPress 4.9 “Tipton”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://wordpress.org/news/2017/11/tipton/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 16 Nov 2017 01:16:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4968\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:227:\"Announcing version 4.9 of WordPress, named “Tipton” in honor of jazz pianist and band leader Billy Tipton. New features in 4.9 will smooth your design workflow and keep you safe from coding errors. Download or update today!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Mel Choyce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:42288:\"<h2 style=\"text-align: center\">Major Customizer Improvements, Code Error Checking, and More!&nbsp;?</h2>\n\r\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/wordpress.org/news/files/2017/11/banner.png?fit=2400%2C1200&amp;ssl=1\" alt=\"\" /></figure>\r\n\r\n\r\n\r\n<p>Version 4.9 of WordPress, named “Tipton” in honor of jazz musician and band leader Billy Tipton, is available for download or update in your WordPress dashboard. New features in 4.9 will smooth your design workflow and keep you safe from coding errors.</p>\r\n\r\n\r\n\r\n<p>Featuring design drafts, scheduling, and locking, along with preview links, the Customizer workflow improves collaboration for content creators. What’s more, code syntax highlighting and error checking will make for a clean and smooth site building experience. Finally, if all that wasn’t pretty great, we’ve got an awesome new Gallery widget and improvements to theme browsing and switching.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2 style=\"text-align:center\">Customizer Workflow Improved </h2>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https://i0.wp.com/wordpress.org/news/files/2017/11/customizer-workflow-improved-small.png?w=632&#038;ssl=1\" alt=\"\" data-recalc-dims=\"1\" /></figure>\r\n\r\n\r\n\r\n<h3>Draft and Schedule Site Design Customizations</h3>\r\n\r\n\r\n\r\n<p>Yes, you read that right. Just like you can draft and revise posts and schedule them to go live on the date and time you choose, you can now tinker with your site’s design and schedule those design changes to go live as you please.</p>\r\n\r\n\r\n\r\n<h3>Collaborate with Design Preview Links</h3>\r\n\r\n\r\n\r\n<p>Need to get some feedback on proposed site design changes? WordPress 4.9 gives you a preview link you can send to colleagues and customers so that you can collect and integrate feedback before you schedule the changes to go live. Can we say collaboration++?</p>\r\n\r\n\r\n\r\n<h3>Design Locking Guards Your Changes</h3>\r\n\r\n\r\n\r\n<p>Ever encounter a scenario where two designers walk into a project and designer A overrides designer B’s beautiful changes? WordPress 4.9’s design lock feature (similar to post locking) secures your draft design so that no one can make changes to it or erase all your hard work.</p>\r\n\r\n\r\n\r\n<h3>A Prompt to Protect Your Work</h3>\r\n\r\n\r\n\r\n<p>Were you lured away from your desk before you saved your new draft design? Fear not, when you return, WordPress 4.9 will politely ask whether or not you’d like to save your unsaved changes.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2 style=\"text-align:center\">Coding Enhancements</h2>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/wordpress.org/news/files/2017/11/coding-enhancements-small.png?w=632&#038;ssl=1\" alt=\"\" data-recalc-dims=\"1\" /></figure>\r\n\r\n\r\n\r\n<h3>Syntax Highlighting and Error Checking? Yes, Please!</h3>\r\n\r\n\r\n\r\n<p>You’ve got a display problem but can’t quite figure out exactly what went wrong in the CSS you lovingly wrote. With syntax highlighting and error checking for CSS editing and the Custom HTML widget introduced in WordPress 4.8.1, you’ll pinpoint coding errors quickly. Practically guaranteed to help you scan code more easily, and suss out &amp; fix code errors quickly.</p>\r\n\r\n\r\n\r\n<h3>Sandbox for Safety</h3>\r\n\r\n\r\n\r\n<p>The dreaded white screen. You’ll avoid it when working on themes and plugin code because WordPress 4.9 will warn you about saving an error. You’ll sleep better at night.</p>\r\n\r\n\r\n\r\n<h3>Warning: Potential Danger Ahead!</h3>\r\n\r\n\r\n\r\n<p>When you edit themes and plugins directly, WordPress 4.9 will politely warn you that this is a dangerous practice and will recommend that you draft and test changes before updating your file. Take the safe route: You’ll thank you. Your team and customers will thank you.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2 style=\"text-align:center\">Even More Widget Updates </h2>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/wordpress.org/news/files/2017/11/even-more-widget-updates-small.png?w=632&#038;ssl=1\" alt=\"\" data-recalc-dims=\"1\" /></figure>\r\n\r\n\r\n\r\n<h3>The New Gallery Widget</h3>\r\n\r\n\r\n\r\n<p>An incremental improvement to the media changes hatched in WordPress 4.8, you can now add a gallery via this new widget. Yes!</p>\r\n\r\n\r\n\r\n<h3>Press a Button, Add Media</h3>\r\n\r\n\r\n\r\n<p>Want to add media to your text widget? Embed images, video, and audio directly into the widget along with your text, with our simple but useful Add Media button. Woo!</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2 style=\"text-align:center\">Site Building Improvements </h2>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/wordpress.org/news/files/2017/11/site-building-improvements-small.png?w=632&#038;ssl=1\" alt=\"\" data-recalc-dims=\"1\" /></figure>\r\n\r\n\r\n\r\n<h3>More Reliable Theme Switching</h3>\r\n\r\n\r\n\r\n<p>When you switch themes, widgets sometimes think they can just move location. Improvements in WordPress 4.9 offer more persistent menu and widget placement when you decide it’s time for a new theme. </p>\r\n\r\n\r\n\r\n<h3>Find and Preview the Perfect Theme</h3>\r\n\r\n\r\n\r\n<p>Looking for a new theme for your site? Now, from within the Customizer, you can search, browse, and preview over 2600 themes before deploying changes to your site. What’s more, you can speed your search with filters for subject, features, and layout.</p>\r\n\r\n\r\n\r\n<h3>Better Menu Instructions = Less Confusion</h3>\r\n\r\n\r\n\r\n<p>Were you confused by the steps to create a new menu? Perhaps no longer! We’ve ironed out the UX for a smoother menu creation process. Newly updated copy will guide you.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2 style=\"text-align:center\">Lend a Hand with Gutenberg ?</h2>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/wordpress.org/news/files/2017/11/gutenberg-1.png?w=632&#038;ssl=1\" alt=\"\" data-recalc-dims=\"1\" /></figure>\r\n\r\n\r\n\r\n<p>WordPress is working on a new way to create and control your content and we’d love to have your help. Interested in being an <a href=\"https://wordpress.org/plugins/gutenberg/\">early tester</a> or getting involved with the Gutenberg project? <a href=\"https://github.com/WordPress/gutenberg\">Contribute on GitHub</a>.</p>\r\n\r\n\r\n\r\n<p>(PS: this post was written in Gutenberg!)</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2 style=\"text-align:center\">Developer Happiness ?</h2>\r\n\r\n\r\n\r\n<h3><a href=\"https://make.wordpress.org/core/2017/11/01/improvements-to-the-customize-js-api-in-4-9/\">Customizer JS API Improvements</a></h3>\r\n\r\n\r\n\r\n<p>We’ve made numerous improvements to the Customizer JS API in WordPress 4.9, eliminating many pain points. (Hello, default parameters for constructs! Goodbye repeated ID for constructs!) There are also new base control templates, a date/time control, and section/panel/global notifications to name a few. <a href=\"https://make.wordpress.org/core/2017/11/01/improvements-to-the-customize-js-api-in-4-9/\">Check out the full list.</a></p>\r\n\r\n\r\n\r\n<h3><a href=\"https://make.wordpress.org/core/2017/10/22/code-editing-improvements-in-wordpress-4-9/\">CodeMirror available for use in your themes and plugins</a></h3>\r\n\r\n\r\n\r\n<p>We’ve introduced a new code editing library, CodeMirror, for use within core. CodeMirror allows for syntax highlighting, error checking, and validation when creating code writing or editing experiences within your plugins, like CSS or JavaScript include fields.</p>\r\n\r\n\r\n\r\n<h3><a href=\"https://make.wordpress.org/core/2017/10/30/mediaelement-upgrades-in-wordpress-4-9/\">MediaElement.js upgraded to 4.2.6</a></h3>\r\n\r\n\r\n\r\n<p>WordPress 4.9 includes an upgraded version of MediaElement.js, which removes dependencies on jQuery, improves accessibility, modernizes the UI, and fixes many bugs.</p>\r\n\r\n\r\n\r\n<h3><a href=\"https://make.wordpress.org/core/2017/10/15/improvements-for-roles-and-capabilities-in-4-9/\">Roles and Capabilities Improvements</a></h3>\r\n\r\n\r\n\r\n<p>New capabilities have been introduced that allow granular management of plugins and translation files. In addition, the site switching process in multisite has been fine-tuned to update the available roles and capabilities in a more reliable and coherent way.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h2>The Squad</h2>\r\n\r\n\r\n\r\n<p>This release was led by <a href=\"https://choycedesign.com/\">Mel Choyce</a> and <a href=\"https://weston.ruter.net/\">Weston Ruter</a>, with the help of the following fabulous folks. There are 443 contributors with props in this release, with 185 of them contributing for the first time. Pull up some Billy Tipton on your music service of choice, and check out some of their profiles:</p>\r\n\r\n\r\n\r\n<a href=\"https://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/abrightclearweb\">abrightclearweb</a>, <a href=\"https://profiles.wordpress.org/ibachal\">Achal Jain</a>, <a href=\"https://profiles.wordpress.org/achbed\">achbed</a>, <a href=\"https://profiles.wordpress.org/acmethemes\">Acme Themes</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/adammacias\">adammacias</a>, <a href=\"https://profiles.wordpress.org/mrahmadawais\">Ahmad Awais</a>, <a href=\"https://profiles.wordpress.org/ahmadawais\">ahmadawais</a>, <a href=\"https://profiles.wordpress.org/airesvsg\">airesvsg</a>, <a href=\"https://profiles.wordpress.org/ajoah\">ajoah</a>, <a href=\"https://profiles.wordpress.org/akibjorklund\">Aki Bj&#246;rklund</a>, <a href=\"https://profiles.wordpress.org/akshayvinchurkar\">akshayvinchurkar</a>, <a href=\"https://profiles.wordpress.org/schlessera\">Alain Schlesser</a>, <a href=\"https://profiles.wordpress.org/xknown\">Alex Concha</a>, <a href=\"https://profiles.wordpress.org/xavortm\">Alex Dimitrov</a>, <a href=\"https://profiles.wordpress.org/ironpaperweight\">Alex Hon</a>, <a href=\"https://profiles.wordpress.org/alex27\">alex27</a>, <a href=\"https://profiles.wordpress.org/allancole\">allancole</a>, <a href=\"https://profiles.wordpress.org/arush\">Amanda Rush</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/andrewp-2\">Andreas Panag</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/rarst\">Andrey \"Rarst\" Savchenko</a>, <a href=\"https://profiles.wordpress.org/andizer\">Andy Meerwaldt</a>, <a href=\"https://profiles.wordpress.org/kelderic\">Andy Mercer</a>, <a href=\"https://profiles.wordpress.org/andy\">Andy Skelton</a>, <a href=\"https://profiles.wordpress.org/aniketpant\">Aniket Pant</a>, <a href=\"https://profiles.wordpress.org/anilbasnet\">Anil Basnet</a>, <a href=\"https://profiles.wordpress.org/ankit-k-gupta\">Ankit K Gupta</a>, <a href=\"https://profiles.wordpress.org/ahortin\">Anthony Hortin</a>, <a href=\"https://profiles.wordpress.org/antisilent\">antisilent</a>, <a href=\"https://profiles.wordpress.org/atimmer\">Anton Timmermans</a>, <a href=\"https://profiles.wordpress.org/apokalyptik\">apokalyptik</a>, <a href=\"https://profiles.wordpress.org/artoliukkonen\">artoliukkonen</a>, <a href=\"https://profiles.wordpress.org/ideag\">Arunas Liuiza</a>, <a href=\"https://profiles.wordpress.org/attitude\">attitude</a>, <a href=\"https://profiles.wordpress.org/backermann\">backermann</a>, <a href=\"https://profiles.wordpress.org/b-07\">Bappi</a>, <a href=\"https://profiles.wordpress.org/bcole808\">Ben Cole</a>, <a href=\"https://profiles.wordpress.org/quasel\">Bernhard Gronau</a>, <a href=\"https://profiles.wordpress.org/kau-boy\">Bernhard Kau</a>, <a href=\"https://profiles.wordpress.org/binarymoon\">binarymoon</a>, <a href=\"https://profiles.wordpress.org/birgire\">Birgir Erlendsson (birgire)</a>, <a href=\"https://profiles.wordpress.org/bjornw\">BjornW</a>, <a href=\"https://profiles.wordpress.org/bobbingwide\">bobbingwide</a>, <a href=\"https://profiles.wordpress.org/boblinthorst\">boblinthorst</a>, <a href=\"https://profiles.wordpress.org/boboudreau\">boboudreau</a>, <a href=\"https://profiles.wordpress.org/gitlost\">bonger</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone B. Gorges</a>, <a href=\"https://profiles.wordpress.org/brainstormforce\">Brainstorm Force</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/bpayton\">Brandon Payton</a>, <a href=\"https://profiles.wordpress.org/brianhogg\">Brian Hogg</a>, <a href=\"https://profiles.wordpress.org/krogsgard\">Brian Krogsgard</a>, <a href=\"https://profiles.wordpress.org/bronsonquick\">Bronson Quick</a>, <a href=\"https://profiles.wordpress.org/sixhours\">Caroline Moore</a>, <a href=\"https://profiles.wordpress.org/caseypatrickdriscoll\">Casey Driscoll</a>, <a href=\"https://profiles.wordpress.org/caspie\">Caspie</a>, <a href=\"https://profiles.wordpress.org/chandrapatel\">Chandra Patel</a>, <a href=\"https://profiles.wordpress.org/chaos-engine\">Chaos Engine</a>, <a href=\"https://profiles.wordpress.org/cheeserolls\">cheeserolls</a>, <a href=\"https://profiles.wordpress.org/chesio\">chesio</a>, <a href=\"https://profiles.wordpress.org/ketuchetan\">chetansatasiya</a>, <a href=\"https://profiles.wordpress.org/choongsavvii\">choong</a>, <a href=\"https://profiles.wordpress.org/chouby\">Chouby</a>, <a href=\"https://profiles.wordpress.org/chredd\">chredd</a>, <a href=\"https://profiles.wordpress.org/chrisjean\">Chris Jean</a>, <a href=\"https://profiles.wordpress.org/cmmarslender\">Chris Marslender</a>, <a href=\"https://profiles.wordpress.org/chris_d2d\">Chris Smith</a>, <a href=\"https://profiles.wordpress.org/chrisvanpatten\">Chris Van Patten</a>, <a href=\"https://profiles.wordpress.org/chriswiegman\">Chris Wiegman</a>, <a href=\"https://profiles.wordpress.org/chriscct7\">chriscct7</a>, <a href=\"https://profiles.wordpress.org/chriseverson\">chriseverson</a>, <a href=\"https://profiles.wordpress.org/christian1012\">Christian Chung</a>, <a href=\"https://profiles.wordpress.org/presskopp\">Christian Herrmann</a>, <a href=\"https://profiles.wordpress.org/cwpnolen\">Christian Nolen</a>, <a href=\"https://profiles.wordpress.org/needle\">Christian Wach</a>, <a href=\"https://profiles.wordpress.org/christophherr\">Christoph Herr</a>, <a href=\"https://profiles.wordpress.org/clarionwpdeveloper\">Clarion Technologies</a>, <a href=\"https://profiles.wordpress.org/claudiosanches\">Claudio Sanches</a>, <a href=\"https://profiles.wordpress.org/claudiosmweb\">Claudio Sanches</a>, <a href=\"https://profiles.wordpress.org/claudiolabarbera\">ClaudioLaBarbera</a>, <a href=\"https://profiles.wordpress.org/codemovementpk\">codemovement.pk</a>, <a href=\"https://profiles.wordpress.org/coderkevin\">coderkevin</a>, <a href=\"https://profiles.wordpress.org/codfish\">codfish</a>, <a href=\"https://profiles.wordpress.org/coreymcollins\">coreymcollins</a>, <a href=\"https://profiles.wordpress.org/curdin\">Curdin Krummenacher</a>, <a href=\"https://profiles.wordpress.org/cgrymala\">Curtiss Grymala</a>, <a href=\"https://profiles.wordpress.org/cdog\">Cătălin Dogaru</a>, <a href=\"https://profiles.wordpress.org/danhgilmore\">danhgilmore</a>, <a href=\"https://profiles.wordpress.org/danielkanchev\">Daniel Kanchev</a>, <a href=\"https://profiles.wordpress.org/danielpietrasik\">Daniel Pietrasik</a>, <a href=\"https://profiles.wordpress.org/mte90\">Daniele Scasciafratte</a>, <a href=\"https://profiles.wordpress.org/dllh\">Daryl L. L. Houston (dllh)</a>, <a href=\"https://profiles.wordpress.org/davepullig\">Dave Pullig</a>, <a href=\"https://profiles.wordpress.org/goto10\">Dave Romsey (goto10)</a>, <a href=\"https://profiles.wordpress.org/davidakennedy\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/turtlepod\">David Chandra Purnama</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/dglingren\">David Lingren</a>, <a href=\"https://profiles.wordpress.org/davidmosterd\">David Mosterd</a>, <a href=\"https://profiles.wordpress.org/dshanske\">David Shanske</a>, <a href=\"https://profiles.wordpress.org/davidbhayes\">davidbhayes</a>, <a href=\"https://profiles.wordpress.org/folletto\">Davide \'Folletto\' Casali</a>, <a href=\"https://profiles.wordpress.org/deeptiboddapati\">deeptiboddapati</a>, <a href=\"https://profiles.wordpress.org/delphinus\">delphinus</a>, <a href=\"https://profiles.wordpress.org/deltafactory\">deltafactory</a>, <a href=\"https://profiles.wordpress.org/denis-de-bernardy\">Denis de Bernardy</a>, <a href=\"https://profiles.wordpress.org/valendesigns\">Derek Herman</a>, <a href=\"https://profiles.wordpress.org/pcfreak30\">Derrick Hammer</a>, <a href=\"https://profiles.wordpress.org/derrickkoo\">Derrick Koo</a>, <a href=\"https://profiles.wordpress.org/dimchik\">dimchik</a>, <a href=\"https://profiles.wordpress.org/dineshc\">Dinesh Chouhan</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/dipeshkakadiya\">dipeshkakadiya</a>, <a href=\"https://profiles.wordpress.org/dmsnell\">dmsnell</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/dotancohen\">Dotan Cohen</a>, <a href=\"https://profiles.wordpress.org/dougwollison\">Doug Wollison</a>, <a href=\"https://profiles.wordpress.org/doughamlin\">doughamlin</a>, <a href=\"https://profiles.wordpress.org/dreamon11\">DreamOn11</a>, <a href=\"https://profiles.wordpress.org/drewapicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/duncanjbrown\">duncanjbrown</a>, <a href=\"https://profiles.wordpress.org/dungengronovius\">dungengronovius</a>, <a href=\"https://profiles.wordpress.org/dylanauty\">DylanAuty</a>, <a href=\"https://profiles.wordpress.org/hurtige\">Eddie Hurtig</a>, <a href=\"https://profiles.wordpress.org/oso96_2000\">Eduardo Reveles</a>, <a href=\"https://profiles.wordpress.org/chopinbach\">Edwin Cromley</a>, <a href=\"https://profiles.wordpress.org/electricfeet\">ElectricFeet</a>, <a href=\"https://profiles.wordpress.org/eliorivero\">Elio Rivero</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Ella Iseulde Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/elyobo\">elyobo</a>, <a href=\"https://profiles.wordpress.org/enodekciw\">enodekciw</a>, <a href=\"https://profiles.wordpress.org/enshrined\">enshrined</a>, <a href=\"https://profiles.wordpress.org/ericlewis\">Eric Andrew Lewis</a>, <a href=\"https://profiles.wordpress.org/pushred\">Eric Lanehart</a>, <a href=\"https://profiles.wordpress.org/eherman24\">Evan Herman</a>, <a href=\"https://profiles.wordpress.org/flixos90\">Felix Arntz</a>, <a href=\"https://profiles.wordpress.org/fencer04\">Fencer04</a>, <a href=\"https://profiles.wordpress.org/florianbrinkmann\">Florian Brinkmann</a>, <a href=\"https://profiles.wordpress.org/mista-flo\">Florian TIAR</a>, <a href=\"https://profiles.wordpress.org/foliovision\">FolioVision</a>, <a href=\"https://profiles.wordpress.org/fomenkoandrey\">fomenkoandrey</a>, <a href=\"https://profiles.wordpress.org/frank-klein\">Frank Klein</a>, <a href=\"https://profiles.wordpress.org/frankiet\">Frankie</a>, <a href=\"https://profiles.wordpress.org/fjarrett\">Frankie Jarrett</a>, <a href=\"https://profiles.wordpress.org/akeif\">Fred</a>, <a href=\"https://profiles.wordpress.org/frozzare\">Fredrik Forsmo</a>, <a href=\"https://profiles.wordpress.org/fuscata\">fuscata</a>, <a href=\"https://profiles.wordpress.org/gma992\">Gabriel Maldonado</a>, <a href=\"https://profiles.wordpress.org/voldemortensen\">Garth Mortensen</a>, <a href=\"https://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/geekysoft\">Geeky Software</a>, <a href=\"https://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"https://profiles.wordpress.org/goranseric\">Goran &#352;erić</a>, <a href=\"https://profiles.wordpress.org/grahamarmfield\">Graham Armfield</a>, <a href=\"https://profiles.wordpress.org/grantderepas\">Grant Derepas</a>, <a href=\"https://profiles.wordpress.org/tivnet\">Gregory Karpinsky (@tivnet)</a>, <a href=\"https://profiles.wordpress.org/hardeepasrani\">Hardeep Asrani</a>, <a href=\"https://profiles.wordpress.org/helen\">Helen Hou-Sandí</a>, <a href=\"https://profiles.wordpress.org/henrywright\">Henry Wright</a>, <a href=\"https://profiles.wordpress.org/hiddenpearls\">hiddenpearls</a>, <a href=\"https://profiles.wordpress.org/hnle\">Hinaloe</a>, <a href=\"https://profiles.wordpress.org/hristo-sg\">Hristo Pandjarov</a>, <a href=\"https://profiles.wordpress.org/hugobaeta\">Hugo Baeta</a>, <a href=\"https://profiles.wordpress.org/polevaultweb\">Iain Poulson</a>, <a href=\"https://profiles.wordpress.org/iandunn\">Ian Dunn</a>, <a href=\"https://profiles.wordpress.org/ianedington\">Ian Edington</a>, <a href=\"https://profiles.wordpress.org/idealien\">idealien</a>, <a href=\"https://profiles.wordpress.org/igmoweb\">Ignacio Cruz Moreno</a>, <a href=\"https://profiles.wordpress.org/imath\">imath</a>, <a href=\"https://profiles.wordpress.org/implenton\">implenton</a>, <a href=\"https://profiles.wordpress.org/ionutst\">Ionut Stanciu</a>, <a href=\"https://profiles.wordpress.org/ipstenu\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/ivdimova\">ivdimova</a>, <a href=\"https://profiles.wordpress.org/jdgrimes\">J.D. Grimes</a>, <a href=\"https://profiles.wordpress.org/jakept\">Jacob Peattie</a>, <a href=\"https://profiles.wordpress.org/whyisjake\">Jake Spurlock</a>, <a href=\"https://profiles.wordpress.org/jnylen0\">James Nylen</a>, <a href=\"https://profiles.wordpress.org/jamesacero\">jamesacero</a>, <a href=\"https://profiles.wordpress.org/japh\">Japh</a>, <a href=\"https://profiles.wordpress.org/jaredcobb\">Jared Cobb</a>, <a href=\"https://profiles.wordpress.org/jayarjo\">jayarjo</a>, <a href=\"https://profiles.wordpress.org/jdolan\">jdolan</a>, <a href=\"https://profiles.wordpress.org/jdoubleu\">jdoubleu</a>, <a href=\"https://profiles.wordpress.org/jblz\">Jeff Bowen</a>, <a href=\"https://profiles.wordpress.org/cheffheid\">Jeffrey de Wit</a>, <a href=\"https://profiles.wordpress.org/jbpaul17\">Jeffrey Paul</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jpry\">Jeremy Pry</a>, <a href=\"https://profiles.wordpress.org/jimt\">jimt</a>, <a href=\"https://profiles.wordpress.org/jipmoors\">Jip Moors</a>, <a href=\"https://profiles.wordpress.org/jmusal\">jmusal</a>, <a href=\"https://profiles.wordpress.org/joedolson\">Joe Dolson</a>, <a href=\"https://profiles.wordpress.org/joehoyle\">Joe Hoyle</a>, <a href=\"https://profiles.wordpress.org/joemcgill\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/joelcj91\">Joel James</a>, <a href=\"https://profiles.wordpress.org/joen\">Joen Asmussen</a>, <a href=\"https://profiles.wordpress.org/johanmynhardt\">johanmynhardt</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/zyphonic\">John Dittmar</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/johnpbloch\">John P. Bloch</a>, <a href=\"https://profiles.wordpress.org/johnpgreen\">johnpgreen</a>, <a href=\"https://profiles.wordpress.org/kenshino\">Jon (Kenshino)</a>, <a href=\"https://profiles.wordpress.org/jonathanbardo\">Jonathan Bardo</a>, <a href=\"https://profiles.wordpress.org/jbrinley\">Jonathan Brinley</a>, <a href=\"https://profiles.wordpress.org/daggerhart\">Jonathan Daggerhart</a>, <a href=\"https://profiles.wordpress.org/desrosj\">Jonathan Desrosiers</a>, <a href=\"https://profiles.wordpress.org/spacedmonkey\">Jonny Harris</a>, <a href=\"https://profiles.wordpress.org/jonnyauk\">jonnyauk</a>, <a href=\"https://profiles.wordpress.org/jordesign\">jordesign</a>, <a href=\"https://profiles.wordpress.org/jorritschippers\">JorritSchippers</a>, <a href=\"https://profiles.wordpress.org/joefusco\">Joseph Fusco</a>, <a href=\"https://profiles.wordpress.org/jjeaton\">Josh Eaton</a>, <a href=\"https://profiles.wordpress.org/shelob9\">Josh Pollock</a>, <a href=\"https://profiles.wordpress.org/joshcummingsdesign\">joshcummingsdesign</a>, <a href=\"https://profiles.wordpress.org/joshkadis\">joshkadis</a>, <a href=\"https://profiles.wordpress.org/joshuawold\">Joshua Wold</a>, <a href=\"https://profiles.wordpress.org/joyously\">Joy</a>, <a href=\"https://profiles.wordpress.org/jrf\">jrf</a>, <a href=\"https://profiles.wordpress.org/jrgould\">JRGould</a>, <a href=\"https://profiles.wordpress.org/juanfra\">Juanfra Aldasoro</a>, <a href=\"https://profiles.wordpress.org/juhise\">Juhi Saxena</a>, <a href=\"https://profiles.wordpress.org/nukaga\">Junko Nukaga</a>, <a href=\"https://profiles.wordpress.org/justinbusa\">Justin Busa</a>, <a href=\"https://profiles.wordpress.org/justinsainton\">Justin Sainton</a>, <a href=\"https://profiles.wordpress.org/jshreve\">Justin Shreve</a>, <a href=\"https://profiles.wordpress.org/jtsternberg\">Justin Sternberg</a>, <a href=\"https://profiles.wordpress.org/kadamwhite\">K.Adam White</a>, <a href=\"https://profiles.wordpress.org/kacperszurek\">kacperszurek</a>, <a href=\"https://profiles.wordpress.org/trepmal\">Kailey (trepmal)</a>, <a href=\"https://profiles.wordpress.org/kalenjohnson\">KalenJohnson</a>, <a href=\"https://profiles.wordpress.org/codebykat\">Kat Hagan</a>, <a href=\"https://profiles.wordpress.org/zoonini\">Kathryn Presner</a>, <a href=\"https://profiles.wordpress.org/kkoppenhaver\">Keanan Koppenhaver</a>, <a href=\"https://profiles.wordpress.org/keesiemeijer\">keesiemeijer</a>, <a href=\"https://profiles.wordpress.org/kellbot\">kellbot</a>, <a href=\"https://profiles.wordpress.org/ryelle\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/wraithkenny\">Ken Newman</a>, <a href=\"https://profiles.wordpress.org/khag7\">Kevin Hagerty</a>, <a href=\"https://profiles.wordpress.org/kwight\">Kirk Wight</a>, <a href=\"https://profiles.wordpress.org/kitchin\">kitchin</a>, <a href=\"https://profiles.wordpress.org/ixkaito\">Kite</a>, <a href=\"https://profiles.wordpress.org/kjbenk\">kjbenk</a>, <a href=\"https://profiles.wordpress.org/knutsp\">Knut Sparhell</a>, <a href=\"https://profiles.wordpress.org/koenschipper\">koenschipper</a>, <a href=\"https://profiles.wordpress.org/kokarn\">kokarn</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/kouratoras\">Konstantinos Kouratoras</a>, <a href=\"https://profiles.wordpress.org/kristastevens\">Krista Stevens</a>, <a href=\"https://profiles.wordpress.org/kuchenundkakao\">kuchenundkakao</a>, <a href=\"https://profiles.wordpress.org/kuldipem\">kuldipem</a>, <a href=\"https://profiles.wordpress.org/leewillis77\">Lee Willis</a>, <a href=\"https://profiles.wordpress.org/leobaiano\">Leo Baiano</a>, <a href=\"https://profiles.wordpress.org/littlebigthing\">LittleBigThings (Csaba)</a>, <a href=\"https://profiles.wordpress.org/lucasstark\">Lucas Stark</a>, <a href=\"https://profiles.wordpress.org/lukecavanagh\">Luke Cavanagh</a>, <a href=\"https://profiles.wordpress.org/lgedeon\">Luke Gedeon</a>, <a href=\"https://profiles.wordpress.org/lukepettway\">Luke Pettway</a>, <a href=\"https://profiles.wordpress.org/lyubomir_popov\">lyubomir_popov</a>, <a href=\"https://profiles.wordpress.org/mariovalney\">M&#225;rio Valney</a>, <a href=\"https://profiles.wordpress.org/mageshp\">mageshp</a>, <a href=\"https://profiles.wordpress.org/mahesh901122\">Mahesh Waghmare</a>, <a href=\"https://profiles.wordpress.org/mangeshp\">Mangesh Parte</a>, <a href=\"https://profiles.wordpress.org/manishsongirkar36\">Manish Songirkar</a>, <a href=\"https://profiles.wordpress.org/mantismamita\">mantismamita</a>, <a href=\"https://profiles.wordpress.org/mbootsman\">Marcel Bootsman</a>, <a href=\"https://profiles.wordpress.org/tyxla\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius L. J.</a>, <a href=\"https://profiles.wordpress.org/mbelchev\">Mariyan Belchev</a>, <a href=\"https://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"https://profiles.wordpress.org/mrwweb\">Mark Root-Wiley</a>, <a href=\"https://profiles.wordpress.org/mapk\">Mark Uraine</a>, <a href=\"https://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/markshep\">markshep</a>, <a href=\"https://profiles.wordpress.org/matveb\">Matias Ventura</a>, <a href=\"https://profiles.wordpress.org/matrixik\">matrixik</a>, <a href=\"https://profiles.wordpress.org/mjbanks\">Matt Banks</a>, <a href=\"https://profiles.wordpress.org/mattking5000\">Matt King</a>, <a href=\"https://profiles.wordpress.org/matt\">Matt Mullenweg</a>, <a href=\"https://profiles.wordpress.org/jaworskimatt\">Matt PeepSo</a>, <a href=\"https://profiles.wordpress.org/veraxus\">Matt van Andel</a>, <a href=\"https://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"https://profiles.wordpress.org/mattheu\">Matthew Haines-Young</a>, <a href=\"https://profiles.wordpress.org/mattyrob\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/maxcutler\">Max Cutler</a>, <a href=\"https://profiles.wordpress.org/maximeculea\">Maxime Culea</a>, <a href=\"https://profiles.wordpress.org/mayukojpn\">Mayo Moriyama</a>, <a href=\"https://profiles.wordpress.org/mckernanin\">mckernanin</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/mhowell\">mhowell</a>, <a href=\"https://profiles.wordpress.org/michael-arestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/michaelarestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/michalzuber\">michalzuber</a>, <a href=\"https://profiles.wordpress.org/michelleweber\">Michelle Weber</a>, <a href=\"https://profiles.wordpress.org/stubgo\">Miina Sikk</a>, <a href=\"https://profiles.wordpress.org/mauteri\">Mike Auteri</a>, <a href=\"https://profiles.wordpress.org/mihai2u\">Mike Crantea</a>, <a href=\"https://profiles.wordpress.org/mdgl\">Mike Glendinning</a>, <a href=\"https://profiles.wordpress.org/mikehansenme\">Mike Hansen</a>, <a href=\"https://profiles.wordpress.org/mikelittle\">Mike Little</a>, <a href=\"https://profiles.wordpress.org/mikeschroder\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/mikeviele\">Mike Viele</a>, <a href=\"https://profiles.wordpress.org/dimadin\">Milan Dinić</a>, <a href=\"https://profiles.wordpress.org/modemlooper\">modemlooper</a>, <a href=\"https://profiles.wordpress.org/batmoo\">Mohammad Jangda</a>, <a href=\"https://profiles.wordpress.org/deremohan\">Mohan Dere</a>, <a href=\"https://profiles.wordpress.org/monikarao\">Monika Rao</a>, <a href=\"https://profiles.wordpress.org/morettigeorgiev\">morettigeorgiev</a>, <a href=\"https://profiles.wordpress.org/morganestes\">Morgan Estes</a>, <a href=\"https://profiles.wordpress.org/mor10\">Morten Rand-Hendriksen</a>, <a href=\"https://profiles.wordpress.org/mt8biz\">moto hachi ( mt8.biz )</a>, <a href=\"https://profiles.wordpress.org/mrbobbybryant\">mrbobbybryant</a>, <a href=\"https://profiles.wordpress.org/nnaimov\">Naim Naimov</a>, <a href=\"https://profiles.wordpress.org/natereist\">Nate Reist</a>, <a href=\"https://profiles.wordpress.org/natewr\">NateWr</a>, <a href=\"https://profiles.wordpress.org/nathanrice\">nathanrice</a>, <a href=\"https://profiles.wordpress.org/nazgul\">Nazgul</a>, <a href=\"https://profiles.wordpress.org/greatislander\">Ned Zimmerman</a>, <a href=\"https://profiles.wordpress.org/krstarica\">net</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nikeo\">Nicolas GUILLAUME</a>, <a href=\"https://profiles.wordpress.org/nikschavan\">Nikhil Chavan</a>, <a href=\"https://profiles.wordpress.org/nikv\">Nikhil Vimal</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/rabmalin\">Nilambar Sharma</a>, <a href=\"https://profiles.wordpress.org/noplanman\">noplanman</a>, <a href=\"https://profiles.wordpress.org/nullvariable\">nullvariable</a>, <a href=\"https://profiles.wordpress.org/odie2\">odie2</a>, <a href=\"https://profiles.wordpress.org/odysseygate\">odyssey</a>, <a href=\"https://profiles.wordpress.org/hideokamoto\">Okamoto Hidetaka</a>, <a href=\"https://profiles.wordpress.org/orvils\">orvils</a>, <a href=\"https://profiles.wordpress.org/oskosk\">oskosk</a>, <a href=\"https://profiles.wordpress.org/ottok\">Otto Kek&#228;l&#228;inen</a>, <a href=\"https://profiles.wordpress.org/ovann86\">ovann86</a>, <a href=\"https://profiles.wordpress.org/imnok\">Pantip Treerattanapitak (Nok)</a>, <a href=\"https://profiles.wordpress.org/swissspidy\">Pascal Birchler</a>, <a href=\"https://profiles.wordpress.org/patilvikasj\">patilvikasj</a>, <a href=\"https://profiles.wordpress.org/pbearne\">Paul Bearne</a>, <a href=\"https://profiles.wordpress.org/paulwilde\">Paul Wilde</a>, <a href=\"https://profiles.wordpress.org/pdufour\">pdufour</a>, <a href=\"https://profiles.wordpress.org/piewp\">Perdaan</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/phh\">phh</a>, <a href=\"https://profiles.wordpress.org/php\">php</a>, <a href=\"https://profiles.wordpress.org/delawski\">Piotr Delawski</a>, <a href=\"https://profiles.wordpress.org/pippinsplugins\">pippinsplugins</a>, <a href=\"https://profiles.wordpress.org/pjgalbraith\">pjgalbraith</a>, <a href=\"https://profiles.wordpress.org/pkevan\">pkevan</a>, <a href=\"https://profiles.wordpress.org/pratikchaskar\">Pratik</a>, <a href=\"https://profiles.wordpress.org/pressionate\">Pressionate</a>, <a href=\"https://profiles.wordpress.org/procodewp\">procodewp</a>, <a href=\"https://profiles.wordpress.org/rachelbaker\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/rahulsprajapati\">Rahul Prajapati</a>, <a href=\"https://profiles.wordpress.org/superpoincare\">Ramanan</a>, <a href=\"https://profiles.wordpress.org/ramiabraham\">ramiabraham</a>, <a href=\"https://profiles.wordpress.org/ranh\">ranh</a>, <a href=\"https://profiles.wordpress.org/redsand\">Red Sand Media Group</a>, <a href=\"https://profiles.wordpress.org/youknowriad\">Riad Benguella</a>, <a href=\"https://profiles.wordpress.org/rianrietveld\">Rian Rietveld</a>, <a href=\"https://profiles.wordpress.org/iamfriendly\">Richard Tape</a>, <a href=\"https://profiles.wordpress.org/rpayne7264\">Robert D Payne</a>, <a href=\"https://profiles.wordpress.org/iamjolly\">Robert Jolly</a>, <a href=\"https://profiles.wordpress.org/rnoakes3rd\">Robert Noakes</a>, <a href=\"https://profiles.wordpress.org/d4z_c0nf\">Rocco Aliberti</a>, <a href=\"https://profiles.wordpress.org/rodrigosprimo\">Rodrigo Primo</a>, <a href=\"https://profiles.wordpress.org/rommelxcastro\">Rommel Castro</a>, <a href=\"https://profiles.wordpress.org/fronaldaraujo\">Ronald Ara&#250;jo</a>, <a href=\"https://profiles.wordpress.org/magicroundabout\">Ross Wintle</a>, <a href=\"https://profiles.wordpress.org/guavaworks\">Roy Sivan</a>, <a href=\"https://profiles.wordpress.org/ryankienstra\">Ryan Kienstra</a>, <a href=\"https://profiles.wordpress.org/rmccue\">Ryan McCue</a>, <a href=\"https://profiles.wordpress.org/ryanplas\">Ryan Plas</a>, <a href=\"https://profiles.wordpress.org/welcher\">Ryan Welcher</a>, <a href=\"https://profiles.wordpress.org/salcode\">Sal Ferrarello</a>, <a href=\"https://profiles.wordpress.org/samikeijonen\">Sami Keijonen</a>, <a href=\"https://profiles.wordpress.org/solarissmoke\">Samir Shah</a>, <a href=\"https://profiles.wordpress.org/samuelsidler\">Samuel Sidler</a>, <a href=\"https://profiles.wordpress.org/sandesh055\">Sandesh</a>, <a href=\"https://profiles.wordpress.org/smyoon315\">Sang-Min Yoon</a>, <a href=\"https://profiles.wordpress.org/sanketparmar\">Sanket Parmar</a>, <a href=\"https://profiles.wordpress.org/pollyplummer\">Sarah Gooding</a>, <a href=\"https://profiles.wordpress.org/sayedwp\">Sayed Taqui</a>, <a href=\"https://profiles.wordpress.org/schrapel\">schrapel</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/scrappyhuborg\">scrappy@hub.org</a>, <a href=\"https://profiles.wordpress.org/scribu\">scribu</a>, <a href=\"https://profiles.wordpress.org/seancjones\">seancjones</a>, <a href=\"https://profiles.wordpress.org/sebastianpisula\">Sebastian Pisula</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/sgr33n\">Sergio De Falco</a>, <a href=\"https://profiles.wordpress.org/sfpt\">sfpt</a>, <a href=\"https://profiles.wordpress.org/shayanys\">shayanys</a>, <a href=\"https://profiles.wordpress.org/shazahm1hotmailcom\">shazahm1</a>, <a href=\"https://profiles.wordpress.org/shprink\">shprink</a>, <a href=\"https://profiles.wordpress.org/simonlampen\">simonlampen</a>, <a href=\"https://profiles.wordpress.org/skippy\">skippy</a>, <a href=\"https://profiles.wordpress.org/smerriman\">smerriman</a>, <a href=\"https://profiles.wordpress.org/snacking\">snacking</a>, <a href=\"https://profiles.wordpress.org/solal\">solal</a>, <a href=\"https://profiles.wordpress.org/soean\">Soren Wrede</a>, <a href=\"https://profiles.wordpress.org/sstoqnov\">Stanimir Stoyanov</a>, <a href=\"https://profiles.wordpress.org/metodiew\">Stanko Metodiev</a>, <a href=\"https://profiles.wordpress.org/sharkomatic\">Steph</a>, <a href=\"https://profiles.wordpress.org/sswells\">Steph Wells</a>, <a href=\"https://profiles.wordpress.org/sillybean\">Stephanie Leary</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/stephenharris\">Stephen Harris</a>, <a href=\"https://profiles.wordpress.org/stevenkword\">Steven Word</a>, <a href=\"https://profiles.wordpress.org/stevenlinx\">stevenlinx</a>, <a href=\"https://profiles.wordpress.org/sudar\">Sudar Muthu</a>, <a href=\"https://profiles.wordpress.org/patilswapnilv\">Swapnil V. Patil</a>, <a href=\"https://profiles.wordpress.org/swapnild\">swapnild</a>, <a href=\"https://profiles.wordpress.org/szaqal21\">szaqal21</a>, <a href=\"https://profiles.wordpress.org/takahashi_fumiki\">Takahashi Fumiki</a>, <a href=\"https://profiles.wordpress.org/miyauchi\">Takayuki Miyauchi</a>, <a href=\"https://profiles.wordpress.org/karmatosed\">Tammie Lister</a>, <a href=\"https://profiles.wordpress.org/tapsboy\">tapsboy</a>, <a href=\"https://profiles.wordpress.org/tlovett1\">Taylor Lovett</a>, <a href=\"https://profiles.wordpress.org/team\">team</a>, <a href=\"https://profiles.wordpress.org/tg29359\">tg29359</a>, <a href=\"https://profiles.wordpress.org/tharsheblows\">tharsheblows</a>, <a href=\"https://profiles.wordpress.org/the\">the</a>, <a href=\"https://profiles.wordpress.org/themeshaper\">themeshaper</a>, <a href=\"https://profiles.wordpress.org/thenbrent\">thenbrent</a>, <a href=\"https://profiles.wordpress.org/thomaswm\">thomaswm</a>, <a href=\"https://profiles.wordpress.org/tfrommen\">Thorsten Frommen</a>, <a href=\"https://profiles.wordpress.org/tierra\">tierra</a>, <a href=\"https://profiles.wordpress.org/tnash\">Tim Nash</a>, <a href=\"https://profiles.wordpress.org/timmydcrawford\">Timmy Crawford</a>, <a href=\"https://profiles.wordpress.org/timothyblynjacobs\">Timothy Jacobs</a>, <a href=\"https://profiles.wordpress.org/timph\">timph</a>, <a href=\"https://profiles.wordpress.org/tkama\">Tkama</a>, <a href=\"https://profiles.wordpress.org/tnegri\">tnegri</a>, <a href=\"https://profiles.wordpress.org/tomauger\">Tom Auger</a>, <a href=\"https://profiles.wordpress.org/tjnowell\">Tom J Nowell</a>, <a href=\"https://profiles.wordpress.org/tomdxw\">tomdxw</a>, <a href=\"https://profiles.wordpress.org/toro_unit\">Toro_Unit (Hiroshi Urabe)</a>, <a href=\"https://profiles.wordpress.org/zodiac1978\">Torsten Landsiedel</a>, <a href=\"https://profiles.wordpress.org/transl8or\">transl8or</a>, <a href=\"https://profiles.wordpress.org/traversal\">traversal</a>, <a href=\"https://profiles.wordpress.org/wpsmith\">Travis Smith</a>, <a href=\"https://profiles.wordpress.org/nmt90\">Triet Minh</a>, <a href=\"https://profiles.wordpress.org/trishasalas\">Trisha Salas</a>, <a href=\"https://profiles.wordpress.org/tristangemus\">tristangemus</a>, <a href=\"https://profiles.wordpress.org/truongwp\">truongwp</a>, <a href=\"https://profiles.wordpress.org/tsl143\">tsl143</a>, <a href=\"https://profiles.wordpress.org/tywayne\">Ty Carlson</a>, <a href=\"https://profiles.wordpress.org/grapplerulrich\">Ulrich</a>, <a href=\"https://profiles.wordpress.org/utkarshpatel\">Utkarsh</a>, <a href=\"https://profiles.wordpress.org/valeriutihai\">Valeriu Tihai</a>, <a href=\"https://profiles.wordpress.org/zuige\">Viljami Kuosmanen</a>, <a href=\"https://profiles.wordpress.org/vishalkakadiya\">Vishal Kakadiya</a>, <a href=\"https://profiles.wordpress.org/vortfu\">vortfu</a>, <a href=\"https://profiles.wordpress.org/vrundakansara-1\">Vrunda Kansara</a>, <a href=\"https://profiles.wordpress.org/webbgaraget\">webbgaraget</a>, <a href=\"https://profiles.wordpress.org/webmandesign\">WebMan Design &#124; Oliver Juhas</a>, <a href=\"https://profiles.wordpress.org/websupporter\">websupporter</a>, <a href=\"https://profiles.wordpress.org/earnjam\">William Earnhardt</a>, <a href=\"https://profiles.wordpress.org/williampatton\">williampatton</a>, <a href=\"https://profiles.wordpress.org/wolly\">Wolly aka Paolo Valenti</a>, <a href=\"https://profiles.wordpress.org/yale01\">yale01</a>, <a href=\"https://profiles.wordpress.org/yoavf\">Yoav Farhi</a>, <a href=\"https://profiles.wordpress.org/yogasukma\">Yoga Sukma</a>, <a href=\"https://profiles.wordpress.org/oxymoron\">Zach Wills</a>, <a href=\"https://profiles.wordpress.org/tollmanz\">Zack Tollman</a>, <a href=\"https://profiles.wordpress.org/vanillalounge\">Ze Fontainhas</a>, <a href=\"https://profiles.wordpress.org/zhildzik\">zhildzik</a>, and <a href=\"https://profiles.wordpress.org/zsusag\">zsusag</a>.\r\n\r\n\r\n\r\n<p>Finally, thanks to all the community translators who worked on WordPress 4.9. Their efforts bring WordPress 4.9 fully translated to 43 languages at release time, with more on the way.</p>\r\n\r\n\r\n\r\n<p>Do you want to report on WordPress 4.9? <a href=\"https://s.w.org/images/core/4.9/wp-4-9_press-kit.zip\">We&#x27;ve compiled a press kit featuring information about the release features, and some media assets to help you along</a>.</p>\r\n\r\n\r\n\r\n<p>If you want to follow along or help out, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/core/\">core development blog</a>.</p>\r\n\r\n\r\n\r\n<p>Thanks for choosing WordPress!</p>\r\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"4968\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 4.9 Release Candidate 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2017/11/wordpress-4-9-release-candidate-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 14 Nov 2017 06:53:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:13:\"Documentation\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5184\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:345:\"The third release candidate for WordPress 4.9 is now available. A release candidate (RC) means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. In fact, we did miss some things in RC1 and RC2. This third release candidate was not originally scheduled, but [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Weston Ruter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4169:\"<p>The third release candidate for WordPress 4.9 is now available.</p>\n<p>A release candidate (RC) means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. In fact, we did miss some things in RC1 and RC2. This third release candidate was not originally scheduled, but due a number of defects uncovered through your testing of RC2 (thank you!), we are putting out another 4.9 release candidate.</p>\n<p>We hope to ship WordPress 4.9 on <strong>Tuesday, November 14</strong> (that&#8217;s <em>tomorrow</em>) at 23:00 UTC, but we still need your help to get there. If you haven’t tested 4.9 yet, now is the time! If there are additional defects uncovered through testing between now and the release time, we may delay the 4.9 release to the following day.</p>\n<p>To test WordPress 4.9, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.9-RC3.zip\">download the release candidate here</a> (zip).</p>\n<p>We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log/branches/4.9?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=42178&amp;stop_rev=42133\">just over 20 changes</a> since releasing RC2 last week (as we did between RC1 and RC2). For more details about what’s new in version 4.9, check out the <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-2/\">Beta 2</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-3/\">Beta 3</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-4/\">Beta 4</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-release-candidate/\">RC1</a>, and <a href=\"https://wordpress.org/news/2017/11/wordpress-4-9-release-candidate-2/\">RC2</a> blog posts. A few specific areas to test in RC3:</p>\n<ul>\n<li>Switching between the Visual and Text tabs of the editor, and the syncing of the cursor between those two tabs.</li>\n<li>Overriding linting errors in the Customizer&#8217;s Additional CSS editor.</li>\n<li>Adding nav menu items for Custom Links in the Customizer.</li>\n<li>Scheduling customization drafts (stubbed posts/pages) for publishing in the Customizer.</li>\n<li>Autosave revisions for changes in the Customizer.</li>\n<li>About page styling.</li>\n</ul>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.9 and update your plugin’s <em>Tested up to</em> version in the readme to 4.9. If you find compatibility problems please be sure to post to the support forums so we can figure those out before the final release — we work hard to avoid breaking things. Please see the summative <a href=\"https://make.wordpress.org/core/2017/11/07/wordpress-4-9-field-guide/\">field guide</a> to the 4.9 <a href=\"https://make.wordpress.org/core/tag/4.9+dev-notes/\">developer notes</a> on the <a href=\"https://make.wordpress.org/core/\">core development blog</a>.</p>\n<p>Do you speak a language other than English? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help us translate WordPress into more than 100 languages!</a></p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on WordPress Trac</a>, where you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a>.</p>\n<p><em>Didn&#8217;t squash them all <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f41b.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></em><br />\n<em>We want to release Tuesday</em><br />\n<em>New features not bugs <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/2728.png\" alt=\"✨\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></em></p>\n<p>Thanks for your continued help testing out the latest versions of WordPress.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5184\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 4.9 Release Candidate 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2017/11/wordpress-4-9-release-candidate-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 07 Nov 2017 05:33:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5047\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:342:\"The second release candidate for WordPress 4.9 is now available. A release candidate (RC) means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.9 on Tuesday, November 14 (just over one week from now), but we need your help [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Weston Ruter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3424:\"<p>The second release candidate for WordPress 4.9 is now available.</p>\n<p>A release candidate (RC) means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.9 on <strong>Tuesday, November 14</strong> (just over <em>one week</em> from now), but we need your help to get there. If you haven’t tested 4.9 yet, now is the time!</p>\n<p>To test WordPress 4.9, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.9-RC2.zip\">download the release candidate here</a> (zip).</p>\n<p>We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log/trunk/?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=42124&amp;stop_rev=42049&amp;limit=100&amp;sfp_email=&amp;sfph_mail=\">just over 20 changes</a> since releasing RC 1 last week. For more details about what’s new in version 4.9, check out the <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-2/\">Beta 2</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-3/\">Beta 3</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-4/\">Beta 4</a>, and <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-release-candidate/\">RC1</a> blog posts. Specific areas to test in RC2:</p>\n<ul>\n<li>Theme installation in the Customizer.</li>\n<li>Scheduling changes for publishing in the Customizer.</li>\n<li>Switching themes with live preview in the Customizer.</li>\n</ul>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.9 and update your plugin’s <em>Tested up to</em> version in the readme to 4.9. If you find compatibility problems please be sure to post to the support forums so we can figure those out before the final release — we work hard to avoid breaking things. Please see the summative <a href=\"https://make.wordpress.org/core/2017/11/07/wordpress-4-9-field-guide/\">field guide</a> to the 4.9 <a href=\"https://make.wordpress.org/core/tag/4.9+dev-notes/\">developer notes</a> on the <a href=\"https://make.wordpress.org/core/\">core development blog</a>.</p>\n<p>Do you speak a language other than English? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help us translate WordPress into more than 100 languages!</a></p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on WordPress Trac</a>, where you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a>.</p>\n<p>This week&#8217;s haiku is courtesy of <a href=\'https://profiles.wordpress.org/melchoyce/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>melchoyce</a>:</p>\n<p><em>We squashed all the bugs <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f41b.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></em><br />\n<em>But uh, if not, let us know</em><br />\n<em>Also, test your stuff</em></p>\n<p>Thanks for your continued help testing out the latest versions of WordPress.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5047\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:33:\"\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"The Month in WordPress: October 2017\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2017/11/the-month-in-wordpress-october-2017/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Nov 2017 12:02:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Month in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5044\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:333:\"While this month we focused on building new features for WordPress core, we advanced other areas of the project too. Read on to learn more about what the WordPress project accomplished during the month of October. Take the 2017 Annual WordPress User Survey The annual WordPress User Survey is a great opportunity for you to [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Hugh Lashbrooke\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6180:\"\n<p>While this month we focused on building new features for WordPress core, we advanced other areas of the project too. Read on to learn more about what the WordPress project accomplished during the month of October.</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<h2>Take the 2017 Annual WordPress User Survey</h2>\n\n\n\n<p>The annual WordPress User Survey is a great opportunity for you to provide your feedback about how you use WordPress. This year is no exception, as <a href=\"https://wordpressdotorg.polldaddy.com/s/wordpress-2017-survey\">the 2017 WordPress User Survey</a> is out now.</p>\n\n\n\n<p>The information collected in the survey is used to make informed decisions about improvements across the WordPress project, so your answers are incredibly valuable and help shape the future of the platform.</p>\n\n\n\n<h2>WordPress 4.8.3 Security Release</h2>\n\n\n\n<p>At the end of October, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/\">WordPress 4.8.3 was released</a> containing an important security fix for all previous versions of WordPress. If your WordPress installation has not updated automatically, please update it now to protect your site.</p>\n\n\n\n<p>This security issue was brought to light by a community member, so if you ever discover a security vulnerability in WordPress core, please do the same and <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">disclose it responsibly</a>.</p>\n\n\n\n<h2>WordPress 4.9 Nearly Ready for Release</h2>\n\n\n\n<p>WordPress 4.9 was in rapid development this month. We released four beta versions and published a <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-release-candidate/\">release candidate</a>. The target for shipping WordPress 4.9 is November 14 — just two short weeks away. With many new features, this is a hugely exciting release that improves WordPress’ user experience considerably. Notably, you’ll see <a href=\"https://make.wordpress.org/core/2017/10/24/a-new-themes-experience-in-the-customizer/\">improvements to the theme selection experience</a>, plenty of <a href=\"https://make.wordpress.org/core/2017/10/24/widget-improvements-in-wordpress-4-9/\">widget enhancements</a>, drastically improved <a href=\"https://make.wordpress.org/core/2017/10/22/code-editing-improvements-in-wordpress-4-9/\">code editing</a>, and much better <a href=\"https://make.wordpress.org/core/2017/10/15/improvements-for-roles-and-capabilities-in-4-9/\">user role management</a>.</p>\n\n\n\n<p>To get involved in building WordPress Core, jump into the #core channel in the <a href=\"https://make.wordpress.org/chat/\">Making WordPress Slack group</a>, and follow <a href=\"https://make.wordpress.org/core/\">the Core team blog</a>.</p>\n\n\n\n<h2>WordPress Charity Hackathons are Growing</h2>\n\n\n\n<p>For the last few years, the number of <a href=\"https://doaction.org/\">do_action series of WordPress charity hackathons</a> has grown around the world. What started as a community event to assist local nonprofit organizations, has become something many WordPress communities are replicating in an increasing number of cities.</p>\n\n\n\n<p>As of this month, do_action events have been hosted in Cape Town and Johannesburg, South Africa, Beirut, Lebanon, Austin, Texas, and Montréal, Canada. In addition, events are now scheduled for <a href=\"https://doaction.org/event/bristol-2018/\">Bristol, England</a> and <a href=\"https://doaction.org/event/zurich-2018/\">Zurich, Switzerland</a> in 2018.</p>\n\n\n\n<p>To get involved in organizing a do_action event locally, read <a href=\"https://make.wordpress.org/community/handbook/meetup-organizer/event-formats/do_action-charity-hackathon/\">the do_action organizer’s handbook</a> and join the #community-events channel in the <a href=\"https://make.wordpress.org/chat/\">Making WordPress Slack group</a>.</p>\n\n\n\n<h2>Gutenberg Development Advances</h2>\n\n\n\n<p>While work steadily continues on Gutenberg — the new editor for WordPress core — one update from this month addresses one of the primary concerns that some people shared about the project.</p>\n\n\n\n<p>Up until <a href=\"https://make.wordpress.org/core/2017/10/24/whats-new-in-gutenberg-24th-october/\">the release on October 24</a>, Gutenberg did not support the meta boxes that so many WordPress content creators rely on. The new editor now has initial support for meta boxes as well as a host of other critical features for content creation in WordPress.</p>\n\n\n\n<p><a href=\"https://make.wordpress.org/test/handbook/call-for-testing/gutenberg-testing/\">Test out Gutenberg</a> right now and help develop it by joining the #core-editor channel in the <a href=\"https://make.wordpress.org/chat/\">Making WordPress Slack group</a> and following the <a href=\"https://make.wordpress.org/core/\">Core team blog</a>.</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<h2>Further Reading:</h2>\n\n\n\n<ul>\n    <li>DonateWC, a new initiative that assists people in attending WordCamps, <a href=\"https://donatewc.org/wordcamp-stories/wordcamp-cape-town-experience/\">sponsored Trust Nhokovedzo from Harare, Zimbabwe</a> to speak at WordCamp Cape Town, South Africa this month.</li>\n    <li><a href=\"https://woocommerce.com/2017/10/saying-goodbye-to-canvas/\">The popular Canvas theme was retired</a> this month to allow WooCommerce to focus on moving their products forward more effectively.</li>\n    <li>The next installment of Camp Press, the WordPress community retreat event, will take place <a href=\"https://camp.press/event/iceland2018/\">in Iceland</a>.</li>\n    <li>If you run a WordPress meetup group, but are struggling to find content for your events, the WordPress Marketing team <a href=\"https://make.wordpress.org/community/2017/10/04/supporting-for-meetups-with-low-content/\">has put together some ideas</a> to help.</li>\n    <li><a href=\"https://2017.us.wordcamp.org/\">WordCamp US 2017</a> is just around the corner — there’s still time to grab your tickets.</li>\n</ul>\n\n\n\n<p><em>If you have a story we should consider including in the next “Month in WordPress” post, please <a href=\"https://make.wordpress.org/community/month-in-wordpress-submissions/\">submit it here</a>.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5044\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WordPress 4.8.3 Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 31 Oct 2017 14:20:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.8\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5035\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:378:\"WordPress 4.8.3 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.8.2 and earlier are affected by an issue where $wpdb-&#62;prepare() can create unexpected and unsafe queries leading to potential SQL injection (SQLi). WordPress core is not directly vulnerable to [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Gary Pendergast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1337:\"<p>WordPress 4.8.3 is now available. This is a <strong>security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.8.2 and earlier are affected by an issue where <code>$wpdb-&gt;prepare()</code> can create unexpected and unsafe queries leading to potential SQL injection (SQLi). WordPress core is not directly vulnerable to this issue, but we’ve added hardening to prevent plugins and themes from accidentally causing a vulnerability. Reported by <a href=\"https://twitter.com/ircmaxell\">Anthony Ferrara</a>.</p>\n<p>This release includes a change in behaviour for the <code>esc_sql()</code> function. Most developers will not be affected by this change, you can read more details in the <a href=\"https://make.wordpress.org/core/2017/10/31/changed-behaviour-of-esc_sql-in-wordpress-4-8-3/\">developer note</a>.</p>\n<p>Thank you to the reporter of this issue for practicing <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible disclosure</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.8.3</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.8.3.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5035\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress 4.9 Release Candidate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/news/2017/10/wordpress-4-9-release-candidate/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 31 Oct 2017 04:42:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4963\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:329:\"The release candidate for WordPress 4.9 is now available. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.9 on Tuesday, November 14, but we need your help to get there. If you haven’t tested 4.9 yet, [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Mel Choyce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3275:\"<p>The release candidate for WordPress 4.9 is now available.</p>\n<p>RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.9 on <strong>Tuesday, November 14</strong>, but we need your help to get there. If you haven’t tested 4.9 yet, now is the time!</p>\n<p>To test WordPress 4.9, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.9-RC1.zip\">download the release candidate here</a> (zip).</p>\n<p>We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log/trunk/?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=42049&amp;stop_rev=42022&amp;limit=100&amp;sfp_email=&amp;sfph_mail=\">almost 30 changes</a> since releasing Beta 4 last week. For more details about what’s new in version 4.9, check out the <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-2/\">Beta 2</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-3/\">Beta 3</a>, and <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-4/\">Beta 4</a> blog posts.</p>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.9 and update your plugin’s <em>Tested up to</em> version in the readme to 4.9. If you find compatibility problems please be sure to post to the support forums so we can figure those out before the final release — we work hard to avoid breaking things. An in-depth field guide to developer-focused changes is coming soon on the <a href=\"https://make.wordpress.org/core/\">core development blog</a>. In the meantime, you can review the <a href=\"https://make.wordpress.org/core/tag/4.9+dev-notes/\">developer notes for 4.9</a>.</p>\n<p>Do you speak a language other than English? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help us translate WordPress into more than 100 languages!</a></p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on WordPress Trac</a>, where you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a>.</p>\n<p>This week&#8217;s haiku is courtesy of <a href=\'https://profiles.wordpress.org/pento/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>pento</a>:</p>\n<p><em>this is halloween <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f383.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></em><br />\n<em>scary, spooky, candy day <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f47b.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></em><br />\n<em>rc1 is sweet <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f36c.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></em></p>\n<p>Thanks for your continued help testing out the latest versions of WordPress.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"4963\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"2017 WordPress Survey and WordCamp US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"https://wordpress.org/news/2017/10/2017-wordpress-survey-and-wordcamp-us/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Oct 2017 20:59:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:9:\"Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:6:\"Events\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5004\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:332:\"It’s time for the annual WordPress user and developer survey! If you’re a WordPress user, developer, or business owner, then we want your feedback. Just like previous years, we’ll share the data at the upcoming WordCamp US (WCUS). It only takes a few minutes to fill out the survey, which will provide an overview of [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Josepha\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1083:\"\n<p>It’s time for the annual WordPress user and developer survey! If you’re a WordPress user, developer, or business owner, then we want your feedback. Just like previous years, we’ll share the data at the upcoming WordCamp US (WCUS).</p>\n\n\n\n<p>It only takes a few minutes to <a href=\"https://wordpressdotorg.polldaddy.com/s/wordpress-2017-survey\">fill out the survey</a>, which will provide an overview of how people use WordPress.</p>\n\n\n\n<figure class=\"wp-block-image alignright\" style=\"width:357px\"><a href=\"https://2017.us.wordcamp.org/tickets/\"><img src=\"https://i0.wp.com/wordpress.org/news/files/2017/10/header.jpg?resize=357%2C148&#038;ssl=1\" data-recalc-dims=\"1\" /></a>\n    <figcaption>WordCamp US in Nashville</figcaption>\n</figure>\n\n\n\n<p>The <a href=\"https://wordpress.tv/tag/state-of-the-word/\">State of the Word</a> includes stats and an overview of what&#x27;s new in WordPress and is given every year at WCUS. Don&#x27;t forget that tickets are available <a href=\"https://2017.us.wordcamp.org\">now</a> so you can join the excitement in Nashville this year!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"5004\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.9 Beta 4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 25 Oct 2017 07:04:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4962\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:364:\"WordPress 4.9 Beta 4 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.9, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download the beta here (zip). [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Mel Choyce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2446:\"<p>WordPress 4.9 Beta 4 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.9, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.9-beta4.zip\">download the beta here</a> (zip).</p>\n<p>For more information on what’s new in 4.9, check out the <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-1/\">Beta 1</a> blog post. Since the Beta 1 release, we’ve made <a href=\"https://core.trac.wordpress.org/log/trunk/?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=41846&amp;stop_rev=41777&amp;limit=100&amp;sfp_email=&amp;sfph_mail=\">70 changes</a> in Beta 2, and <a href=\"https://core.trac.wordpress.org/log/trunk/?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=41938&amp;stop_rev=41847&amp;limit=100&amp;sfp_email=&amp;sfph_mail=\">92 changes</a> in <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-3/\">Beta 3</a>. In Beta 4, we&#8217;ve made <a href=\"https://core.trac.wordpress.org/log/trunk/?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=42020&amp;stop_rev=41940&amp;limit=100&amp;sfp_email=&amp;sfph_mail=\">80 changes</a>, focusing on bug fixes and finalizing new features.</p>\n<p>Do you speak a language other than English? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help us translate WordPress into more than 100 languages!</a></p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on WordPress Trac</a>, where you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a>.</p>\n<p><i>Beta 4 at last,<br />\nRC 1 draws ever near.<br />\nLet&#8217;s make it bug-free. <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f41b.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f6ab.png\" alt=\"?\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></i></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"4962\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:32:\"https://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"\n	hourly	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"\n	1	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:4:\"site\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"14607090\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:42:\"Requests_Utility_CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Tue, 19 Dec 2017 16:55:44 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:6:\"x-olaf\";s:3:\"⛄\";s:13:\"last-modified\";s:29:\"Wed, 06 Dec 2017 18:39:27 GMT\";s:4:\"link\";s:63:\"<https://wordpress.org/news/wp-json/>; rel=\"https://api.w.org/\"\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";}}s:5:\"build\";s:14:\"20130911040210\";}','no'),(1087,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1513745744','no'),(1088,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1513702544','no'),(1089,'_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9','1513745745','no'),(1090,'_transient_feed_d117b5738fbd35bd8c0391cda1f2b5d9','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Akismet: Version 4.0.2 of the Akismet WordPress Plugin Is Now Available\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"http://blog.akismet.com/?p=1982\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"https://blog.akismet.com/2017/12/18/version-4-0-2-of-the-akismet-wordpress-plugin-is-now-available/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1161:\"<p>Version 4.0.2 of <a href=\"http://wordpress.org/plugins/akismet/\">the Akismet plugin for WordPress</a> is now available.</p>\n<p>4.0.2 contains a few helpful changes:</p>\n<ul>\n<li class=\"p1\"><span class=\"s1\">Fixed a bug that could cause Akismet to recheck a comment that has already been manually approved or marked as spam.</span></li>\n<li class=\"p1\"><span class=\"s1\">Fixed a bug that could cause Akismet to claim that some comments are still waiting to be checked when no comments are waiting to be checked.</span></li>\n</ul>\n<p>To upgrade, visit the Updates page of your WordPress dashboard and follow the instructions. If you need to download the plugin zip file directly, links to all versions are available in <a href=\"http://wordpress.org/plugins/akismet/\">the WordPress plugins directory</a>.</p><br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/akismet.wordpress.com/1982/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/akismet.wordpress.com/1982/\" /></a> <img alt=\"\" border=\"0\" src=\"https://pixel.wp.com/b.gif?host=blog.akismet.com&blog=116920&post=1982&subd=akismet&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 18 Dec 2017 16:56:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Stephane Daury\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"WPTavern: Jetpack 5.6.1 Increases Security of the Contact Form Module\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=77061\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"https://wptavern.com/jetpack-5-6-1-increases-security-of-the-contact-form-module\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:575:\"<p>Jetpack has <a href=\"https://jetpack.com/2017/12/14/jetpack-5-6-1/\">released version 5.6.1</a> which hardens the Contact Form module by improving permissions checking when updating a form&#x27;s settings. In addition to security fixes, the character count for when Publicize publishes content to Twitter has been increased to 280. </p>\n\n\n\n<p>This release also fixes a bug that disabled the ability to save widgets after removing a Widget Visibility rule. Users are encouraged to update as soon as possible, especially if you make heavy use of the Contact Form module. </p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 15 Dec 2017 22:49:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: WPWeekly Episode 297 – WordCamp US 2017 Recap\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=77042&preview=true&preview_id=77042\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wptavern.com/wpweekly-episode-297-wordcamp-us-2017-recap\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2715:\"<p>In this episode, <a href=\"https://jjj.blog/\">John James Jacoby</a> and I are joined by <a href=\"https://mor10.com/\">Morten Rand-Hendriksen</a>. We have an engaging conversation about WordCamp US 2017, Gutenberg, and what it&#8217;s going to take for it to succeed. Rand-Hendriksen shared what he thinks are <a href=\"https://mor10.com/gutenberg-and-the-future-of-wordpress-conditions-for-success/\">the three conditions</a> that need to be met before Gutenberg can be shipped.</p>\n<p>Near the end of the show, we discuss the possible impacts Gutenberg&#8217;s timeline may have on the WordPress economy. Jacoby and I round out the show by reviewing the 2017 State of the Word and our picks of the week.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://wptavern.com/storify-to-close-may-16-2018-wordpress-plugin-discontinued\">Storify to Close May 16, 2018, WordPress Plugin Discontinued</a><br />\n<a href=\"https://wptavern.com/gutenberg-and-the-wordpress-of-tomorrow-by-morten-rand-hendriksen\" rel=\"bookmark\">Gutenberg and the WordPress of Tomorrow by Morten Rand-Hendriksen</a><br />\n<a href=\"https://bridgetwillard.com/economic-impact-timeline-gutenberg-rollout/\">The Economic Impact of the Timeline of the Gutenberg Rollout</a></p>\n<h2>Picks of the Week:</h2>\n<p><a href=\"https://www.copytrans.net/copytransheic/\">CopyTrans</a> is a plugin for Windows to view HEIC files. In iOS 11, Apple started using HEIC/HEIF. HEIF stands for High Efficiency Image Format, and, as the name suggests, is a more streamlined way to store image files. It allows digital photographs to be created in smaller files sizes while retaining higher image quality than its JPEG alternative. The image format is currently not supported in Windows 7, 8, and 10.</p>\n<p>CopyTrans HEIC for Windows is a simple Windows plugin that allows you to open HEIC files using Windows Photo Viewer. This format is also <a href=\"https://core.trac.wordpress.org/ticket/42775\">not compatible with WordPress.</a></p>\n<p><a href=\"http://github.com/10up/wpsnapshots\">WP Snapshots</a> is a command line interface (CLI) tool by 10Up that empowers engineering teams to quickly share WordPress projects, including files and the database.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, December 20th 3:00 P.M. Eastern</p>\n<p>Subscribe to <a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\">WordPress Weekly via Itunes</a></p>\n<p>Subscribe to <a href=\"https://www.wptavern.com/feed/podcast\">WordPress Weekly via RSS</a></p>\n<p>Subscribe to <a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\">WordPress Weekly via Stitcher Radio</a></p>\n<p><strong>Listen To Episode #297:</strong> </p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 14 Dec 2017 00:59:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"HeroPress: Finding My Way Out Of My Comfort Zone\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=2341\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:122:\"https://heropress.com/essays/finding-way-comfort-zone/#utm_source=rss&utm_medium=rss&utm_campaign=finding-way-comfort-zone\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:20133:\"<img width=\"960\" height=\"480\" src=\"https://heropress.com/wp-content/uploads/2017/12/121317-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: As web developers, programmers, people who speak English, people who have internet access to read this article, are incredibly, very, very, very lucky.\" /><p>I don&#8217;t remember when we had a computer for the first time. I practically grew up with them. Hungary was a communist country when I was born in &#8217;84, so while everyone had a job, no one could really do their own thing. Everything was state owned.</p>\n<p>In 1989-1990 there was a change of regime which followed the collapse of the Berlin wall, and suddenly the country became a democracy, and people were free to start and own companies. Yes, the era also had other problems, like 35% inflation at one point, but at least we were &#8220;free&#8221;.</p>\n<p>My parents started out by importing computers from Hong Kong. That was a huge thing. We had one of the first of those, a 286 with a whopping speed of 8 Mhz which went up to 16 if I pressed the Turbo button! I had no idea what that meant though besides the number being higher.</p>\n<p><a href=\"https://heropress.com/wp-content/uploads/2017/12/young_gabor.jpg\"><img class=\"aligncenter size-large wp-image-2343\" src=\"https://heropress.com/wp-content/uploads/2017/12/young_gabor-1024x576.jpg\" alt=\"Gabor about age 3, at a computer\" width=\"960\" height=\"540\" /></a></p>\n<p>It was a good time of Sim City, Prince of Persia, and Sokoban.</p>\n<h3>Finding the Web</h3>\n<p>My first &#8220;website&#8221; was one my grandmother asked me to make for her Quaker group. I was 12. I created it with tables and inline styling (CSS wasn&#8217;t a thing back then), but never got it live &#8211; hosting wasn&#8217;t something I really knew about.</p>\n<p>Fast forward to 2003 when I started university studying architecture in Budapest. It was fun, I loved physics, I loved drawing, I loved math, I <em>especially</em> loved descriptive geometry! The latter is pretty much &#8220;how to represent a 3d thing on a sheet of paper&#8221;. Incidentally that brought me my first high paying consulting job. As a student in 2nd year I coached a student in first year in descriptive geometry &#8211; he had broken his leg so couldn&#8217;t actually make the classes, but he had to pass that subject to advance. So every week I would go to their house and spend about 3 hours helping him draw and figure out how to draw what to draw and why to draw those things that way. That experience taught him everything he needed to know to pass with a 4 (on a scale of 5, 5 being best), which translates to around 80%. I had my first satisfied customer. <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f642.png\" alt=\"?\" class=\"wp-smiley\" /></p>\n<p>It also taught me two very important things:</p>\n<ol>\n<li>if you&#8217;re good at it, they will overlook the fact that you&#8217;re not actually &#8220;qualified&#8221; to do the thing (I wasn&#8217;t a TA / lecturer. I was merely another student in an upper class. An upperclassman. 先輩)</li>\n<li>if you&#8217;re good at it, you can charge people a lot more than you otherwise think. I got paid about 3x the standard hourly wage of adults working the majority of hourly jobs, and as a student, that was awesome!</li>\n</ol>\n<p>For context though, there is no tuition fee for your first degree (i.e.: it&#8217;s paid for by the government for you which gets that money from taxes).</p>\n<p>The second formative experience was between 2004-2006. I joined an extracurricular architecture club. Basically students who don&#8217;t just want to bumble through the university but actually get good! Like, REALLY GOOD. We pitched to host EASA &#8211; European Architecture Students&#8217; Assembly &#8211; in Budapest in 2006. For that we needed a website, both an internal forum, and a public facing site for sponsors / attendees / workshops / visitors / everyone.</p>\n<p>I knew nothing besides basic html.</p>\n<p>So naturally I volunteered.</p>\n<h3>Leveling up</h3>\n<p>I learned PHP, MySQL, and Flash from books: learn php in 24 hours, PHP 4 reference, learn mysql in 24 hours, learn flash in 24 hours, etc. I had one guy over the internet who helped me figure out things in PHP, but other than that I was all alone. Stack Overflow wasn&#8217;t a thing either. Wild times. From memory I could probably exploit that engine in one of 284 ways today. I&#8217;m glad it&#8217;s not online any more. The flash site is, it&#8217;s somewhat broken, but here you go: <a href=\"https://javorszky.github.io/ancientflashsite/\" rel=\"nofollow\">https://javorszky.github.io/ancientflashsite/</a></p>\n<p>I built a forum engine and a full actionscript site. We also had a requirement that whoever applies to host whatever workshop, we need to judge the workshop on its own merit, not on who submits it, so I built the submit form in such a way that it took the files, and renamed them, scrubbed the email addresses that reached the judging committee, and we made it a rule that if there&#8217;s any identifying information ON the pdf, it&#8217;s immediately disqualified. The year is 2005.</p>\n<p>Looking back, I realized two things:</p>\n<ol>\n<li>learn to learn on the job, and learn to enjoy not knowing stuff. Nobody does, really</li>\n<li>biases are real. Mitigate them. Even the ones you don&#8217;t know about. Especially the ones you don&#8217;t know about! Or at least have a framework by which you acknowledge if you&#8217;re called out</li>\n</ol>\n<h3>Moving On</h3>\n<p>I then decided to not continue my studies there. I was failed in one class where I expected a strong pass. We were split into 12 groups, and groups 1 and 2 got mostly failed, and groups 3-12 got overwhelmingly passed. Something wasn&#8217;t right, I spoke up, but I was a student, and they were faculty. I left because I didn&#8217;t feel like fighting and losing my soul over it.</p>\n<blockquote><p>Something wasn&#8217;t right, I spoke up, but I was a student, and they were faculty. I left because I didn&#8217;t feel like fighting and losing my soul over it.</p></blockquote>\n<p>I continued making websites for myself and got introduced to WordPress around this time. I don&#8217;t remember my first project. I <em>think</em> it was a site I built for myself in 8 hours for a competition which led me to my first paying website job, which I totally screwed up.</p>\n<p>In 2010 I decided to move countries with 3 friends I went to university with, at the time I was studying International Tourism Management, and I could transfer to Oxford Brookes University (not the one you heard about).</p>\n<p>I missed the application deadline.</p>\n<p>Which meant that I had to find work. When I bought my plane ticket I decided that whatever it takes, I will make it work. Staying in Hungary was not an option for me: I didn&#8217;t like the politics, I didn&#8217;t like where the country was heading economically, and I longed for a more cheerful society to surround me. Movement rights and language I can speak and other people going the same way helped me decide on the UK.</p>\n<h3>Restarting</h3>\n<p>So I made it work: I accepted the first full time job that I got offered. I worked as a wait staff at the restaurant of one of the luxury hotels in the city. It had very little to do with computers, but I had income, I could pay back the help I got from my friends (and by extension, their families), and I could actually take control of my own life instead of just bumping into furniture.</p>\n<blockquote><p>It had very little to do with computers, but I had income, I could pay back the help I got from my friends (and by extension, their families), and I could actually take control of my own life [&#8230;]</p></blockquote>\n<p>I&#8217;ve learned a lot from working there. Chef taught me that literally no one cares WHY there was a mistake at that time in putting through an order &#8211; what&#8217;s important is what the error was, what&#8217;s needed to correct it. Everything else is wasting everyone&#8217;s time. Of course we&#8217;d go through these after the service.</p>\n<p>I&#8217;ve learned that to work in hospitality, you have to leave your ego at the door. Doesn&#8217;t mean you should take abuse, but there you&#8217;re part of a &#8211; hopefully &#8211; finely tuned, oiled machinery, and keeping the whole thing operating is the number one goal. Turns out that&#8217;s also applicable to working in teams in general.</p>\n<p>A year goes by, and we need to move out of the house we&#8217;re renting. In a break between morning and evening shifts I look at the job postings in the local newspaper: someone&#8217;s looking for a developer! It was a Wednesday. I got an interview for Friday, and started on Monday. I had to talk to my supervisor to move me to evening-only shifts because I have a second desk job. My days: 9am &#8211; 4:45pm developer, 5pm &#8211; 2am (ish, whenever we finished) waiting tables. Rinse and repeat.</p>\n<p>Working 60-80 hours could only go on for so long. After about 3 months I had a very sharp chest pain while on shift at the restaurant. Had to walk home (normally I cycle), and then made my way to the emergency room where after having waited 5 hours, I got an X-ray, and EKG, and the doctor determined there&#8217;s nothing wrong, so here&#8217;s some Ibuprofen (3&#215;1) and some Paracetamol (1&#215;1).</p>\n<blockquote><p>Kids, don&#8217;t work 60-80 hours a week.</p></blockquote>\n<p>&#8220;Uh, which one should I take on a day?&#8221; &#8220;Oh&#8230; both!&#8221;</p>\n<p>I went home, took the first dose, and slept for 22 hours. I handed in my resignation 2 days later at the restaurant because I needed to not work that much. My manager pleaded me to stay at least on part time, which I did, because they were genuinely lovely people.</p>\n<p>Kids, don&#8217;t work 60-80 hours a week.</p>\n<h3>Back to the web with full steam</h3>\n<p>After a year at the development agency + restaurant combo, I got hired to a WordPress agency through recruiters. My new boss asked me why I haven&#8217;t applied to them directly, even though I saw their ad, why I waited to go through a recruiter. I said I didn&#8217;t think I was good enough. That decision ended up costing him a few thousand pounds in recruitment fees.</p>\n<p>I quit my restaurant job for good. I also learned a lesson to actually trust myself.</p>\n<p>Something that during the 2,5 years with them I would question a lot of times. There have been instances when I made mistakes that were incredibly easy to avoid had I just taken 5 more minutes to think. But every time it was something we could correct fairly fast (shoutout to hospitality experience!) and then I had a postmortem, and changed the way I work to avoid similar problems.</p>\n<p>I had the privilege to work on some seriously challenging WordPress sites while with them. That was my first actual commercial experience with it. We built blogs from Oxford University (the one you heard about) to eCommerce site migrations from Magento using Jigoshop and later WooCommerce.</p>\n<p>I&#8217;ve had to disassemble how WooCommerce worked fairly fast because of some of the client requirements, and I got pretty good at it.</p>\n<p>In November 2014 I got hired to one of the product companies around WooCommerce and spent a year and a half with them maintaining their plugins, answering customer queries and helping them fix their sites occasionally. That was my first help desk experience.</p>\n<p>I got access to some incredibly large eCommerce stores and I quickly discovered where the bottlenecks were in our plugins, WordPress, and WooCommerce itself. Some of the customers had access to New Relic, which I could use to help me find what&#8217;s taking so long.</p>\n<p>From then on it was just a case of finding what&#8217;s slow, following it back, reading the documentation and code on why it&#8217;s slow, and coming up with ideas on how to fix it.</p>\n<p>I got really good at this.</p>\n<h3>The Freelance Days</h3>\n<p>At the end of July 2016 our ways parted, and I had a buffer of about 3 months when I didn&#8217;t need to worry about having to find another job. While trying to figure out what to do, where next, I started getting requests to work on some projects. They asked me my hourly rate. I said a number I was slightly uncomfortable with, they said yeah, and off I went.</p>\n<blockquote><p>[&#8230;] I started getting requests to work on some projects. They asked me my hourly rate. I said a number I was slightly uncomfortable with, they said yeah [&#8230;]</p></blockquote>\n<p>It also helped that I was at the time known for my love of hard problems and actually figuring out why things break and fixing them.</p>\n<p>I thought &#8220;hey, if I can command that much hourly rate, I could make this work!&#8221;</p>\n<p>I took on clients, and managed to make things work for&#8230; a surprisingly long time. Having GREAT accountants is a must for self employment.</p>\n<p>I suddenly also had time to pursue some of my other interests: I learned how to ride a motorcycle.</p>\n<p><a href=\"https://heropress.com/wp-content/uploads/2017/12/gabor_motorcycle.jpg\"><img class=\"aligncenter size-large wp-image-2344\" src=\"https://heropress.com/wp-content/uploads/2017/12/gabor_motorcycle-1024x576.jpg\" alt=\"Gabor standing by a sporty motorcycle\" width=\"960\" height=\"540\" /></a></p>\n<p>I started learning Japanese! I got back onto the slackline.</p>\n<p><a href=\"https://heropress.com/wp-content/uploads/2017/12/gabor_slackline.jpg\"><img class=\"aligncenter size-large wp-image-2345\" src=\"https://heropress.com/wp-content/uploads/2017/12/gabor_slackline-1024x768.jpg\" alt=\"Gabor balancing on a narrow strap hung between two trees\" width=\"960\" height=\"720\" /></a></p>\n<p>I got to speak at WordCamp Brighton in 2017!</p>\n<p><a href=\"https://heropress.com/wp-content/uploads/2017/12/gabor_wordcamp.jpg\"><img class=\"aligncenter wp-image-2346 size-large\" src=\"https://heropress.com/wp-content/uploads/2017/12/gabor_wordcamp-1024x683.jpg\" alt=\"Gabor, on stage at WordCamp Brighton\" width=\"960\" height=\"640\" /></a></p>\n<p>Until very recently, it was a game of &#8220;how long can I be self employed before I need to look for a job?&#8221; Turns out I couldn&#8217;t answer this, because an opportunity came up to join Mindsize as a lead backend developer.</p>\n<p>When I heard about them starting up a few months prior, I had two thoughts:</p>\n<ol>\n<li>they are probably the only company I would stop doing freelance work for</li>\n<li>I&#8217;m not good enough to work with them yet</li>\n</ol>\n<p>Statement 1 was true :).</p>\n<h3>Catching up with the present</h3>\n<p>This brings us into the very recent present. It&#8217;s maybe a month old development at the time of publication. Since then I&#8217;ve been working really hard to reclaim my time of about 40 hours worked a week. With the holiday push of the clients I had as a freelancer, there was a transition phase where I had to work 60-80 hours.</p>\n<p>Don&#8217;t work 60-80 hours a week, kids!</p>\n<p>Looking back it was incredibly humbling experience so far, but also exciting, and full of challenges, and learnings. I&#8217;ve made a lot of excellent friends, and luckily very few enemies. I am grateful for each and every one of them.</p>\n<p>I don&#8217;t know where life takes me. For the foreseeable future I&#8217;ll be with Mindsize and will make eCommerce sites awesome, and will make awesome eCommerce sites. But I&#8217;ll also try and pass on some of the things I&#8217;ve learned by helping people new to the industry.</p>\n<p>There are a lot more things I could say, but they aren&#8217;t necessarily part of my journey, so I&#8217;ll save them for some other time.</p>\n<h3>On privilege</h3>\n<blockquote><p>We, as web developers, programmers, people who speak English, people who have internet access to read this article, are incredibly, very, very, very lucky.</p></blockquote>\n<p>Except for one thing. When I worked at the WordPress agency, Twitter, and by extension, society, started the &#8220;check your privilege&#8221; trend. It took a while to understand what it was all about, but it&#8217;s something I wish everyone did.</p>\n<p>We, as web developers, programmers, people who speak English, people who have internet access to read this article, are incredibly, very, very, very lucky. I&#8217;ve realized that my journey wouldn&#8217;t have been possible had I been born to less fortunate circumstances:</p>\n<p>If my parents didn&#8217;t make the decision to start teaching me English when I was 3.</p>\n<p>If I didn&#8217;t have the financial stability in my family to be able to just explore what I like to do.</p>\n<p>If I didn&#8217;t have the financial stability to just drop out of university after 3 years because &#8220;I didn&#8217;t like it&#8221;. And another one after a semester. And never finish my Tourism Management course.</p>\n<p>If I didn&#8217;t live in a developed nation with easy access and high standards of living.</p>\n<p>This brings into mind one of my favorite tweets:</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Your job, lucky person, is to help others less lucky than you to improve their odds.</p>\n<p>&mdash; Dylan Wilbanks, Human Grumpy Cat (@dylanw) <a href=\"https://twitter.com/dylanw/status/522060876304486400?ref_src=twsrc%5Etfw\">October 14, 2014</a></p></blockquote>\n<p></p>\n<p>Not everyone has these opportunities and every day I am conscious of it.</p>\n<p>Humans are hard. Interpersonal skills are hard. Treating each other with dignity, respect, and grace is hard if you haven&#8217;t been brought up with those values as a kid. It&#8217;s been a challenge for me to shed the &#8220;boys will be boys&#8221; upbringing I was carrying.</p>\n<p>Let&#8217;s use our power and means and help the less fortunate walk their own paths. Let&#8217;s lessen marginalization with the view of ending it. Let&#8217;s be excellent to each other!</p>\n<p>And don&#8217;t use &#8220;guys&#8221; to mean everyone!</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: Finding My Way Out Of My Comfort Zone\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=Finding%20My%20Way%20Out%20Of%20My%20Comfort%20Zone&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Ffinding-way-comfort-zone%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: Finding My Way Out Of My Comfort Zone\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Ffinding-way-comfort-zone%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Ffinding-way-comfort-zone%2F&title=Finding+My+Way+Out+Of+My+Comfort+Zone\" rel=\"nofollow\" target=\"_blank\" title=\"Share: Finding My Way Out Of My Comfort Zone\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/finding-way-comfort-zone/&media=https://heropress.com/wp-content/uploads/2017/12/121317-150x150.jpg&description=Finding My Way Out Of My Comfort Zone\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: Finding My Way Out Of My Comfort Zone\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/finding-way-comfort-zone/\" title=\"Finding My Way Out Of My Comfort Zone\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/finding-way-comfort-zone/\">Finding My Way Out Of My Comfort Zone</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Dec 2017 08:00:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Gabor Javorszky\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Storify to Close May 16, 2018, WordPress Plugin Discontinued\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76992\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://wptavern.com/storify-to-close-may-16-2018-wordpress-plugin-discontinued\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2906:\"<p><a href=\"https://storify.com/\">Storify</a>, a service that launched in 2010 and opened to the public in 2013 has announced that it is shutting down version one of its service on May 16th, 2018. Concurrently, its WordPress plugin that is actively installed on more than 2,000 sites has been <a href=\"https://wordpress.org/plugins/storify/\">discontinued</a>. </p>\n\n\n\n<img src=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/12/StorifyPluginDiscontinued.png?w=627&ssl=1\" />\n    Storify Plugin is Discontinued\n\n\n\n\n<p>Storify enabled journalists and others to build stories and timelines similar to Twitter and other social networks. The service <a href=\"https://techcrunch.com/2013/09/09/livefyre-acquires-storify/\">was acquired</a> by <a href=\"http://www.livefyre.com\">Livefyre</a> in 2013 and became part of Adobe when it <a href=\"https://techcrunch.com/2016/05/03/adobe-acquires-livefyre/\">acquired Livefyre</a> in 2016. </p>\n\n\n\n<p>Storify has disabled new accounts from being created and will delete stories and accounts on May 16th, 2018. Existing users who want to move to Storify 2, a paid feature of Livefyre, will need to purchase a license. The service has <a href=\"https://storify.com/faq-eol\">published a FAQ</a> that includes directions on how to export content. </p>\n\n\n\n<h2>New Plugin Opportunity</h2>\n\n\n\n<p>According to some users, the export process is cumbersome, providing an excellent opportunity for a prospecting developer to create a WordPress plugin that makes the process easier. A search of the WordPress plugin directory for Storify Export produces zero results. <br /></p>\n\n\n\n\n    <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A fantastic <a href=\"https://twitter.com/hashtag/WordPress?src=hash&ref_src=twsrc%5Etfw\">#WordPress</a> dev opportunity: <a href=\"https://twitter.com/Storify?ref_src=twsrc%5Etfw\">@Storify</a> just announced its \"End of Life\" for May 2018. The export is kinda lame. If I could import a story from Storify into a WordPress Post/Page that would be fabulous! I have a few stories that I wouldn\'t want to lose. <a href=\"https://twitter.com/hashtag/biz?src=hash&ref_src=twsrc%5Etfw\">#biz</a></p>&mdash; Birgit Pauli-Haack (@bph) <a href=\"https://twitter.com/bph/status/940706045449703424?ref_src=twsrc%5Etfw\">December 12, 2017</a></blockquote>\n\n\n\n\n\n    <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I have a lot of Storify stories I\'d hate to lose, too. If you hear of someone doing this, I\'d love to know about it.</p>&mdash; Deborah Edwards-Onoro (@redcrew) <a href=\"https://twitter.com/redcrew/status/940729186469253120?ref_src=twsrc%5Etfw\">December 12, 2017</a></blockquote>\n\n\n\n\n<p>If you know of any methods or plugins that eases the process of exporting content from Storify and importing it to WordPress, please share them in the comments. Also feel free to let us know if you create a plugin that performs this task. </p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Dec 2017 07:30:24 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WPTavern: Gutenberg and the WordPress of Tomorrow by Morten Rand-Hendriksen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76959\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"https://wptavern.com/gutenberg-and-the-wordpress-of-tomorrow-by-morten-rand-hendriksen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1054:\"<p>While attending WordCamp US 2017, there were a number of sessions that stood out to me. <a href=\"https://wordpress.tv/2017/12/10/morten-rand-hendriksen-gutenberg-and-the-wordpress-of-tomorrow/\">Gutenberg and the WordPress of Tomorrow</a> by Morten Rand-Hendriksen was one of them. </p>\n\n\n\n<p>Hendriksen explains the state of WYSIWYG in WordPress and how it doesn&#x27;t really exist but Gutenberg provides opportunities to change that. He explores developing sites without being confined to a small view port. He also performs a live demo of Gutenberg showing off its capabilities.</p>\n\n\n\n<p>An interesting outcome from his presentation is the amount of optimism and excitement it generated from the audience. During the question and answer session, a member of the audience commented on how far Gutenberg has advanced in the last three months and that it looks cool to use now. </p>\n\n\n\n<p>To gain insight into how Gutenberg can moonshot WordPress over its competition, watch Hendriksen&#x27;s presentation. </p>\n\n\n\n\n    <div class=\"embed-wrap\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Dec 2017 20:57:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Matt: Post-Verbal Language\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47705\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://ma.tt/2017/12/post-verbal-language/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1800:\"<p>James Beshara has a <a href=\"https://jjbeshara.com/2017/12/09/a-post-verbal-world/\">really interesting read on how communication will change and evolve in a post-verbal world</a>, namely one where human/brain interfaces like <a href=\"https://waitbutwhy.com/2017/04/neuralink.html\">Neuralink</a> can more directly transmit thought between people than the medium of language allows today. </p>\n\n\n\n<p>After reading the essay I wonder if people&#x27;s thoughts or the neural pathways they activate, if they could be directly transmitted into another brain, would actually make any sense to someone else with a unique internal set of pathways and framework for parsing and understanding the world. The essay assumes we&#x27;d understand and have more empathy with each other, but that seems like a leap. It seems likely the neural link would need it own set of abstractions, perhaps even unique per person, similar to how <a href=\"https://www.newscientist.com/article/2114748-google-translate-ai-invents-its-own-language-to-translate-with/\">Google Translate AI invented its own meta-language</a>. </p>\n\n\n\n<p>Today <a href=\"https://www.economist.com/news/leaders/21730871-facebook-google-and-twitter-were-supposed-save-politics-good-information-drove-out\">idea-viruses that cause outrage (outrageous?) in today&#x27;s discourse  have been weaponized by algorithms optimizing for engagement</a>, and directly brain-transmitted memes seem especially risky for appealing to our base natures or causing <a href=\"https://en.wikipedia.org/wiki/Amygdala_hijack\">amygdala hijack</a>. But perhaps a feature of these neural interface devices could counteract that, with a command like \"tell me this piece of news but suppress my confirmation bias and tribal emotional reactions while I&#x27;m taking it in.\"</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Dec 2017 03:09:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Matt: iPhone Fast Charging\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47682\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"https://ma.tt/2017/12/iphone-charging/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:382:\"<p>I love USB, cables, and charging things. <a href=\"https://www.macrumors.com/guide/iphone-x-fast-charging-speeds-compared/\">So MacRumors comparison of different wired and wireless charging options and speed for the iPhone X is my catnip</a>. tl; dr: USB-C + USB-C-to-Lightning cable gives you far and away the fastest times. I&#x27;ve found this true for the iPad Pro as well.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 07 Dec 2017 16:51:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Matt: State of the Word, 2017\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47687\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://ma.tt/2017/12/state-of-the-word-2017/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:524:\"<p>I really enjoyed connecting with the WordPress community in Nashville this previous weekend. On Saturday I delivered the State of the Word presentation alongside <a href=\"https://choycedesign.com/\">Mel</a>, <a href=\"https://weston.ruter.net/\">Weston</a>, and <a href=\"https://matiasventura.com/\">Matías</a>. There&#x27;s always a post-event buzz but I definitely noticed a change in tenor of people&#x27;s thoughts on Gutenberg after the presentation and demo. The video is above, check it out when you get a chance.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Dec 2017 23:38:20 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"HeroPress: Remote Work Brings Freedom\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=2324\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"https://heropress.com/essays/remote-work-brings-freedom/#utm_source=rss&utm_medium=rss&utm_campaign=remote-work-brings-freedom\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:20981:\"<img width=\"960\" height=\"480\" src=\"https://heropress.com/wp-content/uploads/2017/12/120617-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: WordPress is not just a CMS, it\'s a Community of lovely people!\" /><p><a href=\"https://heropress.com/feed/#gujarati\">આ નિબંધ ગુજરાતીમાં પણ ઉપલબ્ધ છે</a></p>\n<p>First of all, I want to say thank you to HeroPress for reaching out and letting so many people share their stories. I am a follower of HeroPress and read new stories every week! A few months ago my friend <a href=\"https://heropress.com/essays/wordpress-good-indian-women/\">Juhi Patel shared her great WordPress story</a>, and I was inspired by her to share my own and how it has changed my way of working.</p>\n<blockquote><p>I am that guy who hates theory and loves to do practical programming.</p></blockquote>\n<p>After completing my bachelor of engineering with Information Technology in 2013, I was looking for a job. I found that there were many different kinds of programming language jobs that were available. I was really not sure which one I needed or wanted to choose. After getting advice from a senior, I started training for PHP because it was easy and quick to learn. A few days before I had completed Training, I got selected in small company (5 Employees) as a PHP Developer. I was making websites there using PHP codeigniter framework.</p>\n<p>I was belong from a small town, and everyday it took me around 3 hours to travel to my job. After about 2 months, I applied for a job at another big company and was selected as Web Developer. There I was working on CMS Framework (not WordPress <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f600.png\" alt=\"?\" class=\"wp-smiley\" /> ) for website projects. After a few days, I made my personal site using WordPress in my free time.</p>\n<blockquote><p>At that time, I was not aware of themes and plugins. I was just playing with theme files and editor to make changes on my website! <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f61c.png\" alt=\"?\" class=\"wp-smiley\" /></p></blockquote>\n<p>After a month, my team leader got to know about that I was interested in WordPress. I got the opportunity to learn WordPress. I learned and explored WordPress with some demo projects by understanding how plugins and themes work. After 3 weeks of learning WordPress, I worked on my first WordPress project. This project took around 4 months to complete <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f600.png\" alt=\"?\" class=\"wp-smiley\" /> After this successful project, the whole CMS Team migrated to WordPress.</p>\n<blockquote><p>I realized that, WordPress is so easy to learn, get help and work on it!</p></blockquote>\n<p>After around 1 year and 3 months of working with that company, I was told to work after working hours due to heavy requirements from our projects. I felt really stressed and frustrated at work and during that time…</p>\n<blockquote><p>I got to know about “Remote” work. But I didn’t know what that was or how it works?</p></blockquote>\n<p>I explored about remote work and found that this is a career that you can work from your home, workplace or anywhere you like. I saw that many people in world are doing remote work happily. I decided to switch my job from Office Job to Remote Job. My parents, family and relatives advised me to not leave office job because they believed Remote Job is not as secure as an Office Job. But I stuck with my decision. In March 2015, I resigned from my job without notice period with the condition of no experience letter would be provided to me of this job.</p>\n<blockquote><p>At the initial stage it was hard to be freelancer. But I was trying and trying to get that started.</p></blockquote>\n<p>I had registered in one popular freelancer marketplace. After 1 week of trying very hard I got my first project. It was just for $5 to make an HTML page with a countdown timer. I did it successfully and got the best review. After that I had also completed many projects successfully. That’s it! I was done with my decision. Within the first few weeks I made a website for one US Client. They were impressed by my work and hired me as Full time Web Developer for their company in April 2015. I am remotely working with them happily still today from my home!</p>\n<blockquote><p>Everything is going smoothly. I am enjoying Work from Home, Freedom and Quality time with Family.</p></blockquote>\n<p>In October 2016, I learned about WordCamp. I attended my first WordCamp Nashik 2016. I met many WordPress Developers, Freelancers, Professionals, Users and many other people at this WordCamp. After that, I became a fan of WordCamp. We started organizing Meetups in our City. Within the last year, I have attended, volunteered and contributed as a friend and sponsor at more than 6 WordCamps. Currently I am active member of Ahmedabad WordPress Community.</p>\n<blockquote><p>I am a WordCamp Lover. WordCamp is a way to meet new people, learn and share knowledge!</p></blockquote>\n<p>In October 2017, we successfully organized WordCamp in our city. I have been speaking about how remote job can be a good opportunity as a career to students and newbie in panel discussion of WordCamp Ahmedabad.</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/12/wcahmedabad-panel-discussion.jpg\"><img class=\"size-large wp-image-2325\" src=\"https://heropress.com/wp-content/uploads/2017/12/wcahmedabad-panel-discussion-1024x683.jpg\" alt=\"4 men on a couch at the front of a room.\" width=\"960\" height=\"640\" /></a>Panel Discussion &#8211; WordCamp Ahmedabad 2017 (PC. Meher Bala)\n<blockquote><p>WordPress is not just a CMS, It&#8217;s a community of lovely people!</p></blockquote>\n<hr />\n<h1 id=\"gujarati\">રિમોટ કામ સ્વતંત્રતા લાવે છે.</h1>\n<blockquote><p>“મને હીરોપ્રેસ સ્ટોરીમાં ભાગ લેવામાં કેવી રીતે પ્રેરણા મળી?”</p></blockquote>\n<p>સૌ પ્રથમ, ઘણા લોકો સુધી પહોંચીને અને તેમની વાર્તાઓ કહેવા માટે હું હીરોપ્રેસનો ખુબ જ આભાર માનું છું. હું હિરોપ્રેસનો અનુયાયી છું અને દર અઠવાડિયે નવી વાર્તાઓ વાંચું છું! થોડા મહિના પહેલા મારી મિત્ર જુહી પટેલે તેની વર્ડપ્રેસની રસપ્રદ વાર્તા હીરોપ્રેસ પર કહી હતી. તે વાંચીને મને, મારા પોતાની વાર્તા, મારા કામ કરવાની રીત કઇ રીતે બદલાઈ તે કહેવા માટે પ્રેરણા મળી હતી.</p>\n<blockquote><p>&#8220;હું તે વ્યક્તિ છું જે થિયોરીને નફરત કરે છે અને પ્રાયોગિક પ્રોગ્રામિંગ કરવા માટે પ્રેમ કરે છે. &#8220;</p></blockquote>\n<p>2013 માં ઇન્ફોર્મેશન ટેકનોલોજી સાથે મારી સ્નાતક એન્જિનિયરિંગ પૂર્ણ કર્યા પછી, હું નોકરી શોધી રહ્યો હતો ત્યારે મેં જોયું કે અહીં ઘણી બધી પ્રોગ્રામિંગ ભાષાની નોકરીઓ ઉપલબ્ધ છે. ત્યારે હું ચોક્કસ ન હતો કે મારે કઈ પ્રોગ્રામિંગ ભાષા પસંદ કરવાની જરૂર છે? વરિષ્ઠ પાસેથી સલાહ મેળવ્યા પછી, મેં PHP માટે તાલીમ શરૂ કરી, કારણ કે તે શીખવા માટે સરળ અને ઝડપી હતી. તાલીમ પૂર્ણ થયાના થોડા દિવસો પહેલાં, મારી નાની કંપની (5 કર્મચારીઓ) માં PHP ડેવલપર તરીકે પસંદગી થઇ. હું PHP Codeigniter ફ્રેમવર્કનો ઉપયોગ કરીને ત્યાં વેબસાઇટ્સ બતાવતો હતો.</p>\n<p>હું એક નાનકડા શહેરમાંથી આવતો હતો, અને દરરોજ મને મારી નોકરી પર મુસાફરી કરવા માટે 3 કલાક જેવા થતા હતા. લગભગ 2 મહિના પછી, મેં બીજી મોટી કંપનીમાં નોકરી માટે અરજી કરી હતી અને ત્યાં મારી વેબ ડેવલપર તરીકે પસંદગી કરવામાં આવી હતી. ત્યાં હું વેબસાઇટ સંબંધિત પ્રોજેક્ટ્સ માટે સીએમએસ ફ્રેમવર્ક (વર્ડપ્રેસ સિવાયની <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f600.png\" alt=\"?\" class=\"wp-smiley\" />) પર કામ કરતો હતો. થોડા દિવસો પછી, મેં મારી વ્યક્તિગત વેબસાઈટને મારા સ્વતંત્ર સમય દરમિયાન વર્ડપ્રેસની મદદથી બનાવી.</p>\n<blockquote><p>&#8220;તે સમયે, હું થીમ્સ અને પ્લગિન્સથી વાકેફ ન હતો. હું મારી વેબસાઇટ પર ફેરફારો કરવા માટે માત્ર થીમ ફાઇલો અને એડિટર સાથે રમી રહ્યો હતો! <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f61c.png\" alt=\"?\" class=\"wp-smiley\" />&#8221;</p></blockquote>\n<p>એક મહિના પછી, મારી ટીમના આગેવાનને જાણવા મળ્યું કે મને વર્ડપ્રેસમાં રસ હતો. ત્યારે મને વર્ડપ્રેસ શીખવાની તક મળી. વર્ડપ્રેસ થીમ્સ અને પ્લગીંસ કેવી રીતે કામ કરે છે એ સમજવા, મેં જાતે શીખીને કેટલાક ડેમો પ્રોજેક્ટસ બનાવ્યા. વર્ડપ્રેસ શીખવાના 3 અઠવાડિયા પછી, મેં મારા પ્રથમ વર્ડપ્રેસ લાઈવ પ્રોજેક્ટ પર કામ કર્યું હતું. આ પ્રોજેક્ટ પૂર્ણ કરવા માટે મને લગભગ 4 મહિના લાગ્યા હતા <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f600.png\" alt=\"?\" class=\"wp-smiley\" /> આ સફળ પ્રોજેક્ટ પછી, સમગ્ર સીએમએસ ટીમ વર્ડપ્રેસમાં જોડાઈ ગઈ.</p>\n<blockquote><p>&#8220;મેં અનુભવ કર્યો કે, વર્ડપ્રેસ શીખવું, સહાય મેળવવી અને તેના પર કાર્ય કરવુ ખૂબ જ સરળ છે!&#8221;</p></blockquote>\n<p>લગભગ 1 વર્ષ અને 3 મહિના તે કંપની સાથે કામ કર્યા પછી, મને અમારા પ્રોજેક્ટ્સની ભારે આવશ્યકતાના કારણે કામના કલાકો પછી પણ વધારે રોકાઈને કામ કરવા કહેવામાં આવતું હતું અને તે 2 સપ્તાહથી વધુ ચાલુ રહ્યું. ત્યારે મને કામ કરવું ખરેખર ભારયુક્ત અને નિરાશાજનક લાગવા લાગ્યું, તે સમય દરમિયાન ..</p>\n<blockquote><p>&#8220;મને &#8220;રિમોટ&#8221; કામ વિશે જાણવા મળ્યું. પરંતુ મને ખબર નહોતી કે તે કે તે કેવી રીતે કાર્ય કરે છે?&#8221;</p></blockquote>\n<p>મેં રિમોટ કામ વિશે તપાસ કરી અને જાણવા મળ્યું કે આ એક કારકિર્દી છે જે તમે તમારા ઘર, કાર્યસ્થળ અથવા તમને પસંદ હોય એ જગ્યાએથી કામ કરી શકો છો. મેં જોયું કે દુનિયામાં ઘણા લોકો રિમોટ કામ ખુબ જ ખુશીથી કરી રહ્યા હતા. મેં ઑફિસ જોબ છોડીને રિમોટ કામ કરવાનું નક્કી કર્યું. મારા માતાપિતા, કુટુંબીજનો અને સંબંધીઓએ મને ઓફિસની નોકરી ના છોડવાની સલાહ આપી કારણ કે તેઓ માનતા હતા કે રિમોટ કામ એ ઓફિસ જોબ જેટલું સુરક્ષિત નથી. પરંતુ હું મારા નિર્ણય સાથે જોડાઈ રહ્યો. માર્ચ 2015 માં, મેં નોટિસના સમયગાળા વગર મારા કામમાંથી રાજીનામું આપ્યું હતું અને શરત હતી કે આ નોકરીનો કોઈપણ અનુભવ પત્ર મને પૂરો પાડવામાં આવશે નહીં.</p>\n<blockquote><p>&#8220;પ્રારંભિક તબક્કે ફ્રીલાન્સર બનવું મુશ્કેલ હતું. પરંતુ હું તે ગમે તેમ કરીને શરૂ કરવાનો ખુબ જ પ્રયાસ કરી રહ્યો હતો.&#8221;</p></blockquote>\n<p>મેં એક લોકપ્રિય ફ્રીલાન્સર માર્કેટપ્લેસમાં રજીસ્ટર કર્યું હતું. 1 અઠવાડિયાના સખત પ્રયાસ કાર્ય પછી મને પહેલો પ્રોજેક્ટ મળ્યો. આ પ્રોજેક્ટ કાઉન્ટડાઉન ટાઈમર સાથે એક HTML પેજ બનાવવા માટે મને માત્ર $5 મળ્યા હતા. મેં એ પ્રોજેક્ટ સફળતાપૂર્વક પૂરો કર્યો અને શ્રેષ્ઠ રિવ્યૂ મેળવ્યો. તે પછી મેં ઘણા પ્રોજેક્ટ્સ પણ સફળતાપૂર્વક પૂર્ણ કર્યા હતા. બસ આ જ! મને મારો નિર્ણય સાચો પુરવાર થયો. પ્રથમ થોડા અઠવાડિયાની અંદર મેં એક યુએસ ક્લાયન્ટ માટે વેબસાઇટ બનાવી. તેઓ મારા કામથી પ્રભાવિત થયા હતા અને એપ્રિલ 2015 માં મને તેમની કંપની માટે સંપૂર્ણ સમય માટે વેબ ડેવલપર તરીકે નિયુક્ત કર્યો. હું આજે પણ તેમની સાથે ખુબ જ ખુશીપૂર્વક મારા ઘરેથી રિમોટ કામ કરું છું!</p>\n<blockquote><p>&#8220;બધું સરળતાપૂર્વક જઈ રહ્યું છે. હું ઘરેથી કામ કરીને સ્વતંત્રતા અને પરિવાર સાથે ગુણવત્તાભર્યો સમય પસાર કરવાનો આનંદ અનુભવું છું.&#8221;</p></blockquote>\n<p>ઑક્ટોબર 2016 માં, મને વર્ડકેમ્પ વિશે જાણવા મળ્યું. મેં મારી પહેલી વર્ડકેમ્પ નાસિક 2016 માં હાજરી આપી હતી. હું ઘણા વર્ડપ્રેસ ડેવલપર્સ, ફ્રીલાન્સર્સ, પ્રોફેશનલ્સ, યુઝર્સ અને ઘણા અન્ય લોકોને આ વર્ડકેમ્પ પર મળ્યો હતો. તે પછી, હું વર્ડકેમ્પ નો ચાહક બની ગયો. અમે અમારા શહેરમાં મીટપનું નું આયોજન કરવાનું શરૂ કર્યું. છેલ્લા વર્ષમાં, 6 થી વધુ વર્ડકેમ્પ પર મેં હાજરી આપીને, સ્વયંસેવક અને મિત્ર સ્પોન્સર તરીકે ફાળો આપ્યો છે. હાલમાં હું અમદાવાદ વર્ડપ્રેસ સમુદાયનો સક્રિય સભ્ય છું</p>\n<blockquote><p>&#8220;હું વર્ડકેમ્પનો પ્રેમી છું. વર્ડકેમ્પ નવા લોકોને મળવાનો, પોતાના જ્ઞાનની આપ-લે કરવાનો એક માર્ગ છે!&#8221;</p></blockquote>\n<p>ઓક્ટોબર 2017 માં, અમે અમારા શહેરમાં સફળતાપૂર્વક વર્ડકૅમ્પનું આયોજન કર્યું હતું. વર્ડકૅમ્પ અમદાવાદની પેનલ ચર્ચામાં મેં વિદ્યાર્થીઓ અને વપરાશકર્તાઓ માટે રિમોટ કામ કેવી રીતે સારી કારકિર્દી હોઈ શકે તે વિશે ચર્ચા કરી હતી.</p>\n<blockquote><p>&#8220;વર્ડપ્રેસ ફક્ત સીએમએસ નથી, પણ તે શ્રેષ્ઠ લોકોનો સમુદાય છે.&#8221;</p></blockquote>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: Remote Work Brings Freedom\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=Remote%20Work%20Brings%20Freedom&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fremote-work-brings-freedom%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: Remote Work Brings Freedom\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fremote-work-brings-freedom%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fremote-work-brings-freedom%2F&title=Remote+Work+Brings+Freedom\" rel=\"nofollow\" target=\"_blank\" title=\"Share: Remote Work Brings Freedom\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/remote-work-brings-freedom/&media=https://heropress.com/wp-content/uploads/2017/12/120617-150x150.jpg&description=Remote Work Brings Freedom\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: Remote Work Brings Freedom\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/remote-work-brings-freedom/\" title=\"Remote Work Brings Freedom\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/remote-work-brings-freedom/\">Remote Work Brings Freedom</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Dec 2017 02:30:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Chetan Prajapati\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"WPTavern: WordCamp US 2017 is Livestreaming All Sessions for Free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76937\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://wptavern.com/wordcamp-us-2017-is-livestreaming-all-sessions-for-free\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2781:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/04/wordcamp-us-nashville.jpeg?ssl=1\"><img /></a></p>\n<p>WordCamp US is kicking off this morning. If you couldn&#8217;t make the journey to Nashville, you can still follow along at home or wherever you are in the world. <a href=\"https://2017.us.wordcamp.org/tickets/\" rel=\"noopener\" target=\"_blank\">Livestream Tickets</a> are free on the event&#8217;s website. Once you&#8217;ve registered for a ticket, head on over to <a href=\"https://2017.us.wordcamp.org/live-stream/\" rel=\"noopener\" target=\"_blank\">2017.us.wordcamp.org/live-stream/</a> and you&#8217;ll be able to tune in to the Fiddle Track, Banjo Track, Guitar Track, and the State of the Word (scheduled for Saturday, December 2, at 4PM CST).</p>\n<p>WordCamp US will be running three tracks simultaneously for both days of the conference and all sessions will be livestreamed. Check out the <a href=\"https://2017.us.wordcamp.org/schedule/\" rel=\"noopener\" target=\"_blank\">schedule</a> to find sessions you want to attend from home. Volunteers will also include captions, which will be embedded within the live stream video. If you have any problems with the stream, the event has a page dedicated to <a href=\"https://2017.us.wordcamp.org/live-stream/attendee-test/\" rel=\"noopener\" target=\"_blank\">livestream attendees</a> with a backup stream, as well as a troubleshooting page for <a href=\"https://2017.us.wordcamp.org/live-stream/support/\" rel=\"noopener\" target=\"_blank\">livestream support</a>.</p>\n<p>If you&#8217;re following along on Twitter, the <a href=\"https://twitter.com/wordcampus\" rel=\"noopener\" target=\"_blank\">WCUS Twitter</a> volunteers will be providing threaded coverage of sessions. This should keep your Twitter stream a little tidier with a kickoff tweet for each session, followed by live coverage threaded under each as replies.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Want to follow along with WCUS coverage at home? It will be easy by following our threaded coverage.  Each session will start with a tweet that looks like this, All coverage of that session will be threaded to that kick-off tweet. <a href=\"https://t.co/J0M6jo6GEi\">pic.twitter.com/J0M6jo6GEi</a></p>\n<p>&mdash; WordCamp US (@WordCampUS) <a href=\"https://twitter.com/WordCampUS/status/936595172485468160?ref_src=twsrc%5Etfw\">December 1, 2017</a></p></blockquote>\n<p></p>\n<p>Want to see WCUS hosted near you in 2019/2020? <a href=\"https://wordcampcentral.polldaddy.com/s/wcus-2019-2020\" rel=\"noopener\" target=\"_blank\">Applications for host cities</a> opened today. If you want to be part of the team that makes WCUS happen in your city, talk to your local WordPress community organizers about filling out an application for the next host city.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 01 Dec 2017 15:34:56 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"Dev Blog: The Month in WordPress: November 2017\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5290\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://wordpress.org/news/2017/12/the-month-in-wordpress-november-2017/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4162:\"<p>The WordPress project recently released WordPress 4.9, “Tipton” — a new major release named in honor of musician and band leader Billy Tipton. Read on to find out more about this and other interesting news from around the WordPress world in November.</p>\n<hr class=\"wp-block-separator\" />\n<h2>WordPress 4.9 “Tipton”</h2>\n<p>On November 16, <a href=\"https://wordpress.org/news/2017/11/tipton/\">WordPress 4.9 was released</a> with new features for publishers and developers alike. Release highlights include design locking, scheduling, and previews in the Customizer, an even more secure and usable code editing experience, a new gallery widget, and text widget improvements.</p>\n<p>The follow up security and maintenance, v4.9.1, <a href=\"https://wordpress.org/news/2017/11/wordpress-4-9-1-security-and-maintenance-release/\">has now been released</a> to tighten up the security of WordPress as a whole.</p>\n<p>To get involved in building WordPress Core, jump into the #core channel in the<a href=\"https://make.wordpress.org/chat/\"> Making WordPress Slack group</a>, and follow<a href=\"https://make.wordpress.org/core/\"> the Core team blog</a>.</p>\n<h2>Apply to Speak At WordCamp Europe 2018</h2>\n<p>The next edition of WordCamp Europe takes place in June, 2018. While the organizing team is still in the early stages of planning, <a href=\"https://2018.europe.wordcamp.org/2017/11/15/are-you-ready-to-speak-at-the-largest-wordpress-event-in-europe/\">they are accepting speaker applications</a>.</p>\n<p>WordCamp Europe is the largest WordCamp in the world and, along with WordCamp US, one of the flagship events of the WordCamp program — speaking at this event is a great way to give back to the global WordPress community by sharing your knowledge and expertise with thousands of WordPress enthusiasts.</p>\n<h2>Diversity Outreach Speaker Training Initiative</h2>\n<p>To help WordPress community organizers offer diverse speaker lineups, <a href=\"https://make.wordpress.org/community/2017/11/13/call-for-volunteers-diversity-outreach-speaker-training/\">a new community initiative has kicked off</a> to use existing <a href=\"https://make.wordpress.org/training/handbook/speaker-training/\">speaker training workshops</a> to demystify speaking requirements and help participants gain confidence in their ability to share their WordPress knowledge in a WordCamp session.</p>\n<p>The working group behind this initiative will be meeting regularly to discuss and plan how they can help local communities to train speakers for WordCamps and other events.</p>\n<p>To get involved in this initiative, you can join the meetings at 5pm UTC every other Wednesday in the #community-team channel of the<a href=\"https://make.wordpress.org/chat/\"> Making WordPress Slack group</a>.</p>\n<hr class=\"wp-block-separator\" />\n<h2>Further Reading:</h2>\n<ul>\n<li><a href=\"https://2017.us.wordcamp.org/\">WordCamp US 2017</a> is happening on December 1-3 in Nashville, with the annual State of the Word talk happening on Saturday afternoon — <a href=\"https://2017.us.wordcamp.org/live-stream/\">the live stream of the entire event is available to view for free</a>.</li>\n<li><a href=\"https://xwp.co/tide-a-path-to-better-code-across-the-wordpress-ecosystem/\">Tide</a>, a new service from XWP designed to help users make informed plugin choices, is due to launch at WordCamp US.</li>\n<li>Gutenberg development is continuing rapidly, with <a href=\"https://make.wordpress.org/core/2017/11/28/whats-new-in-gutenberg-28th-november/\">a packed new release</a> and a focus on <a href=\"https://make.wordpress.org/test/2017/11/22/testing-flow-in-gutenberg/\">usability testing</a>.</li>\n<li>After some discussion among the community, <a href=\"https://make.wordpress.org/community/2017/11/10/discussion-micro-regional-wordcamps/\">a new type of micro-regional WordCamp</a> is going to be introduced into the global WordCamp program.</li>\n</ul>\n<p><em></em></p>\n<p><em>If you have a story we should consider including in the next “Month in WordPress” post, please <a href=\"https://make.wordpress.org/community/month-in-wordpress-submissions/\">submit it here</a>.</em></p>\n<p><em></em></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 01 Dec 2017 11:00:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Hugh Lashbrooke\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"BuddyPress: BuddyPress 2018 Survey\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"https://buddypress.org/?p=269296\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://buddypress.org/2017/12/buddypress-2018-survey/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:630:\"<p>What would you like BuddyPress to focus on in 2018? The core team has ideas of where BuddyPress can expand on and your input is important to harness the time and resources of an all-volunteer crew.</p>\n<p>The survey will take 10-15 minutes to complete. Be assured that we will not publish your name, email address, nor IP address when we post the results of this survey at BuddyPress.org.</p>\n<p>Thank you for your time and cooperation. Your feedback will help us improve BuddyPress for you.</p>\n<p>=&gt;  <strong><a href=\"https://mercime.polldaddy.com/s/buddypress-2018-survey\">Take the 2018 BuddyPress Survey</a></strong></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 01 Dec 2017 10:26:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"@mercime\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: Gutenberg 1.8 Adds Greater Extensibility for Plugin Developers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76855\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"https://wptavern.com/gutenberg-1-8-adds-greater-extensibility-for-plugin-developers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3668:\"<p><a href=\"https://make.wordpress.org/core/2017/11/28/whats-new-in-gutenberg-28th-november/\" rel=\"noopener\" target=\"_blank\">Gutenberg 1.8</a> was released this week with several notable improvements that will give plugin developers more flexibility in extending the editor. It introduces <a href=\"https://github.com/WordPress/gutenberg/pull/3668\" rel=\"noopener\" target=\"_blank\">block templates</a>, which developers can use when registering a new custom post type. The block templates define a set of pre-configured blocks that will initialize when a user creates a new post. In the example below, Gutenberg lead engineer Matias Ventura demonstrates what a block template for a book custom post type might look like.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/block-template-book.gif?ssl=1\"><img /></a></p>\n<p>This release also <a href=\"https://github.com/WordPress/gutenberg/pull/3456\" rel=\"noopener\" target=\"_blank\">improves the design of the tools menu</a> (toggled by the ellipses at the top of the editor) to have a more lightweight UI that will lend itself better to displaying items added by extensions in the future. The new design displays multiple menu items as a radio group where the selected item shows a checkmark, an approach that Gutenberg designers found to be more intuitive after some research.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-29-at-10.02.09-PM.png?ssl=1\"><img /></a></p>\n<p>Version 1.8 adds the ability for developers to <a href=\"https://github.com/WordPress/gutenberg/pull/3577\" rel=\"noopener\" target=\"_blank\">filter allowed block types</a> by specifying an array of type names that can be shown in the inserter component. This capability paves the way for block nesting where developers can define allowed children types. It also allows custom post types to specify which blocks are allowed or restricted, which will be useful for keeping CPTs lean as Gutenberg already has a large number of block types.</p>\n<p>The release also <a href=\"https://github.com/WordPress/gutenberg/pull/3554\" rel=\"noopener\" target=\"_blank\">improves meta box compatibility</a> with a fallback to the classic editor if Gutenberg detects that the meta box is unsupported. Plugin authors can now explicitly declare Gutenberg incompatibility when registering meta boxes, which will trigger a warning to the end user that explains which meta boxes have caused the fallback to the classic editor.</p>\n<p>In addition to all the improvements for extending Gutenberg, version 1.8 makes many small design tweaks, including <a href=\"https://github.com/WordPress/gutenberg/pull/3054\" rel=\"noopener\" target=\"_blank\">updated color pickers</a> with color indications and collapsible panels, <a href=\"https://github.com/WordPress/gutenberg/pull/3563\" rel=\"noopener\" target=\"_blank\">updated icon and tooltip</a> for table of contents menu, and a new <a href=\"https://github.com/WordPress/gutenberg/pull/3483\" rel=\"noopener\" target=\"_blank\">contrast checker</a> for paragraph color options. It also <a href=\"https://github.com/WordPress/gutenberg/pull/3632\" rel=\"noopener\" target=\"_blank\">puts block actions back on the block level</a> for the default, while still preserving the option to change it to a fixed toolbar at the top of the screen.</p>\n<p>For a full list of all the changes in version 1.8, check out the <a href=\"https://make.wordpress.org/core/2017/11/28/whats-new-in-gutenberg-28th-november/\" rel=\"noopener\" target=\"_blank\">release post</a> and the <a href=\"https://wordpress.org/plugins/gutenberg/#developers\" rel=\"noopener\" target=\"_blank\">changelog</a> on WordPress.org.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Nov 2017 17:23:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"WPTavern: WPWeekly Episode 296 – Gutenberg, Telemetry, Calypso, and More With Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=76917&preview=true&preview_id=76917\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"https://wptavern.com/wpweekly-episode-296-gutenberg-telemetry-calypso-and-more-with-matt-mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1249:\"<p>In this episode, <a href=\"https://jjj.blog/\">John James Jacoby</a> and I are joined by <a href=\"https://ma.tt/\">Matt Mullenweg</a>, co-creator of the WordPress project and CEO of Automattic. We discussed a wide range of topics including, his role on the board of directors at GitLab, Telemetry or data-usage gathering in WordPress, and the WordPress Growth Council.</p>\n<p>We learned what&#8217;s happening with the Mobile teams inside Automattic, the future of Calypso, and the role of Pressable as a testing bed. Last but not least, we find out how beneficial joining HackerOne has been for WordPress and why WordPress.com finally allowed the installation of third-party themes and plugins through its Business Plan.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, December 13th 3:00 P.M. Eastern</p>\n<p>Subscribe to <a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\">WordPress Weekly via Itunes</a></p>\n<p>Subscribe to <a href=\"https://www.wptavern.com/feed/podcast\">WordPress Weekly via RSS</a></p>\n<p>Subscribe to <a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\">WordPress Weekly via Stitcher Radio</a></p>\n<p><strong>Listen To Episode #296:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Nov 2017 04:40:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WPTavern: WordPress 4.9.1 Released, Fixes Page Template Bug\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76879\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wptavern.com/wordpress-4-9-1-released-fixes-page-template-bug\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1473:\"<p>WordPress 4.9.1 <a href=\"https://wordpress.org/news/2017/11/wordpress-4-9-1-security-and-maintenance-release/\">is available</a> for download and is a maintenance and security release. This release addresses four security issues in WordPress 4.9 and below that could potentially be used as part of a multi-vector attack. According to the release notes, the following changes have been made to WordPress to protect against these vulnerabilities.</p>\n<ol>\n<li>Use a properly generated hash for the <code>newbloguser</code> key instead of a determinate substring.</li>\n<li>Add escaping to the language attributes used on <code>html</code> elements.</li>\n<li>Ensure the attributes of enclosures are correctly escaped in RSS and Atom feeds.</li>\n<li>Remove the ability to upload JavaScript files for users who do not have the <code>unfiltered_html</code> capability.</li>\n</ol>\n<p><a href=\"https://twitter.com/0x62626262\">Rahul Pratap Singh</a> and John Blackbourn are credited with responsibly disclosing the vulnerabilities. In addition to the changes above, 4.9.1 fixes eleven bugs, including the Page Template issue <a href=\"https://wptavern.com/workarounds-for-the-page-template-bug-in-wordpress-4-9\">we wrote about</a> last week. Many sites have already updated to 4.9.1 automatically. To see a list of detailed changes, check out <a href=\"https://make.wordpress.org/core/2017/11/28/wordpress-4-9-1-scheduled-for-november-29th/\">this post</a> on Make WordPress Core.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Nov 2017 04:07:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"WPTavern: Distributor Plugin Now in Beta: A New WordPress Content Syndication Solution from 10up\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76871\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:106:\"https://wptavern.com/distributor-plugin-now-in-beta-a-new-wordpress-content-syndication-solution-from-10up\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6117:\"<p>10up published a <a href=\"https://10up.com/blog/2017/distributor-plugin/\" rel=\"noopener\" target=\"_blank\">preview of its Distributor plugin</a> today, a new solution for syndicating content across WordPress multisite networks and the web. The <a href=\"https://distributorplugin.com/\" rel=\"noopener\" target=\"_blank\">plugin</a>, which the company plans to release for free, is currently in final closed beta. It enables content managers to either &#8220;push&#8221; or &#8220;pull&#8221; content to/from sites where they have permission to publish.</p>\n<a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/distributor-push-screenshot.jpg?ssl=1\"><img /></a>image credit: <a href=\"https://10up.com/blog/2017/distributor-plugin/\">10up</a>\n<p>Distributor includes the ability for editors to make changes to the original post and have linked copies automatically inherit the changes. This includes post content, post meta (custom fields), and taxonomy terms. It also ensures that content is SEO-friendly by providing canonical links that prevent duplicate content issues.</p>\n<p>The plugin differs from many <a href=\"https://wordpress.org/plugins/search/syndicate/\" rel=\"noopener\" target=\"_blank\">existing content syndication solutions</a>, which traditionally make use of RSS or XML/RPC, in that it is built using the <a href=\"https://developer.wordpress.org/rest-api/\" rel=\"noopener\" target=\"_blank\">REST API</a>.</p>\n<p>&#8220;The main technical advantage of the REST API is that it’s a &#8216;standard&#8217; inside core for sharing information across sites,&#8221; 10up President Jake Goldman said. &#8220;Outside of multisite, we never even considered another approach. It is worth saying that you do need Distributor installed on both &#8216;ends&#8217; for all of its features to work across the REST API &#8211; we need to extend the REST API a bit to get everything to pull across (plus the handling of &#8216;linked&#8217; copies).&#8221;</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/distributor-pull-screenshot.jpg?ssl=1\"><img /></a></p>\n<p>Goldman said that although &#8220;syndication&#8221; means many different things to different people, the &#8220;classic&#8221; use case of simply pulling from a source, such as ingesting content from a newswire, is not exactly the use case for Distributor. He said the team behind the plugin is perhaps more excited about the &#8220;push&#8221; implementation. In building their own solution, 10up also incorporated its trademark lean/streamlined UI, as many existing solutions are more complicated to use.</p>\n<p>&#8220;We’re definitely aware that there are other takes at a good content sharing workflow,&#8221; Goldman said. &#8220;We even helped Automattic refactor their solution a few years ago, which they use on VIP. We took a bit of inspiration from that project, including the modular &#8216;connection&#8217; types. In earnest, when trying to help our clients find solutions that were intuitive, extensible, and engineered to an enterprise grade, we just couldn’t endorse any of the options we found. It’s more a UX problem &#8211; clunky workflows, overwhelming interfaces, feature overload (I prefer a certain simplicity) &#8211; than anything, though we also have concerns about how modular / customizable some of the other solutions are.&#8221;</p>\n<h3>10up Plans to Release Distributor on WordPress.org Following the Closed Beta</h3>\n<p>10up currently has several clients using Distributor, including large publishers with several properties/magazines/newspapers, as well as large technology businesses using it for their news and media features across a network of sites. The plugin is in final closed beta but 10up is granting early access to those with interesting use cases.</p>\n<p>&#8220;We’re casting a pretty broad net in terms of &#8216;appropriate&#8217; use cases for the beta; in fact, we’re hoping that broader beta testing will open our eyes to great use cases within the scope of its purpose that we hadn’t  considered,&#8221; Goldman said. &#8220;We’ve already heard from some very large publishers, some smaller digital publishers, universities, public school systems, some enterprises with multiple properties, agencies interested in staging content, and just engineers who own multiple sites that share content &#8211; we’re excited about all of these use cases!&#8221;</p>\n<p>Goldman said his team is most curious to see Distributor applied to use cases that aren&#8217;t simply &#8220;news and publishing,&#8221; including CRMs and product businesses with multiples sites that share content. 10up has not yet tested specific plugins for full compatibility with Distributor, but Goldman said pre-version 1.0, it should work with any plugin that adds custom post types and fields/taxonomies &#8220;the WordPress way.&#8221;</p>\n<p>&#8220;In fact, Distributor checks to see which sites support the same post type and terms before it offers a list of sites you can &#8216;distribute&#8217; content to (so you can’t &#8216;distribute&#8217; a WooCommerce product to a site not running WooCommerce),&#8221; he said. Selling the same products across multiple stores, with automatically updating inventory and price changes, is just one of the many interesting use cases for Distributor.</p>\n<p>Goldman said the team anticipates taking the plugin out of beta and putting it on WordPress.org by mid to late Q1 of 2018, in approximately 2-3 months, depending on feedback from testers. 10up does not currently have a plan to monetize the plugin.</p>\n<p>&#8220;I never want to rule out that there are &#8216;eventually&#8217; opportunities for commercialization, but I can honestly say that isn’t anywhere on our roadmap or consideration set at the moment,&#8221; Goldman said.</p>\n<p>Those who want to get in on the Distributor beta before it is publicly available can <a href=\"https://distributorplugin.com/\" rel=\"noopener\" target=\"_blank\">sign up on the plugin&#8217;s website </a>with a quick explanation of your use case. 10up will send a copy of the plugin for testing.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Nov 2017 23:19:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"Dev Blog: WordPress 4.9.1 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5215\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://wordpress.org/news/2017/11/wordpress-4-9-1-security-and-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4220:\"<p>WordPress 4.9.1 is now available. This is a <strong>security and maintenance release</strong> for all versions since WordPress 3.7. We strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.9 and earlier are affected by four security issues which could potentially be exploited as part of a multi-vector attack. As part of the core team&#x27;s ongoing commitment to security hardening, the following fixes have been implemented in 4.9.1:</p>\n<ol>\n<li>Use a properly generated hash for the <code>newbloguser</code> key instead of a determinate substring.</li>\n<li>Add escaping to the language attributes used on <code>html</code> elements.</li>\n<li>Ensure the attributes of enclosures are correctly escaped in RSS and Atom feeds.</li>\n<li>Remove the ability to upload JavaScript files for users who do not have the <code>unfiltered_html</code> capability.</li>\n</ol>\n<p>Thank you to the reporters of these issues for practicing <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible security disclosure</a>: <a href=\"https://twitter.com/0x62626262\">Rahul Pratap Singh</a> and John Blackbourn.</p>\n<p>Eleven other bugs were fixed in WordPress 4.9.1. Particularly of note were:</p>\n<ul>\n<li>Issues relating to the caching of theme template files.</li>\n<li>A MediaElement JavaScript error preventing users of certain languages from being able to upload media files.</li>\n<li>The inability to edit theme and plugin files on Windows based servers.</li>\n</ul>\n<p><a href=\"https://make.wordpress.org/core/2017/11/28/wordpress-4-9-1-scheduled-for-november-29th/\">This post has more information about all of the issues fixed in 4.9.1 if you&#x27;d like to learn more</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.9.1</a> or venture over to Dashboard → Updates and click \"Update Now.\" Sites that support automatic background updates are already beginning to update automatically.</p>\n<p>Thank you to everyone who contributed to WordPress 4.9.1:</p>\n<p><a href=\"https://profiles.wordpress.org/schlessera/\">Alain Schlesser</a>, <a href=\"https://profiles.wordpress.org/afercia/\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/la-geek/\">Angelika Reisiger</a>, <a href=\"https://profiles.wordpress.org/blobfolio/\">Blobfolio</a>, <a href=\"https://profiles.wordpress.org/bobbingwide/\">bobbingwide</a>, <a href=\"https://profiles.wordpress.org/chetan200891/\">Chetan Prajapati</a>, <a href=\"https://profiles.wordpress.org/dd32/\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90/\">Dominik Schilling (ocean90)</a>, <a href=\"https://profiles.wordpress.org/edo888/\">edo888</a>, <a href=\"https://profiles.wordpress.org/erich_k4wp/\">Erich Munz</a>, <a href=\"https://profiles.wordpress.org/flixos90/\">Felix Arntz</a>, <a href=\"https://profiles.wordpress.org/mista-flo/\">Florian TIAR</a>, <a href=\"https://profiles.wordpress.org/pento/\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/ibenic/\">Igor Benic</a>, <a href=\"https://profiles.wordpress.org/jfarthing84/\">Jeff Farthing</a>, <a href=\"https://profiles.wordpress.org/jbpaul17/\">Jeffrey Paul</a>, <a href=\"https://profiles.wordpress.org/jeremyescott/\">jeremyescott</a>, <a href=\"https://profiles.wordpress.org/joemcgill/\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/johnbillion/\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/johnpgreen/\">johnpgreen</a>, <a href=\"https://profiles.wordpress.org/ryelle/\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/lenasterg/\">lenasterg</a>, <a href=\"https://profiles.wordpress.org/clorith/\">Marius L. J.</a>, <a href=\"https://profiles.wordpress.org/melchoyce/\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/mariovalney/\">Mário Valney</a>, <a href=\"https://profiles.wordpress.org/natacado/\">natacado</a>, <a href=\"https://profiles.wordpress.org/odysseygate/\">odyssey</a>, <a href=\"https://profiles.wordpress.org/precies/\">precies</a>, <a href=\"https://profiles.wordpress.org/stodorovic/\">Saša</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">Sergey Biryukov</a>, and <a href=\"https://profiles.wordpress.org/westonruter/\">Weston Ruter</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Nov 2017 20:33:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"John Blackbourn\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: Four Things I’d Like to See in This Year’s State of the Word\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76830\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://wptavern.com/four-things-id-like-to-see-in-this-years-state-of-the-word\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2724:\"<p>This weekend, WordPressers from far and wide will descend upon Nashville, TN, for WordCamp US. One of the highlights of the event is Matt Mullenweg&#8217;s <a href=\"https://ma.tt/2016/12/state-of-the-word-2016/\">State of the Word</a>. Last year, Mullenweg shared a variety of statistics, made a few announcements, and plotted a new course for WordPress development.</p>\n<p>As the event draws near, here are some things I&#8217;d like to see addressed in this year&#8217;s State of the Word.</p>\n<h2>Will There Be A Renewed Effort to Make Calypso Plugin Aware?</h2>\n<p>During the 2016 State of the Word, Mullenweg announced that Calypso became plugin aware.</p>\n<img />Plugin Aware Calypso\n<p>The idea was that plugins that are actively installed on more than 1 million sites could participate in an experimental program that would add meta box support and other plugin specific features to Calypso. To this day, this has not materialized and I&#8217;d like to know what happened and if there will be a renewed effort in 2018.</p>\n<h2>An Update on WordPress Foundation Supported Initiatives</h2>\n<p>Last year, we learned that WordCamp Central became its own Public Benefit Corporation while the WordPress Foundation maintained its non-profit status. In addition, the Foundation announced support for like-minded non-profits such as, Hack the Hood, Internet Archive, and Black Girls CODE.</p>\n<p>I&#8217;d like to know how much money the Foundation has contributed to these causes and if any progress has been made on providing educational workshops in underdeveloped countries.</p>\n<h2>An Update on WordPress&#8217; Development/Release Strategy</h2>\n<p>A year into WordPress&#8217; new development and release strategy, I&#8217;d like to know what challenges he and the team have faced and overcome. I&#8217;d also like to know if the results he has seen thus far warrant continuing the experiment in 2018.</p>\n<h2>Take an Opportunity to Explain What Gutenberg Really Is</h2>\n<p>Last year, Mullenweg surprised the community by announcing that the WordPress post editor would be revamped. Since then, we&#8217;ve learned that the project&#8217;s <a href=\"https://ma.tt/2017/08/we-called-it-gutenberg-for-a-reason/\">name is Gutenberg</a> and it&#8217;s about more than just the editor. I&#8217;d like to see Mullenweg take this unique opportunity to provide a deeper explanation into what the project is and why it&#8217;s pivotal for WordPress&#8217; continued success.</p>\n<hr />\n<p>This year&#8217;s State of the Word will be presented on Saturday, December 2nd, at 4PM Eastern. If you can&#8217;t see it in-person, you can <a href=\"https://2017.us.wordcamp.org/live-stream/\">watch it for free</a> via the livestream.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Nov 2017 17:38:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"HeroPress: WordPress Gave Me the Perfect Identity\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=2294\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:136:\"https://heropress.com/essays/wordpress-gave-perfect-identity/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-gave-perfect-identity\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:17701:\"<img width=\"960\" height=\"480\" src=\"https://heropress.com/wp-content/uploads/2017/11/112917-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: I have fallen head over heels in love with WordPress and I am excited.\" /><h3>How it all began…</h3>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/myself.jpg\"><img class=\"size-medium wp-image-2305\" src=\"https://heropress.com/wp-content/uploads/2017/11/myself-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></a>I just love this picture of myself..hehehe\n<p>I remember when cybercafés started trending in Nigeria; I had just finished high school and was awaiting my results for admittance into the university. I would spend not less than 10 hours surfing the internet every day, all my pocket money went into buying bulk time at cafes. My first email was opened in 2002 on my 1st attempt to surf the internet. Spending my day at cafes continued till I left the university after which I bought a desktop computer and a modem. You can imagine my excitement as being a proud owner of a PC even though it was a desktop PC.</p>\n<p>You see, my first degree was in Philosophy. I remember my dad asking me if I was sure about that course because prior to my senior school leaving exams I had always said I was going to study business administration. What business administration was, to be honest, I had no idea, I only wanted it because I had the impression it was a cool course and I would be a corporate employee in a big firm strutting around in my skirt suit looking all glamorous.</p>\n<h3><a href=\"https://heropress.com/wp-content/uploads/2017/11/i-in-skirts2.jpg\"><img class=\"size-medium wp-image-2310 aligncenter\" src=\"https://heropress.com/wp-content/uploads/2017/11/i-in-skirts2-300x300.jpg\" alt=\"\" width=\"300\" height=\"300\" /></a>Funny right?</h3>\n<p>Anyway i always had a thing for Philosophy so you can imagine my enthusiasm when I discovered Philosophy was a course of study, of course I opted to study Philosophy in 2004 and graduated in 2008. However my love for the internet did not reduce by the way. I not only surfed the internet but I spent a lot of time freelancing and testing my skills as a ghost writer on different freelancing sites. I also went into blogging as well in 2009. I tried using blogger, hubpages and WordPress, but oh my, I found WordPress so complicated for me because I did not understand how it worked so I stuck with blogger and hubpages.</p>\n<h3>Growing up as a Timid but Curious Cat&#8230;</h3>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/i-and-my-lil-brother.jpg\"><img class=\"wp-image-2306 size-medium\" src=\"https://heropress.com/wp-content/uploads/2017/11/i-and-my-lil-brother-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></a>I and my little brother. Haa of course we all grown now. Haha\n<p>During my younger years and even up to two years ago I was always a shy person deep down in my mind, but alas quite a number of people thought I was bold. This might be because 99.9% of my friends were males, or maybe not. Perhaps this could also be because I grew up with 3 brothers and no sister. It’s quite shocking though that they thought that way because it is only quite recent that I cultivated the courage to speak my mind. Prior to a year ago (2016), expressing my feelings by speaking the words out was a <em>herculean task</em>; this was what led me to starting a personal blog around 2009. I needed to let out my feelings and since I dared not speak them out, I blogged them.</p>\n<p>Blogging gave me a voice and a medium to express my thoughts and I became a better writer with each passing script. After my one year government mandated youth service in 2010 which is required of every Nigerian citizen after a bachelor’s degree, I bought an HP Mini Laptop. Can you imagine my excitement at owning a personalized computer? This I could carry around, my happiness knew no bounds.</p>\n<p>In 2010 thanks to the social network Facebook I met an Uncle of mine and we became BFF’s {Best Friends Forever} even though we had never met physically before. He was in Rome at the period we met studying Media and Communication. He came back home in 2012 but his job as a Salesian Brother took him to Ghana. Of course I made sure to keep a date with him when he came back home briefly in 2012 before heading to resume in Ghana. We had cake and ice cream at my favourite café that day.</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/i-and-bff-unc-sam.jpg\"><img class=\"size-medium wp-image-2303\" src=\"https://heropress.com/wp-content/uploads/2017/11/i-and-bff-unc-sam-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>I and my BFF Uncle..Hehe\n<h3>Rediscovering WordPress…</h3>\n<p>Then came 2015, I ended a horrid relationship and i lost my best friend female; I mean I thought I was in love, but alas I had loved the idea of loving a person. I was not happy and I wanted a breath of fresh air and a change of environment. At that period, I had obtained a postgraduate diploma in mass communication and I had started a Masters Degree in Information Management and my required 3 months internship was coming up that summer. I decided to volunteer in Ghana at the headquarters of the <a href=\"https://sdbafw.org\" target=\"_blank\" rel=\"noopener\">Salesians of Don Bosco in West Africa {SDBAFW}</a> where my Uncle was. My time there was beyond awesome and a new beautiful story in my life chapter.</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/at-sdbafw-in-ashaiman.jpeg\"><img class=\"size-medium wp-image-2309\" src=\"https://heropress.com/wp-content/uploads/2017/11/at-sdbafw-in-ashaiman-300x300.jpeg\" alt=\"\" width=\"300\" height=\"300\" /></a>I met a lot of amazing people and made new friends within the SDB community in Ashaiman, Ghana\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/i-and-volunteers-at-kakum.jpg\"><img class=\"size-medium wp-image-2308\" src=\"https://heropress.com/wp-content/uploads/2017/11/i-and-volunteers-at-kakum-300x199.jpg\" alt=\"\" width=\"300\" height=\"199\" /></a>i and other volunteers and great friends at Kakum National Park in Cape Coast, Ghana\n<p>I worked in the communications department at the SDBAFW province. My Uncle knew how much I loved blogging and he had been my writing tutor for a while, so one day he asked why I was not blogging on WordPress. Of course I went on about how difficult and complicated the platform was, he sighed, told me their organization website was built on WordPress and he gave me a folder with tutorial videos made by <a href=\"https://twitter.com/mor10\">Morten Rand-Hendriksen</a> for beginners to go watch.</p>\n<p>After two weeks of watching those videos, my life changed. You see prior to 2015 I treated my time online as a purely personal affair because I was just passionate about being online right, exploring, freelancing and discovering. I never thought it would become something I could make a full time career out of. I was still pursuing a career in Human Resources since managing people was another thing I was great at. In late 2015 I had joined a series of online Facebook groups and I was wowed by one in particular run by John Obidi (<a href=\"https://web.facebook.com/groups/smartbcamp\" target=\"_blank\" rel=\"noopener\">SmartBCamp</a>) because I saw a lot of people earning an income from things I did and knew for the fun of it. I found myself asking what planet I had been living on and why I had not made my passion my business.</p>\n<p>Hence I made a decision in 2016 to make my passion my business, I decided to move to Lagos since I was done with my Master’s coursework and focus on this new journey of mine. Meanwhile in December of 2015, a woman had contacted me saying she loved how my blog UX on WordPress looked and if I could work on hers.</p>\n<blockquote><p>As at then I didn’t even know the difference between wordpress.com and wordpress.org so I started googling which is something I’m also great at.</p></blockquote>\n<p>I took on the task of redesigning her website and I started troubleshooting all the current issues she had on her site, I read up a lot, I visited the WordPress.Org/showcase and was wowed with all the good things I could do with WordPress.org, I especially loved Snoop Doggs website and told myself my goal would be to be able to make a project that would look like that one day. But of course the first few sites I designed were horrible, when I look back at them now I wonder what was going on in my head when I designed them.</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/my-typical-day-in-gh.jpg\"><img class=\"size-medium wp-image-2302\" src=\"https://heropress.com/wp-content/uploads/2017/11/my-typical-day-in-gh-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>A typical day for me in front of my PC\n<p>Alas I had great online plans for the year 2016 but up until the middle of year 2016, I had a series of bad experiences that sent me back to the stone age and my parents house; I blogged about it <a href=\"https://mojispeaks.com/2017/01/09/my-2016-in-retrospect/\">here</a>. They were bad experiences alright, but a lot of good came out of them. I got saved bit by bit and found my rhythm again. Meanwhile I was already <em><strong>falling in love with WordPress</strong></em> so I decided to look for ways to give back. That&#8217;s when I stumbled upon make.wordpress.org and discovered there were so many ways to give back. I was not a programmer alright so what will I go to do in Core or CLI or any other similar place, I automatically went for the community.</p>\n<h3>Building the Nigerian WordPress Community…</h3>\n<p>In November 2016 I made one of the best decisions that turned my life around. I was fed up because the entire year had not turned out in any way I had planned in December 2015 of the previous year. So I made an interesting decision to turn off my data and go to sleep by 10pm. Trust me this was a big decision for me before I would usually freak out if my data wasn’t functioning or if my phone battery died. Anyway during this period I had moved back to my parents’ right and I needed to work in a quiet room because I so much needed to focus.</p>\n<p>Also by now I had discovered there was a WordPress Meetup community in Lagos but when I applied I did so for Ogun which is my state, but during my conversations with WordPress Global they had requested if I would be willing to join the Lagos WordPress Group, at first I was a little hesitant because Lagos is an hour drive from my town, I don’t have a car, so that adds another one hour. Surely you can&#8217;t live in Lagos and not know Lagos and traffic are best buddies so that adds another hour to my trip. Without thinking too much about it I agreed. Looking back today I do not regret it one bit.</p>\n<blockquote><p>This started my journey as a WordPress Lagos Community Co-organizer and a Community Deputy.</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/600_455477788.jpeg\"><img class=\"size-medium wp-image-2317\" src=\"https://heropress.com/wp-content/uploads/2017/11/600_455477788-300x225.jpeg\" alt=\"\" width=\"300\" height=\"225\" /></a>the first meetup i had as a Lagos co-organizer</blockquote>\n<p>This is 2017 right, I must not fail to mention it to you that my income in the last one year has come solely from WordPress Web Design. Today the Nigerian WordPress has grown, still growing definitely, the Lagos WordPress Meetup group has also grown and we have had 8 Meetups this year. I have made great friends and co-organizers in the community who are dedicated to building and sharing their WordPress knowledge with the community like I am. We are hosting the very first Nigerian <a href=\"https://2018.lagos.wordcamp.org/\">WordCamp in Lagos</a> on March 10 2018 at the Civic Centre in Victoria Island, Lagos. I must not forget to mention that we also now have an Ijebu WordPress Community; that’s my town alright <span class=\"ttfmake-icon mceNonEditable fa\"></span> .</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/3rd-wp-lagos-meetup-2017.jpg\"><img class=\"wp-image-2312 size-full\" src=\"https://heropress.com/wp-content/uploads/2017/11/3rd-wp-lagos-meetup-2017.jpg\" alt=\"\" width=\"299\" height=\"224\" /></a>this was our 4th meetup event this year\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/first-wp-lagos-meetup-2018.jpg\"><img class=\"wp-image-2313 size-medium\" src=\"https://heropress.com/wp-content/uploads/2017/11/first-wp-lagos-meetup-2018-300x169.jpg\" alt=\"\" width=\"300\" height=\"169\" /></a>this was our first meetup event this year\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/600_463289287.jpeg\"><img class=\"wp-image-2316 size-medium\" src=\"https://heropress.com/wp-content/uploads/2017/11/600_463289287-300x225.jpeg\" alt=\"\" width=\"300\" height=\"225\" /></a>our third meetup early this year\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/WPlagos-30th-Sept-Meetup-Photo-1.jpg\"><img class=\"size-medium wp-image-2318\" src=\"https://heropress.com/wp-content/uploads/2017/11/WPlagos-30th-Sept-Meetup-Photo-1-300x199.jpg\" alt=\"\" width=\"300\" height=\"199\" /></a>WPlagos 30th Sept Meetup (5th meetup this year)\n<p>We recently created a <a href=\"https://photos.app.goo.gl/VNx047kS0Bj8u7z63\" target=\"_blank\" rel=\"noopener\">google photos for our past meetups, click here to view them. </a>So tell me why I shouldn’t be grateful? Why I shouldn’t fall in love with WordPress? Because this is all that has happened to me since I met WordPress, <em><strong>I have fallen head over heels in love with WordPress and I am excited.</strong></em></p>\n<h3>What have i gained from WordPress?</h3>\n<ol>\n<li>I overcame my stage fright fully because i have to get in front of the crowd at every meetup to do the introductions and introduce the WordPress communities.</li>\n<li>I attended my first WordCamp in Cape Town, South Africa. <a href=\"https://youtu.be/PE6k8-PLKVk\" target=\"_blank\" rel=\"noopener\">Click here to see my picture story</a>. Coincidentally this was also my first time outside West Africa. I had never been in an aircraft for more than one hour before my trip.</li>\n<li>I have made money from WordPress Web Design Projects, enough to sustain me during my learning period. Still learning everyday.</li>\n<li>I jumped off <a href=\"https://mojispeaks.com/2017/11/19/i-did-jump-off-a-hill-my-wordcamp-cape-town-story/\" target=\"_blank\" rel=\"noopener\">Signal Hill in Cape Town, find post here</a>; next up, sky diving.</li>\n</ol>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/DSC_0246-1.jpg\"><img class=\"size-medium wp-image-2314\" src=\"https://heropress.com/wp-content/uploads/2017/11/DSC_0246-1-300x200.jpg\" alt=\"\" width=\"300\" height=\"200\" /></a>At a WordCamp Cape Town session\n<p><strong>My advice to you from my experience so far…</strong></p>\n<p>Always seek to understand the basics of whatever knowledge you seek&#8230;never jump in too fast, wanting to spiral to the top while ignoring the learning curve. You will crash down effortlessly if you do so and would have learnt nothing.</p>\n<a href=\"https://heropress.com/wp-content/uploads/2017/11/WordPress-Gave-Me-the-Perfect-Identity.png\"><img class=\"size-medium wp-image-2315\" src=\"https://heropress.com/wp-content/uploads/2017/11/WordPress-Gave-Me-the-Perfect-Identity-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>WordPress Gave Me the Perfect Identity Indeed&#8230;I no longer roam the internet..hehehe\n<blockquote>\n<p>The End&#8230;?<br />\nI Don’t Think So&#8230;<br />\nMy Story has Just Begun. <strong>Stay Tuned&#8230;.!</strong></p>\n</blockquote>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: WordPress Gave Me the Perfect Identity\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=WordPress%20Gave%20Me%20the%20Perfect%20Identity&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-gave-perfect-identity%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: WordPress Gave Me the Perfect Identity\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-gave-perfect-identity%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-gave-perfect-identity%2F&title=WordPress+Gave+Me+the+Perfect+Identity\" rel=\"nofollow\" target=\"_blank\" title=\"Share: WordPress Gave Me the Perfect Identity\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/wordpress-gave-perfect-identity/&media=https://heropress.com/wp-content/uploads/2017/11/112917-150x150.jpg&description=WordPress Gave Me the Perfect Identity\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: WordPress Gave Me the Perfect Identity\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/wordpress-gave-perfect-identity/\" title=\"WordPress Gave Me the Perfect Identity\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/wordpress-gave-perfect-identity/\">WordPress Gave Me the Perfect Identity</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Nov 2017 12:00:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Mary Job\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: WordCamp Albuquerque Gears Up for 5th Edition in January 2018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76845\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wptavern.com/wordcamp-albuquerque-gears-up-for-5th-edition-in-january-2018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3644:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-28-at-8.15.51-PM-e1511921930548.png?ssl=1\"><img /></a></p>\n<p><a href=\"https://2018.albuquerque.wordcamp.org/\" rel=\"noopener\" target=\"_blank\">WordCamp Albuquerque</a> is gearing up for its 5th edition January 19-21, 2018, following events held in 2011, 2012, 2013, and 2016. An all-new organizing team is ready to invigorate the Southwestern WordPress community with an exciting array of world-class speakers and educational opportunities for both new and experienced users.</p>\n<p>Lead organizer Alonso Indacochea said the team is expecting to host 300 attendees. Many of them will be coming from New Mexico, Southern Colorado, West Texas, and Arizona.</p>\n<p>&#8220;The southwestern community is interesting because there are a lot of developers doing really interesting tech work, but a lot of it happens in silos due to government secrecy,&#8221; speaker wrangler Sam Hotchkiss said. &#8220;New Mexico has a rich history of technology, from the Manhattan Project and the creation of the first nuclear weapons to the formation of Microsoft, which was founded in Albuquerque in 1975.</p>\n<p>&#8220;We’re trying to pull together that community to connect with each other, and also establish Albuquerque as a WordCamp with consistently high-quality speakers of global renown.&#8221;</p>\n<p>In pursuit of this goal, Hotchkiss has recruited a healthy crop of top quality speakers from the WordPress community. During the Saturday afternoon session, <a href=\"http://chrislema.com/\" rel=\"noopener\" target=\"_blank\">Chris Lema</a>, Vice President of Products and Innovation at <a href=\"https://www.liquidweb.com/\" rel=\"noopener\" target=\"_blank\">Liquid Web</a>, will be interviewing a diverse group of speakers in the main hall, including the following:</p>\n<ul>\n<li>Ashleigh Axios, former Creative Director for the Obama White House and AIGA Board Member</li>\n<li>Sakin Shrestha, Founder of Catch Themes and the main drive behind the vibrant WordPress community in Nepal</li>\n<li>John Maeda, Global Head, Computational Design and Inclusion at Automattic</li>\n<li>Jon Brown, WordPress Nomad</li>\n<li>Alonso Indacochea, WordCamp lead organizer, who had no serious software development experience 5 years ago, went through a local boot camp, and is now CEO of the fastest growing digital agency in New Mexico</li>\n</ul>\n<p>This year WordCamp Albuquerque will feature multiple tracks sorted by topic, beginning with a WordPress Fundamentals track on Friday, January 19.</p>\n<p>&#8220;Foundation Friday is something I’ve seen be really successful at other camps,&#8221; Hotchkiss said. &#8220;It gives people who are new to WP a base of knowledge so that they can go into Saturday feeling confident and ready to learn. Each class on Friday will build on the one before it. Starting from scratch? Show up at 9. Already have a site, but need help handling the layout?  Come at 10:30.&#8221;</p>\n<p>Saturday&#8217;s program will include sessions in the Business, Design, and Development tracks throughout the day, in addition to the planned interviews. A contributor day session is planned for Sunday. The event&#8217;s organizers are still <a href=\"https://2018.albuquerque.wordcamp.org/speakers/\" rel=\"noopener\" target=\"_blank\">accepting speaker applications</a> until midnight on Monday, December 4. They plan to finalize the schedule next week. <a href=\"https://2018.albuquerque.wordcamp.org/attendees/\" rel=\"noopener\" target=\"_blank\">Tickets</a> are on sale now and attendees can elect to purchase one for whatever combination of days they wish to attend.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Nov 2017 02:30:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: Practicing the Pac-Man Rule at WordCamp US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76857\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"https://wptavern.com/practicing-the-pac-man-rule-at-wordcamp-us\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1750:\"<p>With more than 2,000 attendees expected, WordCamp US is one of the largest conferences devoted to WordPress. It&#8217;s a great opportunity to meet a lot of new faces and catch up with familiar ones. If you&#8217;re standing in the hallway at WordCamp US speaking with a group of people and want to encourage others to say hi or be part of the conversation, try this tip <a href=\"https://www.facebook.com/GreatSmokyMountainsAssociation/videos/10155628004363673/\">shared by</a> Jason Cosper called the <a href=\"http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/\">Pac-Man rule</a> written by Eric Holscher.</p>\n<img />photo credit: rbatina <a href=\"http://www.flickr.com/photos/27988337@N00/12081061246\">Random Phone Shots</a> <a href=\"https://creativecommons.org/licenses/by-nc-nd/2.0/\">(license)</a>\n<p>The rule is simple. When standing in a circle, provide an opening for someone to join the group. By standing in an open circle, it gives a passersby explicit permission to join the group and limits the appearance of cliques. I didn&#8217;t realize how standing in a closed circle can be off-putting to those wanting to introduce themselves or chime in until learning about this rule.</p>\n<p>In addition to the Pac-Man rule, <a href=\"https://twitter.com/bobWP/status/935576711252533248\">Bob Dunn suggests</a> using eye contact to invite people to the group. <a href=\"https://twitter.com/mor10/status/935582280164065280\">Morten Rand-Hendriksen suggests</a> that if you&#8217;re looking to start a conversation with someone new, start with groups of two people as they likely know each other and want to talk to new people. I&#8217;ll be practicing the Pac-Man rule this weekend and I encourage other attendees to do so as well.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Nov 2017 21:06:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: Gutenberg Team Is Ramping Up Usability Testing at WordCamp US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76807\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wptavern.com/gutenberg-team-is-ramping-up-usability-testing-at-wordcamp-us\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4848:\"<p>The Gutenberg Team will have a usability testing station set up at WordCamp US where attendees can participate in a round of pre-set tests that focus on the writing flow. Testers will answer a short survey that includes their prior WordPress experience level, age, and device used. Volunteers will get participants set up with a testing site and will start the screen recording app.</p>\n<p>Testers will be asked to create a post based on the content shown in an image. There are three different images, which require the user to perform actions such as adding images, embedding media, creating unordered lists, adding quotes, and other basic content creation tasks. In order to segment results, the usability tests have been divided into <a href=\"https://drive.google.com/file/d/0B4BHP7ZnNw32RWJRa2diODFXVGs/view\" rel=\"noopener\" target=\"_blank\">beginner</a>, <a href=\"https://drive.google.com/file/d/0B4BHP7ZnNw32bVpyd2xaaFVVMWM/view\" rel=\"noopener\" target=\"_blank\">intermediate</a>, and <a href=\"https://drive.google.com/file/d/0B4BHP7ZnNw32R3U0ZkJRVXBySWM/view\" rel=\"noopener\" target=\"_blank\">advanced</a> level images.</p>\n<a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-27-at-10.23.35-PM.png?ssl=1\"><img /></a>Advanced level task image for Gutenberg usability testing\n<p>After completing the test, participants will be asked to answer a few followup questions, such as &#8220;Did the task take longer or shorter than you expected?&#8221; and &#8220;Are you more or less likely to use the Gutenberg editor in the future?&#8221;</p>\n<p>&#8220;This is the second round of usability testing scripts — we tried out the first batch of scripts at WordCamp Milano, and made some adjustments for clarity,&#8221; Gutenberg design lead Tammie Lister said. &#8220;As a result of testing, we moved the toolbar on blocks to not be fixed and back to the block. At Milano, we tested the tests.&#8221;</p>\n<p>As the result of these tests and other prior feedback, Lister <a href=\"https://github.com/WordPress/gutenberg/issues/3570\" rel=\"noopener\" target=\"_blank\">recommended the default position of the toolbar to be fixed to the block</a>.</p>\n<p>Anna Harrison, UX lead at Ephox (the makers of tinyMCE), has been instrumental in helping with the efforts around testing and writing scripts. She also offered <a href=\"https://github.com/WordPress/gutenberg/issues/3570#issuecomment-345879950\" rel=\"noopener\" target=\"_blank\">feedback on the ticket</a>, referencing comments from the previous discussion on the issue:</p>\n<blockquote><p>A fixed [docked to top] toolbar solution has several complications. Firstly, we break accessibility. I won&#8217;t reiterate the discussion, as it&#8217;s well articulated above. Secondly, we break things independent of accessibility &#8211; I ran user tests on something quite similar to this last year, and we discovered that <a href=\"https://go.tinymce.com/blog/from-the-ux-desk-road-testing-inline-image-editing/\" rel=\"noopener\" target=\"_blank\">disconnecting the toolbar from the point of action resulted in 100% user test fails</a>.</p></blockquote>\n<p>Gutenberg version 1.8 will change the default back to displaying block actions on the block level, although the option to change it to a fixed toolbar at the top of the screen will still be available. This change is one example of how usability testing is shaping Gutenberg&#8217;s development. WordCamp US is an opportunity for the team to collect a host of new testing data in one place.</p>\n<p>Lister said all the data that is collected will be processed by volunteers on the make/test team, but the team is still small and they could use more volunteers to work on this effort.</p>\n<p>&#8220;The turnaround time on processing the data we collect really depends on how many volunteers are available to work on it,&#8221; Lister said. &#8220;It also depends on if it’s a bug reported &#8211; bugs are easier to get fixed right away. If the data indicates an area where we need to investigate more, we’ll do that. The results of the testing will be published on make.wordpress.org/test.&#8221;</p>\n<p>Lister said the team is hoping to reach a wider variety of WordPress users at WCUS this year, from all backgrounds and careers. The testing booth offers an opportunity for anyone to contribute to the future of WordPress, regardless of your experience level or familiarity with the software. The team is also eager to broaden its testing field by recruiting non-WordPress users as well. If you can&#8217;t make it to WordCamp US, you can still <a href=\"https://make.wordpress.org/test/2017/11/22/testing-flow-in-gutenberg/\" rel=\"noopener\" target=\"_blank\">contribute to Gutenberg by taking and administering usability tests</a> on your own with the help of the instructions posted on the make.wordpress.org/test site.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Nov 2017 16:55:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"WPTavern: Delete Me WordPress Plugin Assists Website Owners in Granting the GDPR Right to be Forgotten\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76474\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:113:\"https://wptavern.com/delete-me-wordpress-plugin-assists-website-owners-in-granting-the-gdpr-right-to-be-forgotten\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4080:\"<a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/eraser.jpg?ssl=1\"><img /></a>photo credit: pj_vanf <a href=\"http://www.flickr.com/photos/48066826@N02/5006945413\">to err is human</a> &#8211; <a href=\"https://creativecommons.org/licenses/by/2.0/\">(license)</a>\n<p>With the EU GDPR compliance deadline just <a href=\"http://www.gdprcountdownclock.com/\" rel=\"noopener\" target=\"_blank\">178 days away</a>, many WordPress site owners are looking for tools that will help them meet the requirements. The regulation expands existing rights of data subjects in several key ways, including (but not limited to) the right to be notified of data breaches, the right to access personal data, the right to be forgotten, and the right to data portability.</p>\n<p>A plugin called <a href=\"https://wordpress.org/plugins/delete-me/\" rel=\"noopener\" target=\"_blank\">Delete Me</a>, by Clinton Caldwell, is one that may be helpful in addressing the Right to be Forgotten. The <a href=\"https://www.eugdpr.org\" rel=\"noopener\" target=\"_blank\">GDPR.org</a> website breaks it down as follows:</p>\n<blockquote><p>Also known as Data Erasure, the right to be forgotten entitles the data subject to have the data controller erase his/her personal data, cease further dissemination of the data, and potentially have third parties halt processing of the data. The conditions for erasure, as outlined in article 17, include the data no longer being relevant to original purposes for processing, or a data subjects withdrawing consent. It should also be noted that this right requires controllers to compare the subjects&#8217; rights to &#8220;the public interest in the availability of the data&#8221; when considering such requests.</p></blockquote>\n<p>The Delete Me plugin takes this one step further for site owners who are comfortable allowing users to delete their own data without having to create a request for it. By default, the delete button displays on the profile.php screen in the admin, but administrators can elect to use a shortcode to display it somewhere else on the frontend.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-27-at-4.54.42-PM.png?ssl=1\"><img /></a></p>\n<p>The plugin will delete the users&#8217; posts, links, and even comments (optional) after the user confirms. The confirmation screen could stand to include more information about what data is being deleted so that the user knows what to expect. However, administrators do have the option to specify this within the JavaScript confirmation dialog. After deletion the user is dumped back out to the homepage by default, but the redirect URL can be configured in the plugin&#8217;s settings page.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-27-at-4.54.21-PM.png?ssl=1\"><img /></a></p>\n<p>Additional configurable settings include the ability to select specific WordPress roles to allow to delete themselves, specify class and style attributes of delete link, enable or disable JavaScript confirm for Shortcode, specify button text, and send an email notification when users delete themselves.</p>\n<p>Delete Me also supports network activation and single site activation for multisite installations. By default, users can only delete themselves and their content from a single site, while other networked sites where they are registered will not be affected. The plugin does include a “Delete From Network” checkbox that administrators can enable to allow users to delete themselves from all sites on the network.</p>\n<p><a href=\"https://wordpress.org/plugins/delete-me/\" rel=\"noopener\" target=\"_blank\">Delete Me</a> is available for free on WordPress.org. I tested the plugin and have confirmed that it works with WordPress 5.0-alpha. It is currently active on more than 2,000 sites. By no means does it satisfy the full requirements of the GDPR, but it provides a decent starting point for site owners who want to make this option available to their users without having to manually fulfill their requests.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Nov 2017 00:08:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"WPTavern: WPWeekly Episode 295 – Turkey With A Side of Gutenberg and Giving Thanks to Open Source\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=76789&preview=true&preview_id=76789\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:106:\"https://wptavern.com/wpweekly-episode-295-turkey-with-a-side-of-gutenberg-and-giving-thanks-to-open-source\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3233:\"<p>I apologize for the delay in getting this episode out to you. In this episode, <a href=\"https://jjj.blog/\">John James Jacoby</a> and I discussed a range of topics, including a caching bug introduced in WordPress 4.9 that causes Page Templates not to display for an hour. We talk about the possibilities of using Gutenberg with WooCommerce and how it could impact product management.</p>\n<p>As is tradition, near the end of the show, we shared what we&#8217;re thankful for. We also shared what listeners are <a href=\"https://twitter.com/jeffr0/status/933101857039200258\">thankful for</a> regarding open source.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://core.trac.wordpress.org/ticket/42573\">This bug</a> is causing some theme developers to rip their hair out. Weston Ruter <a href=\"https://core.trac.wordpress.org/ticket/42573#comment:57\">explains</a> why the change was implemented.<br />\n<a href=\"https://wptavern.com/woocommerce-explores-the-possibilities-and-challenges-for-e-commerce-in-the-gutenberg-era\">WooCommerce Explores the Possibilities and Challenges for E-Commerce in the Gutenberg Era</a><br />\n<a href=\"https://wptavern.com/tailor-page-builder-plugin-discontinued-owners-cite-funding-gutenberg-and-competition\">Tailor Page Builder Plugin Discontinued, Owners Cite Funding, Gutenberg, and Competition</a><br />\n<a href=\"https://wptavern.com/wordcamp-europe-2018-speaker-applications-now-open\">WordCamp Europe 2018 Speaker Applications Now Open</a><br />\n<a href=\"https://wptavern.com/github-launches-security-alerts-for-javascript-and-ruby-projects-python-support-coming-in-2018\">GitHub Launches Security Alerts for JavaScript and Ruby Projects, Python Support Coming in 2018</a></p>\n<h2>Picks of the Week:</h2>\n<p><a href=\"https://wordpress.org/plugins/trigger-happy/\">Trigger Happy</a> developed by Hotsource is a visual scripting tool for WordPress, allowing you to connect plugins and events together using a simple user interface. It currently supports core WordPress functionality, WooCommerce, and Ninja Form.</p>\n<p><a href=\"https://github.com/boogah/big-dummy\">Big dummy</a> is a project for folks who need to emulate an established blog with plenty of content while doing WordPress benchmarking and performance testing.</p>\n<p>There are 2495 posts, 6197 comments, 231 tags, 26 categories, and 10 pages worth of WordPress dummy data, fully ready to import. That&#8217;s 3 (simulated) years worth of content. <i>Note:</i> There are ~1.6 GB of images (courtesy of<a href=\"https://unsplash.com\"> Unsplash</a>) attached to these posts. It&#8217;s a very good idea to import everything <i>but</i> the media in order to avoid timeouts or errors with the WordPress Importer.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, November 29th 3:00 P.M. Eastern</p>\n<p>Subscribe to <a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\">WordPress Weekly via Itunes</a></p>\n<p>Subscribe to <a href=\"https://www.wptavern.com/feed/podcast\">WordPress Weekly via RSS</a></p>\n<p>Subscribe to <a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\">WordPress Weekly via Stitcher Radio</a></p>\n<p><strong>Listen To Episode #295:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Nov 2017 07:54:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"WPTavern: Workarounds for the Page Template Bug in WordPress 4.9\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76785\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://wptavern.com/workarounds-for-the-page-template-bug-in-wordpress-4-9\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2105:\"<p>WordPress 4.9 &#8220;Tipton&#8221; <a href=\"https://wptavern.com/wordpress-4-9-released-with-major-improvements-to-customizer-workflow-updated-code-editors-and-new-core-gallery-widget\">was released</a> last week and although it&#8217;s largely trouble-free, there is one particular issue <a href=\"https://wordpress.org/support/topic/updated-to-4-9-wont-detect-page-template/\">users</a> and <a href=\"https://core.trac.wordpress.org/ticket/42573#comment:75\">developers</a> are running into that&#8217;s causing frustration. In 4.9, custom page templates that are created fail to display in the Template drop-down menu. The issue is related to changes made to the <a href=\"https://core.trac.wordpress.org/changeset/41806\">file editor</a>.</p>\n<p>Previous versions of WordPress listed files 2-levels deep in the editor. In 4.9, the entire directory tree for a theme is listed regardless of its depth. Caching was added to help limit the performance impacts of loading large WordPress themes. &#8220;An unintended side effect of the caching is that the same directory listing function <tt>get_files</tt> is used both for the theme editor and for gathering page templates,&#8221; Weston Ruter, Co-Release Lead for WordPress 4.9 <a href=\"https://core.trac.wordpress.org/ticket/42573#comment:57\">said</a>.</p>\n<p>Within the <a href=\"https://core.trac.wordpress.org/ticket/42573\">trac ticket</a>, developers suggests that a button be added that flushes all caches or disabling the cache if <tt>WP_DEBUG</tt> is set to true. Neither suggestion turned into a patch committed to core. Instead, Ruter has <a href=\"https://gist.github.com/westonruter/6c2ca0e5a4da233bf4bd88a1871dd950\">released a plugin</a> as a workaround that flushes the template cache. Other workarounds include, bumping the theme&#8217;s version, running the <tt>wp cache flush</tt> command in WP CLI, or waiting 60 minutes for the cache to expire.</p>\n<p>The ticket is marked as a high priority but because of the upcoming holidays in the US and WordCamp US next weekend, it could be at least a few weeks before WordPress 4.9.1 is released.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Nov 2017 00:42:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WPTavern: Tide Project Aims to Audit and Score WordPress Themes and Plugins based on Code Quality\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76652\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"https://wptavern.com/tide-project-aims-to-audit-and-score-wordpress-themes-and-plugins-based-on-code-quality\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8526:\"<p>Last week XWP dropped an intriguing <a href=\"https://xwp.co/tide-a-path-to-better-code-across-the-wordpress-ecosystem/\" rel=\"noopener\" target=\"_blank\">preview of a new project called Tide</a> that aims to improve code quality across the WordPress plugin and theme ecosystems. The company has been working with the support of Google, Automattic, and WP Engine, on creating a new service that will help users make better plugin decisions and assist developers in writing better code.</p>\n<p>XWP&#8217;s marketing manager Rob Stinson summarized the project&#8217;s direction so far:</p>\n<blockquote><p>Tide is a service, consisting of an API, Audit Server, and Sync Server, working in tandem to run a series of automated tests against the WordPress.org plugin and theme directories. Through the Tide plugin, the results of these tests are delivered as an aggregated score in the WordPress admin that represents the overall code quality of the plugin or theme. A comprehensive report is generated, equipping developers to better understand how they can increase the quality of their code.</p></blockquote>\n<p>The XWP announcement also included a screenshot of how this data might be presented in the WordPress plugin directory:</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/jetpack-tide-plugin-score.jpg?ssl=1\"><img /></a></p>\n<p>XWP plans to unveil the service at WordCamp US in Nashville at the Google booth where they will be inviting the community to get involved. Naturally, a project with the potential to have this much impact on the plugin ecosystem raises many questions about who is behind the vision and what kind of metrics will be used.</p>\n<p>I contacted Rob Stinson and Luke Carbis at XWP, who are both contributors to the project, to get an inside look at how it started and where they anticipate it going.</p>\n<p>&#8220;Tide was started at XWP about 12 months ago when one of our service teams pulled together the idea, followed up by a proof of concept, of a tool that ran a series of code quality tests against a package of code (WordPress plugin) and returned the results via an API,&#8221; Stinson said. &#8220;We shortly after came up with the name Tide, inspired by the proverb &#8216;A rising tide lifts all boats,&#8217; thinking that if a tool like this could lower the barrier of entry to good quality code for enough developers, it could lift the quality of code across the whole WordPress ecosystem.&#8221;</p>\n<p>Stinson said XWP ramped up its efforts on Tide during the last few months after beginning to see its potential and sharing the vision with partners.</p>\n<p>&#8220;Google, Automattic and WP Engine have all helped resource (funds, infrastructure, developer time, advice etc) the project recently as well,&#8221; Stinson said. &#8220;Their support has really helped us build momentum. Google have been a big part of this since about August. We had been working with them on other projects and when we shared with them the vision for Tide, they loved it and saw how in line it is with the vision they have for a better performant web.&#8221;</p>\n<p>The Tide service is not currently active but a beta version will launch at WordCamp US with a WordPress plugin to follow shortly thereafter. Stinson said the team designed the first version to present the possibilities of Tide and encourage feedback and contribution from the community.</p>\n<p>&#8220;We realize that Tide will be its best if its open sourced,&#8221; he said. &#8220;There are many moving parts to it and we recognize that the larger the input from the community, the better it will represent and solve the needs of the community around code quality.&#8221;</p>\n<p>At this phase of the project, nothing has been set in stone. The Tide team is continuing to experiment with different ways of making the plugin audit data available, as well as refining how that data is weighed when delivering a Tide score.</p>\n<p>&#8220;The star rating is just an idea we have been playing with,&#8221; Stinson said. &#8220;The purpose of it will be to aggregate the full report that is produced by Tide into a simple and easy to understand metric that WordPress users can refer to when making decisions about plugins and themes. We know we haven’t got this metric and how it is displayed quite right. We’ve had some great feedback from the community already.&#8221;</p>\n<p>The service is not just designed to output scores but also to make it easy for developers to identify weaknesses in their code and learn how to fix them.</p>\n<p>&#8220;Lowering the barrier of entry to writing good code was the original inspiration for the idea,&#8221; Stinson said.</p>\n<h3>Tide Project Team Plans to Refine Metrics Used for Audit Score based on Community Feedback</h3>\n<p>The Tide project website, <a href=\"http://wptide.org\" rel=\"noopener\" target=\"_blank\">wptide.org</a>, will launch at WordCamp US and will provide developers with scores, including specifics like line numbers and descriptions of failed sniffs. Plugin developers will be able to use the site to improve their code and WordPress users will be able to quickly check the quality of a plugin. XWP product manager Luke Carbis explained how the Tide score is currently calculated.</p>\n<p>&#8220;Right now, Tide runs a series of code sniffs across a plugin / theme, takes the results, applies some weighting (potential security issues are more important than tabs vs. spaces), and then averages the results per line of code,&#8221; Carbis said. &#8220;The output of this is a score out of 100, which is a great indicator of the quality of a plugin or theme. The &#8216;algorithm&#8217; that determines the score is basically just a series of weightings.&#8221;</p>\n<p>The weightings the service is currently using were selected as a starting point, but Carbis said the team hopes the WordPress community will help them to refine it.</p>\n<p>&#8220;If it makes sense, maybe one day this score could be surfaced in the WordPress admin (on the add new plugin page),&#8221; Carbis said. &#8220;Or maybe it could influence the search results (higher rated plugins ranked first). Or maybe it just stays on wptide.org. That’s really up to the community to decide.&#8221;</p>\n<p>In addition to running codesniffs, the Tide service will run two other scans. A <a href=\"https://developers.google.com/web/tools/lighthouse/\" rel=\"noopener\" target=\"_blank\">Lighthouse</a> scan, using Google&#8217;s open-source, automated tool for improving the quality of web pages, will be performed on themes, which Carbis says is a &#8220;huge technological accomplishment.&#8221;</p>\n<p>&#8220;For every theme in the directory, we’re spinning up a temporary WordPress install, and running a Lighthouse audit in a headless chrome instance,&#8221; Carbis said. &#8220;This means we get a detailed report of the theme’s <em>front end output</em> quality, not just the code that powers it.&#8221;</p>\n<p>The second scan Tide will perform measures PHP compatibility and will apply to both plugins and themes.</p>\n<p>&#8220;Tide can tell which versions of PHP a plugin or theme will work with,&#8221; Carbis said. &#8220;For users, this means we could potentially hide results that we <em>know</em> won’t work with their WordPress install (or at least show a warning). For hosts, this means they can easily check the PHP compatibility before upgrading an install to PHP 7 (we think this will cause <em>many</em> more installs to be upgraded – the net effect being a noticeable speed increase, which we find really exciting and motivating).&#8221;</p>\n<p>Carbis said that the team is currently working in the short term to get the PHP Compatibility piece into the WordPress.org API, which he says could start influencing search results without any changes to WordPress core.</p>\n<p>&#8220;We’d also like to start engaging with the community to find out whether surfacing a Code Quality score to WordPress users is helpful, and if it is, what does that look like? (e.g. score out of 100, 5 star rating, A/B/C/D, etc.),&#8221; Carbis said. &#8220;We will release our suggestion for what this <em>could</em> look like as a plugin shortly after WordCamp US.&#8221;</p>\n<p>More specific information about the metrics Tide is currently using and how it applies to plugins and themes will be available after the service launches in beta. If you are attending WordCamp US and have some suggestions or feedback to offer the team, make sure to stop by the Google sponsorship booth.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Nov 2017 21:21:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"Matt: Adam Robinson on Understanding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47663\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://ma.tt/2017/11/adam-robinson-on-understanding/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5921:\"<p>This is a long quote/excerpt from <a href=\"https://twitter.com/iamadamrobinson\">Adam Robinson</a> I&#8217;ve been holding onto for a while, from <a href=\"https://tribeofmentors.com/\">Tribe of Mentors</a>. Worth considering, especially if you strive to work in a data-informed product organization.</p>\n<blockquote><p>Virtually all investors have been told when they were younger — or implicitly believe, or have been tacitly encouraged to do so by the cookie-cutter curriculums of the business schools they all attend — that the more they understand the world, the better their investment results. It makes sense, doesn’t it? The more information we acquire and evaluate, the “better informed” we become, the better our decisions. Accumulating information, becoming “better informed,” is certainly an advantage in numerous, if not most, fields.</p>\n<p>But not in the eld of counterintuitive world of investing, where accumulating information can hurt your investment results.</p>\n<p>In 1974, Paul Slovic — a world-class psychologist, and a peer of Nobel laureate Daniel Kahneman — decided to evaluate the effect of information on decision-making. This study should be taught at every business school in the country. Slovic gathered eight professional horse handicappers and announced, “I want to see how well you predict the winners of horse races.” Now, these handicappers were all seasoned professionals who made their livings solely on their gambling skills.</p>\n<p>Slovic told them the test would consist of predicting 40 horse races in four consecutive rounds. In the first round, each gambler would be given the five pieces of information he wanted on each horse, which would vary from handicapper to handicapper. One handicapper might want the years of experience the jockey had as one of his top five variables, while another might not care about that at all but want the fastest speed any given horse had achieved in the past year, or whatever.</p>\n<p>Finally, in addition to asking the handicappers to predict the winner of each race, he asked each one also to state how confident he was in his prediction. Now, as it turns out, there were an average of ten horses in each race, so we would expect by blind chance — random guessing — each handicapper would be right 10 percent of the time, and that their confidence with a blind guess to be 10 percent.</p>\n<p>So in round one, with just five pieces of information, the handicappers were 17 percent accurate, which is pretty good, 70 percent better than the 10 percent chance they started with when given zero pieces of information. And interestingly, their confidence was 19 percent — almost exactly as confident as they should have been. They were 17 percent accurate and 19 percent confident in their predictions.</p>\n<p>In round two, they were given ten pieces of information. In round three, 20 pieces of information. And in the fourth and final round, 40 pieces of information. That’s a whole lot more than the five pieces of information they started with. Surprisingly, their accuracy had flatlined at 17 percent; they were no more accurate with the additional 35 pieces of information. Unfortunately, their confidence nearly doubled — to 34 percent! So the additional information made them no more accurate but a whole lot more confident. Which would have led them to increase the size of their bets and lose money as a result.</p>\n<p>Beyond a certain minimum amount, additional information only feeds — leaving aside the considerable cost of and delay occasioned in acquiring it — what psychologists call “confirmation bias.” The information we gain that conflicts with our original assessment or conclusion, we conveniently ignore or dismiss, while the information that confirms our original decision makes us increasingly certain that our conclusion was correct.</p>\n<p>So, to return to investing, the second problem with trying to understand the world is that it is simply far too complex to grasp, and the more dogged our at- tempts to understand the world, the more we earnestly want to “explain” events and trends in it, the more we become attached to our resulting beliefs — which are always more or less mistaken — blinding us to the financial trends that are actually unfolding. Worse, we think we understand the world, giving investors a false sense of confidence, when in fact we always more or less misunderstand it.<br />\nYou hear it all the time from even the most seasoned investors and financial “experts” that this trend or that “doesn’t make sense.” “It doesn’t make sense that the dollar keeps going lower” or “it makes no sense that stocks keep going higher.” But what’s really going on when investors say that something makes no sense is that they have a dozen or whatever reasons why the trend should be moving in the opposite direction.. yet it keeps moving in the current direction. So they believe the trend makes no sense. But what makes no sense is their model of the world. That’s what doesn’t make sense. The world always makes sense.</p>\n<p>In fact, because financial trends involve human behavior and human beliefs on a global scale, the most powerful trends won’t make sense until it becomes too late to profit from them. By the time investors formulate an understanding that gives them the confidence to invest, the investment opportunity has already passed.</p>\n<p>So when I hear sophisticated investors or financial commentators say, for example, that it makes no sense how energy stocks keep going lower, I know that energy stocks have a lot lower to go. Because all those investors are on the wrong side of the trade, in denial, probably doubling down on their original decision to buy energy stocks. Eventually they will throw in the towel and have to sell those energy stocks, driving prices lower still.</p></blockquote>\n<p>&nbsp;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Nov 2017 16:33:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"HeroPress: Finding WordPress in Cameroon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=2286\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"https://heropress.com/essays/finding-wordpress-cameroon/#utm_source=rss&utm_medium=rss&utm_campaign=finding-wordpress-cameroon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5900:\"<img width=\"960\" height=\"480\" src=\"https://heropress.com/wp-content/uploads/2018/11/112217-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: The more I share knowledge with someone the more I gain in return.\" /><p>My name is Michaël Nde Tabefor, I reside in Cameroon. I grew up in the economic capital of the country surrounded by so much diversity and culture.</p>\n<p>Yet I was still very young when I developed an interest in technology, back in Primary school I had a PC at home I used to play around, most especially Spider Solitaire hahaha. Well that game sound crazy but it’s educative, it built up my reflex with the mouse and yeah it worth it. When I arrived in Secondary school I quickly picked up the subject.</p>\n<p>I began educating myself on the trend of Technology and how they work. I developed a great interest for organisations such as Google, what they doing for humanity not just about technology. So I understood that no matter the position I get, I must always contribute to Humanity by volunteering.</p>\n<p>When I got to the University back in 2014 as a Freshman, I enrolled into Software engineering program where I began excelling and widening my thinking and reflex, met with other enthusiasts of technology.</p>\n<h3>Taking Another Path</h3>\n<p>Unlike other students I decided to go in for an internship at my first year (am one of those who believe university is good but it contribute to just about 10 &#8211; 20% of what builds up skill, people must be passionate about what the do, that passion alone will get you have the skills and be able to learn more and more).</p>\n<p>On my first day of internship, my internship coordinator gave me a task to go and install WordPress on my computer and create with the use of an external template (not there default themes) the website of my university.</p>\n<blockquote><p>Let me make this point, I didn’t know about WordPress. Had no idea of what it’s meant for. Completely blank.</p></blockquote>\n<p>I went back to my university, I met one of my professors, explained it to him, he redirected me to a senior student who once did internship and had to use WordPress.</p>\n<p>I went home, got my environment set up and called my senior, She did the guiding all through the installation on phone, till installing the template, my curiosity did the rest of the job hahaha, end of story. The next day I went back to the office, my coordinator didn’t expect me that soon Lol.</p>\n<h3>Diving Deeper</h3>\n<p>So I worked on some tutorial on building themes and plugin from scratch from Lynda.com but I took a break from building cuz I didn’t have much skills in PHP, in first year we didn’t do web technologies, I began hacking on PHP on my own, basic’ly I learnt almost every skill on my own via research and practice.</p>\n<p>I worked on several sites that used WordPress and began installing for others. My coordinator told me it would be interesting to start a WordPress Community so others could benefit from it. Actually the more I share knowledge with someone I gain 100% in return too, it builds up my mastery and ability to debug and resolve issues.</p>\n<blockquote><p>I began our local community and everyday I kept understanding WordPress more and more.</p></blockquote>\n<p>After a couple of months I officially joined the WordPress Volunteer Community in doing more reach outs in (November 2015 &#8211; via Rocio Valdiva) and on April 15, 2017 I organized <a href=\"https://2017.buea.wordcamp.org/\">the very first WordCamp in the whole of Central Africa</a> that brought together over 240 persons. Complete gallery on <a href=\"https://www.flickr.com/photos/144827169@N08/\">Flickr</a>, Video on <a href=\"https://youtu.be/nnUgqhveB00\">YouTube</a>.</p>\n<p>After the WordCamp I later on built a Mobile Money Payment Gateway with a local Network Operator web payment API using WooCommerce.</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: Finding WordPress in Cameroon\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=Finding%20WordPress%20in%20Cameroon&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Ffinding-wordpress-cameroon%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: Finding WordPress in Cameroon\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Ffinding-wordpress-cameroon%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Ffinding-wordpress-cameroon%2F&title=Finding+WordPress+in+Cameroon\" rel=\"nofollow\" target=\"_blank\" title=\"Share: Finding WordPress in Cameroon\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/finding-wordpress-cameroon/&media=https://heropress.com/wp-content/uploads/2018/11/112217-150x150.jpg&description=Finding WordPress in Cameroon\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: Finding WordPress in Cameroon\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/finding-wordpress-cameroon/\" title=\"Finding WordPress in Cameroon\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/finding-wordpress-cameroon/\">Finding WordPress in Cameroon</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Nov 2017 15:45:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Michaël Nde Tabefor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"WPTavern: Envato Elements Adds Unlimited WordPress Theme and Plugin Downloads to Subscription Plan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76604\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:109:\"https://wptavern.com/envato-elements-adds-unlimited-wordpress-theme-and-plugin-downloads-to-subscription-plan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4096:\"<p>Envato has added <a href=\"https://envato.com/blog/announcing-wordpress-themes-on-envato-elements/\" rel=\"noopener\" target=\"_blank\">unlimited WordPress theme and plugin downloads</a> to its Elements digital assets subscription service. The company is including a curated collection of <a href=\"https://elements.envato.com/wordpress/themes/sort-by-latest\" rel=\"noopener\" target=\"_blank\">210 WordPress themes</a> and <a href=\"https://elements.envato.com/wordpress/plugins/sort-by-latest\" rel=\"noopener\" target=\"_blank\">100 plugins</a> along with 400,000 other design assets already offered through the service.</p>\n<p>Envato is the largest WordPress theme marketplace on the web with 39,102 themes and website templates for sale. Last year the company <a href=\"https://wptavern.com/envato-celebrates-10-years-in-business\" rel=\"noopener\" target=\"_blank\">celebrated 10 years in business</a> and reported that the community earned more than $40 million, with a significant portion of that revenue coming from WordPress products.</p>\n<p>The new &#8220;all you can eat&#8221; style package for WordPress themes on Envato Elements was introduced to boost the value of the service&#8217;s annual subscription plan and is not available to monthly subscribers. For $228/year, annual subscribers can change themes as often as they choose, which is the chief selling point of the new addition. However, the subscription service does not provide direct item support for the themes, as they are submitted by independent designers.</p>\n<p>Current Elements subscribers have the option to change their payment plans from monthly to annual to gain access to the unlimited WordPress products. Several disgruntled customers have taken to Twitter to express their dissatisfaction with the WordPress additions being withheld from existing monthly subscribers and perceive it to be heavy-handed a tactic for locking in more annual subscribers before raising the price.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Not cheeky ask at all, your roadmap did not say anything about this price change, but got people signed up at $19 per month with the understanding this was going to be an added edition. Shocking way to treat loyal customers. <a href=\"https://twitter.com/hashtag/moneyhungry?src=hash&ref_src=twsrc%5Etfw\">#moneyhungry</a></p>\n<p>&mdash; TVBanterUK <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f4ad.png\" alt=\"?\" class=\"wp-smiley\" /> (@TVBanterUK) <a href=\"https://twitter.com/TVBanterUK/status/930943546693226501?ref_src=twsrc%5Etfw\">November 15, 2017</a></p></blockquote>\n<p></p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Why hold monthly subscribers ransom by only allowing annual subscribers access? Feels somewhat unfair to long term subs!</p>\n<p>&mdash; Paul Charlton (@ipixel_design) <a href=\"https://twitter.com/ipixel_design/status/931203052765433862?ref_src=twsrc%5Etfw\">November 16, 2017</a></p></blockquote>\n<p></p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Yes we were on the understanding us early day loyal subscribers signed up would get what the roadmap said, it’s such a sneaky way to get people locked in to the annual plan which you will then increase in year 2, seen it all before.</p>\n<p>&mdash; TVBanterUK <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f4ad.png\" alt=\"?\" class=\"wp-smiley\" /> (@TVBanterUK) <a href=\"https://twitter.com/TVBanterUK/status/931097713579610112?ref_src=twsrc%5Etfw\">November 16, 2017</a></p></blockquote>\n<p></p>\n<p>An Envato support representative offered some background on the decision in response to monthly subscribers who do not appreciate being excluded from additions to the service.</p>\n<p>&#8220;We chose this pricing model because we think it creates the fairest platform for both our subscribers and our authors,&#8221; the representative said. &#8220;A huge amount of time and dedication goes into creating and maintaining WordPress themes and plugin so this allows us to help protect the earnings of the authors who provide our community with premium assets.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Nov 2017 04:01:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Tribe of Mentors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47661\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"https://ma.tt/2017/11/tribe-of-mentors/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1004:\"<p>Tim Ferriss&#8217;s new book <a href=\"https://tribeofmentors.com/\">Tribe of Mentors is out</a>. I have finished it already, and can say it&#8217;s really excellent and I even liked it more than Tools of Titans even though I&#8217;m not in this one. <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f642.png\" alt=\"?\" class=\"wp-smiley\" /> As I said in a message to Tim:</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Curious how Tribe of Mentors is different from Tools of Titans? Here\'s a text to me from Matt Mullenweg (<a href=\"https://twitter.com/photomatt?ref_src=twsrc%5Etfw\">@photomatt</a>, CEO Automattic)&#8230; <a href=\"https://t.co/D9kvA2rFFC\">pic.twitter.com/D9kvA2rFFC</a></p>\n<p>&mdash; Tim Ferriss (@tferriss) <a href=\"https://twitter.com/tferriss/status/919729467244863488?ref_src=twsrc%5Etfw\">October 16, 2017</a></p></blockquote>\n<p></p>\n<p>I learned a lot from it, took a ton of notes to follow up on, and wrote down about twenty more books I have to read.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 21 Nov 2017 23:55:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"WPTavern: Tailor Page Builder Plugin Discontinued, Owners Cite Funding, Gutenberg, and Competition\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76599\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:106:\"https://wptavern.com/tailor-page-builder-plugin-discontinued-owners-cite-funding-gutenberg-and-competition\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6385:\"<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/tailor-e1510853958841.png?ssl=1\"><img /></a></p>\n<p><a href=\"https://www.enclavely.io/\" rel=\"noopener\" target=\"_blank\">Enclavely, Inc.</a>, the owners of the <a href=\"https://wordpress.org/plugins/tailor/\" rel=\"noopener\" target=\"_blank\">Tailor Page Builder plugin</a>, have announced that they will be <a href=\"https://www.tailorwp.com/discontinued/\" rel=\"noopener\" target=\"_blank\">discontinuing its development</a> effective immediately.</p>\n<p><a href=\"http://andrewworsfold.com/\" rel=\"noopener\" target=\"_blank\">Andrew Worsfold</a>, the original developer, launched Tailor in April 2016 and the plugin received an enthusiastic reception from the WordPress community. After performing <a href=\"https://wptavern.com/pippin-williamson-shakes-up-page-builder-plugins-with-critical-review\" rel=\"noopener\" target=\"_blank\">a critical review of the major page builders</a> available to users in September 2016, Pippin Williamson found only three that he could happily recommend to his customers: Tailor, Pootle Page Builder, and Beaver Builder. This recommendation was based primarily on code quality, usability, and compatibility with other plugins.</p>\n<p>The plugin <a href=\"https://www.tailorwp.com/tailor-page-builder-under-new-management/\" rel=\"noopener\" target=\"_blank\">came under new management in July 2017</a> after the original developer no longer had enough time to dedicate to the project. Worsfold sold it to Enclavely, whose owners were early and enthusiastic users of the plugin, for what he said was &#8220;a nominal amount.&#8221; Three months later, the new owners cite the cost of keeping up with Gutenberg and other competitors as the primary reason for <a href=\"https://www.tailorwp.com/discontinued/\" rel=\"noopener\" target=\"_blank\">discontinuing its development</a>:</p>\n<blockquote><p>Gutenberg is going to be bundled with WordPress itself. That’s definitely going to give a tough time to all 3rd party page builders and even that is not the case there are some really big players around like Elementor, Divi, Beaver Builder, and others which are going to be hard for us to compete with, being a completely free project and providing almost all the great features in free version&#8230;</p>\n<p>So the main reason for us to discontinue Tailor is due to finances, which Tailor needs to keep on its development and marketing to compete with all the big players and especially Gutenberg.</p></blockquote>\n<p>This instance seems to be more of a case of the new management running out of funds, rather than Gutenberg preemptively killing off a page builder. Enclavely was no longer willing to invest in developing a product that could compete against some of the more widely used page builders.</p>\n<p>&#8220;Tailor needs a lot of effort and money, which was much more than we estimated,&#8221; an Enclavely representative said when I contacted the company. &#8220;And even if we continue to put effort and money in this project, we all know that Gutenberg is going to smash this space soon and we won&#8217;t be able to survive, and so will be the case with some other page builders. This is why we decided to end this now.&#8221;</p>\n<p>Tailor currently has more than 3,000 active installations, according to WordPress.org. Fans of the plugin commented on the <a href=\"https://medium.com/tailor-page-builder/end-of-tailor-rise-of-gutenberg-6b4c59431f99\" rel=\"noopener\" target=\"_blank\">announcement</a>, asking if the original developer might be able to pick the project back up again.</p>\n<p>When I contacted the company, they said the original developer was no longer involved with the project.</p>\n<p>&#8220;The original developer has parted ways since the acquisition,&#8221; an Enclavely representative said. &#8220;He was involved with some stuff in the start but not that much, thus the decision is mainly taken by us based on the issues we were facing in maintaining this project.&#8221;</p>\n<p>However, Worsfold&#8217;s account of his involvement with Tailor following the acquisition differs greatly from Enclavely&#8217;s report.</p>\n<p>&#8220;I handed over control of the project in July, although all releases since then were also written by me and deployed on their behalf,&#8221; Worsfold said. &#8220;Given that I haven&#8217;t been asked to help with anything recently, and there have been no further releases, it looks like development has already ended.&#8221;</p>\n<p>The plugin is <a href=\"https://wordpress.org/plugins/tailor/\" rel=\"noopener\" target=\"_blank\">available free on WordPress.org</a> and licensed under the GPL, so anyone who wants to can fork it. Worsfold doesn&#8217;t anticipate having the time to maintain the project himself and said he was under the impression that Enclavely is attempting to sell it.</p>\n<p>&#8220;I made the decision to hand over control of Tailor as work and other commitments meant that I couldn&#8217;t dedicate enough time to the project,&#8221; Worsfold said. &#8220;I had hoped that the new team would continue development, provide support, and ensure the needs of existing users were met. However after just three months they&#8217;ve decided to give up. That&#8217;s obviously very disappointing.&#8221;</p>\n<p>Worsfold said that when he sold it to them, it was with the understanding that they would continue to develop and maintain it. He doesn&#8217;t anticipate being able to re-adopt it due to a lack of time to dedicate to the project.</p>\n<p>&#8220;I&#8217;m in much the same situation I was in before and it seems they are wanting to on-sell it themselves, so I can&#8217;t imagine I will be able to readopt it,&#8221; Worsfold said. &#8220;I have mixed feelings about the whole situation. Ultimately I see Gutenberg doing most of what page builders currently do, but in a better, more standardized, way. Hopefully, whatever&#8217;s left (custom blocks, styles, functionality etc.) will build on the framework and serve to reduce the amount of fragmentation in the ecosystem.&#8221;</p>\n<p>Worsfold is still limited on free time but said he would be willing to contribute to the project  if someone decided to fork it and keep it alive.</p>\n<p>&#8220;It would be a shame to see something I built, and that people use, simply die,&#8221; he said. &#8220;Hopefully someone will either fork it or take over development.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 21 Nov 2017 00:15:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"WPTavern: GitHub Launches Security Alerts for JavaScript and Ruby Projects, Python Support Coming in 2018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76663\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:115:\"https://wptavern.com/github-launches-security-alerts-for-javascript-and-ruby-projects-python-support-coming-in-2018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1873:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2015/04/github-octocat.jpg?ssl=1\"><img /></a></p>\n<p>Last month <a href=\"https://wptavern.com/github-launches-new-dependency-graph-feature-with-security-alerts-coming-soon\" rel=\"noopener\" target=\"_blank\">GitHub launched its Dependency Graph feature</a> that tracks a repository&#8217;s dependencies and sub-dependencies under the Insights tab. This week the company rolled out an expansion of the feature and will now <a href=\"https://github.com/blog/2470-introducing-security-alerts-on-github\" rel=\"noopener\" target=\"_blank\">identify known vulnerabilities and send notifications</a> with suggested fixes from the GitHub community.</p>\n<p>Dependency graphs and security alerts are automatically enabled for public repositories, provided the repository owner has defined the dependencies in <a href=\"https://help.github.com/articles/listing-the-packages-that-a-repository-depends-on\" rel=\"noopener\" target=\"_blank\">one of the supported manifest file types</a>, such as package.json or Gemfile. (Private repo owners have to opt in.) The vulnerability alerts are not public &#8211; they will only be shown to those who have been granted access to the vulnerability alerts.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/11/github-dependency-vulnerability.png?ssl=1\"><img /></a></p>\n<p>GitHub uses data from the <a href=\"https://nvd.nist.gov/\" rel=\"noopener\" target=\"_blank\">National Vulnerability Database</a> to alert repository owners about publicly disclosed vulnerabilities that have <a href=\"https://cve.mitre.org/\" rel=\"noopener\" target=\"_blank\">CVE IDs</a>. Vulnerability detection is currently limited to JavaScript and Ruby projects but Python support is next on the roadmap for 2018. PHP, which is a bet less widely used in projects on GitHub, is likely further down the list.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 18 Nov 2017 00:25:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"WPTavern: WordCamp Europe 2018 Speaker Applications Now Open\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76608\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wptavern.com/wordcamp-europe-2018-speaker-applications-now-open\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3019:\"<p>WordCamp Europe 2018 has opened the <a href=\"https://2018.europe.wordcamp.org/2017/11/15/are-you-ready-to-speak-at-the-largest-wordpress-event-in-europe/\" rel=\"noopener\" target=\"_blank\">call for speakers</a> and will be accepting applications through January 15. The organizing team recommends that speakers already have some experience ahead of applying to speak at the largest WordPress event in Europe, but a dedicated Content Team will also be available with resources for helping speakers create a successful presentation.</p>\n<p>The 2017 event received a total of 235 speaker applications and 43 were selected for the main event. Organizers plan to stick to the same format and are calling for 40-minute talks (30 min + 10 min Q&amp;A) as well as 10-minute lightning talks. This year the event will experiment with hosting community workshops and organizers plan to open a separate call for workshop leaders next week.</p>\n<p>The Content Team put out a specific call for more technical talks at the 2018 event after a <a href=\"https://2018.europe.wordcamp.org/2017/11/10/how-your-feedback-will-help-us-shape-the-next-wordcamp-europe/\" rel=\"noopener\" target=\"_blank\">community survey</a> showed that more developer-oriented talks are what the audience is looking for. More than half of those surveyed identified themselves as developers (54%), with business owners (12%) the next largest demographic.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-17-at-11.44.21-AM.png?ssl=1\"><img /></a></p>\n<p>The survey also showed that 37% of respondents have been working with WordPress for more than 9 years and roughly 90% of attendees have been using WordPress for 4-9+ years. Advanced development was the most highly requested topic for presentations, selected by 53% of respondents, followed by design (45%).</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-17-at-11.54.06-AM.png?ssl=1\"><img /></a></p>\n<p>The survey results offer some insight about which topics might fare well at WCEU in 2018. Organizers have also compiled an extensive <a href=\"https://apply.wp-europe.org/ideas\" rel=\"noopener\" target=\"_blank\">list of ideas and topics</a> to inspire speaker applicants.</p>\n<p>A batch of 1,000 Early Bird tickets recently <a href=\"https://wptavern.com/wordcamp-europe-2018-early-bird-tickets-now-on-sale\" rel=\"noopener\" target=\"_blank\">went on sale</a> and there are still 680 available. Attendees who purchase a ticket before December 31, 2017, will receive a limited-edition swag item. The organizing team plans to release tickets in batches, as in previous years, but will not be setting specific expectations on sales this year, according to PR representative Letizia Barbi. The Sava Center venue, an international congress and cultural center, is the largest audience hall in Serbia and will accommodate all who want to attend WCEU 2018. Barbi said it should also scale down nicely in case of a smaller turn out.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2017 19:19:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"WPTavern: WooCommerce Explores the Possibilities and Challenges for E-Commerce in the Gutenberg Era\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76597\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"https://wptavern.com/woocommerce-explores-the-possibilities-and-challenges-for-e-commerce-in-the-gutenberg-era\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4350:\"<p>The next release of WordPress (5.0) will introduce the new Gutenberg editor and contributors plan to keep it rolling towards the eventual goal of providing a full site building experience. Nearly every WordPress theme and plugin developer will be impacted by the change and many are starting to look ahead to how their products may interact with Gutenberg in the future.</p>\n<p>What will e-commerce look like in the Gutenberg era? The WooCommerce design team has published <a href=\"https://woocommerce.com/2017/11/woocommerce-gutenberg/\" rel=\"noopener\" target=\"_blank\">a preview of some of their &#8220;Wootenberg&#8221; experiments</a>, along with a gif demonstrating what a block-based editing experience may look like in the context of working with products. The team sees a lot of potential for putting the power of visual product editing into the hands of users.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/wootenberg.gif?ssl=1\"><img /></a></p>\n<p>The example shows a quick exploration of page layout with product blocks and the team also posted an idea of what basic product authoring may look like with a predefined product template that includes the featured image, product title, description, and price as new Gutenberg blocks. But will it be possible to have complex product creation fit into a block-based editor? The WooCommerce team admits in the post that they don&#8217;t yet know how this will work.</p>\n<p>&#8220;One thing that isn’t yet 100% clear is how complex plugins like WooCommerce will work with Gutenberg,&#8221; Automattic designer/developer James Koster said. &#8220;A simple product with a description, a price, and a category is one thing. But a product with variations, for each of which you want to upload a different image, and need to manage/track stock is quite another. Imagining a WYSIWYG editing experience for that kind of data is a little fuzzier.&#8221;</p>\n<p>Koster referenced Gutenberg&#8217;s newly merged support for meta boxes, the first step in making product authoring possible. However, the Gutenberg team is still experimenting and isn&#8217;t yet set on a solution for implementing meta boxes.</p>\n<p>&#8220;How this works with WooCommerce in the long term is unclear,&#8221; Koster said. &#8220;But you can rest assured it’s something we’ll be dedicating more time to investigating as WordPress approaches the 5.0 release.&#8221; Koster concludes the post by asking readers if visual product editing, with the flexibility to rearrange product/shop layouts, is something that interests them.</p>\n<p>&#8220;If there’s one thing that WooCommerce should perhaps learn from Shopify’s rapid growth, it’s that many &#8216;would-be&#8217; shop owners don’t care to spend hours upon hours tweaking the layout of their shop, and that pre-built easy-to-use software that looks good and feels good, but can still be extended in complex ways, is what attracts many users,&#8221; Jesse Nickles commented on the post. &#8220;While this may be the underlying goal of Gutenberg, it perhaps doesn’t crossover clearly to the e-commerce world.&#8221;</p>\n<p>Koster said he agrees that users don&#8217;t always need visual editing experiences and that simple things like price changes should be quick and painless.</p>\n<p>&#8220;How we present data-driven editing alongside the Gutenberg experience will ultimately determine the success of the project from a WooCommerce perspective,&#8221; Koster said.</p>\n<p>Support for meta boxes is one the most challenging aspects of the Gutenberg project that the team has yet to solve. Exploring the possibilities of flexible page layouts for products is exciting, but even the WooCommerce team is left wondering how this is all going to work with more complex CMS data. Smaller product teams without the collective knowledge and resources of WooCommerce may have a more difficult time finding the bandwidth to experiment and rebuild their products in time for WordPress 5.0.</p>\n<p>The WooCommerce team invites any users interested in Gutenberg-related UX changes to join the plugin&#8217;s <a href=\"https://woocommerce.com/design-feedback/\" rel=\"noopener\" target=\"_blank\">design feedback group</a>, as they continue to explore how the new editor will work in the context of complex e-commerce product creation and display.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2017 04:30:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:113:\"WPTavern: GDPR for WordPress Project Gains Momentum, Proposal Receives Positive Response from Developer Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76484\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:123:\"https://wptavern.com/gdpr-for-wordpress-project-gains-momentum-proposal-receives-positive-response-from-developer-community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5743:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/10/WP-GDPR-Compliance.png?ssl=1\"><img /></a></p>\n<p>Community feedback on the new <a href=\"https://www.gdprwp.com\" rel=\"noopener\" target=\"_blank\">GDPR for WordPress project</a>, created by WordCamp Denmark organizer Kåre Mulvad Steffensen and WP Pusher creator Peter Suhm, has started rolling in after the two launched a survey for developers. The project aims to provide an industry standard for getting plugins compliant with EU General Data Protection Regulation (GDPR) legislation ahead of the May 2018 deadline.</p>\n<p>Steffensen <a href=\"https://www.gdprwp.com/status-the-gdpr-interface/\" rel=\"noopener\" target=\"_blank\">published</a> some initial results of the survey after having it open for two weeks. So far, 90% of respondents have answered that they would consider implementing a GDPR &#8220;file&#8221; types solution for their plugins if a standard was available. Only 4.9% of the 40 developers who responded said they have a plan for making their plugins GDPR compliant and 43.9% said they do not currently have a plan. The remaining 24.4% were developers of plugins that do not handle personal data.</p>\n<p>&#8220;Our talks with Paul Sieminski from <a href=\"https://automattic.com/\" rel=\"noopener\" target=\"_blank\">Automattic</a> and Dovy Paukstys from the <a href=\"https://reduxframework.com/\" rel=\"noopener\" target=\"_blank\">Redux options framework</a> have reassured us that we still do have a need for a GDPR structure which can help the community establish a basis for handling GDPR compliance,&#8221; Steffensen said.</p>\n<p>Steffensen and Suhm created a <a href=\"https://github.com/GDPRWP/standard\" rel=\"noopener\" target=\"_blank\">GitHub repository</a> where they have outlined their proposal for a PHP object interface that plugin developers could add to their codebases as a standard way of indicating how their plugins work with personal data.</p>\n<p>&#8220;The nature of such an interface puts some responsibility in the hands of the developer to identify any place personal data is stored,&#8221; Steffensen said. &#8220;What kind of data it is, and for what purpose as well as how it should be handled upon deletion. The Interface approach will allow a community-wide adoption, without setting limitations on how plugin developers choose to work with their data – something we obviously can’t control.&#8221;</p>\n<p>The idea is that plugin developers could then build other tools on top of this framework using specific functions that correspond to GDPR requirements, such as functions that allow users to access their data, implement the right to be forgotten, report data breaches, and delete and anonymize data. Developers could also build plugins that offer a plain language description of what personal data a plugin collects and how it is handled.</p>\n<p>In speaking with Dovy Paukstys on how this could work with Redux, Steffensen said the options framework may be able to facilitate compliance for the 500,000+ sites where it is active and the developers who use it to build plugins.</p>\n<p>&#8220;Dovy from Redux has a coder&#8217;s view on this,&#8221; Steffensen said. &#8220;Our object interface (PHP) would be something his framework could provide an easy way to utilize for the many developers using Redux.  The redux users (developers) could essentially do this themselves also, but since Redux is a framework it makes sense to see if they can build something that will make it near instant for developers to provide compliance for the GDPR.&#8221;</p>\n<p>Steffensen said the team is aware that the first version of the interface will not render plugins, and by extension their sites, instantly compliant. The interface they are proposing is not one that could be held legally accountable, but the goal is to make it possible for developers to build accountable systems on top of it.</p>\n<h3>GDPR for WordPress Project Founders Consider Accepting Sponsorships</h3>\n<p>With 189 <a href=\"http://www.gdprcountdownclock.com/\" rel=\"noopener\" target=\"_blank\">days remaining before the GDPR goes into effect</a>, the team will need to work quickly to make a solution available with enough time for interested developers to incorporate it into their plugins. They have not yet set up a way to accept donations but are considering it.</p>\n<p>&#8220;We aren&#8217;t actively seeking funding, but would love any funds that would help us allocate the time needed to keep the momentum going,&#8221; Steffensen said. &#8220;We&#8217;re lucky that the <a href=\"https://wptavern.com/gdpr-for-wordpress-project-seeks-to-provide-a-standard-for-plugin-compliance\" rel=\"noopener\" target=\"_blank\">WP Tavern article</a> brought attention to our GDPR approach and have caught the eyes of some of the key players in the ecosystem. One such company is Mailpoet that was the first to raise the idea of sponsoring our work.&#8221;</p>\n<p>Steffensen works at <a href=\"http://Peytz.dk\" rel=\"noopener\" target=\"_blank\">Peytz.dk</a>, a Danish WordPress agency that wants to support the community and has allocated some of his time to work on the project. He said any funding/donations they receive would be spent on pushing the roadmap forward, investing time in coding, and possibly seeking further advice from people who they cannot expect to be in it for free.</p>\n<p>In addition to looking at ways to receive donations, the team plans to keep the survey open for developers for awhile longer to try to make more connections in the community. Steffensen said they hope respondents will help them gain insight on the developer community&#8217;s readiness and also enable them to reach out to any plugin owners who could play a key role in a wider adoption.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 16 Nov 2017 20:58:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"WPTavern: Consultants Are WordPress’ Boots on the Ground\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76619\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wptavern.com/consultants-are-wordpress-boots-on-the-ground\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1173:\"<blockquote><p>A business can’t survive without strong sales &amp; customer service, two competencies that are arguably the lifeblood of a company.</p>\n<p>Many of you reading this fill that exact gap for the open source WordPress project. I don’t mean this as a slight to the thousands of wonderful people who build the software, document it, and support it in the forums, but that consultants (doing it right or wrong) are also fueling this locomotive too.</p>\n<p>There are no official sales or customer service channels at WordPress.org and us consultants bear the brunt of it — for better or worse — and that’s where our job comes in. Just as you trust a core contributor to spot-check her code and ensure that we’ve <em>sanitized all the things! </em></p>\n<p><em>Consultants are the boots on the ground, and as you’ll see below in my feedback section, represent a disproportionate ratio of launching many more websites than an individual website owner. &#8211; Matt Medeiros<br />\n</em></p></blockquote>\n<p>From <a href=\"https://mattreport.com/growth-of-wordpress/\">The blue-collar WordPress worker and the 2,500+ websites built to grow the CMS</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 16 Nov 2017 20:07:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"WPTavern: WPWeekly Episode 294 – HeroPress, Community, and WinningWP With Topher DeRosia\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=76578&preview=true&preview_id=76578\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"https://wptavern.com/wpweekly-episode-294-heropress-community-and-winningwp-with-topher-derosia\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2958:\"<p>In this episode, <a href=\"https://jjj.blog/\">John James Jacoby</a> and I are joined by <a href=\"https://topher1kenobe.com/\">Topher DeRosia</a>, founder of <a href=\"https://heropress.com/\">HeroPress</a>. DeRosia provides an update on HeroPress and explains his new role creating <a href=\"https://www.youtube.com/channel/UCt8Sa48zWN_WcordE7TaUBg\">WordPress training videos</a> for <a href=\"https://winningwp.com/\">WinningWP</a>. Jacoby and I discussed the news of the week including, Press This removed in WordPress 4.9, Meta box support in Gutenberg, and WP-SpamShield removed from the directory.</p>\n<p>Near the end of the show, we discuss whether or not consultants, agencies, and site builders have been left out of the discussion and not factored into WordPress&#8217; growth over the years.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://wptavern.com/press-this-removed-from-wordpress-4-9-in-favor-of-a-plugin\">Press This Removed from WordPress 4.9 in Favor of a Plugin</a><br />\n<a href=\"https://wptavern.com/bianca-welds-awarded-kim-parsell-travel-scholarship\">Bianca Welds Awarded Kim Parsell Travel Scholarship</a><br />\n<a href=\"https://wptavern.com/wordcamp-europe-2018-early-bird-tickets-now-on-sale\">WordCamp Europe 2018 Early Bird Tickets Now on Sale</a><br />\n<a href=\"https://wptavern.com/gutenberg-contributors-explore-alternative-to-using-iframes-for-meta-boxes\">Gutenberg Contributors Explore Alternative to Using iframes for Meta Boxes</a><br />\n<a href=\"https://wptavern.com/wp-spamshield-plugin-removed-from-wordpress-org-author-plans-to-pull-all-plugins-from-the-directory\">WP-SpamShield Plugin Removed from WordPress.org, Author Plans to Pull All Plugins from the Directory</a><br />\n<a href=\"https://mattreport.com/growth-of-wordpress/?utm_content=bufferee910&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer\">The blue-collar WordPress worker and the 2,500+ websites built to grow the CMS</a></p>\n<h2>Picks of the Week:</h2>\n<p><a href=\"https://wptavern.com/how-to-whitelist-comments-in-wordpress\">How to Whitelist Comments in WordPress</a></p>\n<p><a href=\"https://wordpress.org/plugins/dark-mode/\">Dark Mode</a> is an experimental feature plugin that darkens the colors of the WordPress backend.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, November 22nd 3:00 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\" rel=\"noopener\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"https://wptavern.com/feed/podcast\" target=\"_blank\" rel=\"noopener\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\" rel=\"noopener\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #294:</strong><br />\n</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 16 Nov 2017 03:13:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"WPTavern: WordPress 4.9 Released with Major Improvements to Customizer Workflow, Updated Code Editors, and New Core Gallery Widget\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76391\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:139:\"https://wptavern.com/wordpress-4-9-released-with-major-improvements-to-customizer-workflow-updated-code-editors-and-new-core-gallery-widget\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5359:\"<p><a href=\"https://wordpress.org/news/2017/11/tipton/\" rel=\"noopener\" target=\"_blank\">WordPress 4.9</a> &#8220;Tipton&#8221; was released today, named for Oklahoma-born jazz musician <a href=\"https://en.wikipedia.org/wiki/Billy_Tipton\" rel=\"noopener\" target=\"_blank\">William Lee Tipton</a>, a gifted pianist and saxophonist. This update introduces major improvements to the design and collaboration workflow in the Customizer, improves WordPress&#8217; built-in code editor, and enhances core text and media widgets.</p>\n<h4>Draft, Schedule, and Preview Changes in the Customizer</h4>\n<p>Prior to 4.9, users could get a live preview of their sites in the Customizer but any changes they made would need to be saved immediately or discarded. This update makes it possible to draft and schedule changes in the Customizer, and even share a preview link to collaborate on changes before making them live. Users can now stage content, such as new pages, a new set of widgets, a different combination of menu items, and schedule it all to publish at a future date.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/customizer-publish-settings-schedule-e1510636315310.png?ssl=1\"><img /></a></p>\n<p>This release also brings the ability to search, browse, and preview themes directly in the Customizer. The search interface includes filters for subject, features, and layout, just like the ones on the &#8220;Add Themes&#8221; screen in wp-admin. It does not yet include the featured, popular, latest, or favorites tabs, so users will need to navigate back to the admin if they want to browse those categories.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/11/theme-browser-customizer.png?ssl=1\"><img /></a></p>\n<p>The menu creation process has also been updated in the Customizer to be less confusing with a rethink of the UI and revised copy.</p>\n<h4>Syntax Highlighting and Error Checking Added to the Code Editors</h4>\n<p>WordPress 4.9 brings syntax highlighting, linting, and auto-completion to the built-in code editors by incorporating the <a href=\"https://codemirror.net/\">CodeMirror</a> library. These long-awaited improvements are now available in the theme and plugin editors as well as the custom HTML widget and additional CSS box in the Customizer. The feature comes with <a href=\"https://wptavern.com/wordpress-4-9-protects-users-from-fatal-errors-created-in-the-theme-and-plugin-editors\" rel=\"noopener\" target=\"_blank\">prominent warnings</a> about directly editing themes and plugins and protection against saving code that would cause a fatal error.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/11/editor-css-error-e1510640427941.png?ssl=1\"><img /></a></p>\n<h4>New Core Gallery Widget and Support for Shortcodes and Embedded Media in the Text Widget</h4>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/09/core-gallery-widget.png?ssl=1\"><img /></a><a href=\"https://wptavern.com/new-core-gallery-widget-targeted-for-wordpress-4-9\" rel=\"noopener\" target=\"_blank\">WordPress 4.9 adds a new gallery widget</a> to the collection of core media widgets (audio, image, and video) that were introduced in 4.8. It brings the same gallery-creation features to widgets that have long been available in the post and page editors.</p>\n<p>These incremental changes will help users get ready for Gutenberg&#8217;s block-based interface. The plan is to eventually transition widgets over to blocks after Gutenberg is in core and the plugin already has support for a gallery block, as well as a Custom HTML block.</p>\n<p>As of 4.9, users can now embed media in the Text widget, including images, video, and audio by clicking the &#8220;Add Media&#8221; button. In order to make this possible, WordPress contributors also needed to <a href=\"https://wptavern.com/wordpress-4-9-will-support-shortcodes-and-embedded-media-in-the-text-widget\" rel=\"noopener\" target=\"_blank\">add shortcode support to widgets</a>, a feature that users have requested for nearly a decade. With this now built into core, hundreds of thousands of WordPress sites will no longer need additional code from plugins and themes to use shortcodes in widgets.</p>\n<p>Widgets have also been improved to offer a better migration experience with updated logic for mapping widgets between two themes’ widget areas.</p>\n<h4>On Towards Gutenberg</h4>\n<p>WordPress 4.9 also includes a notice in the about.php page of the admin, inviting users to help test or contribute to Gutenberg. It is the first time a feature plugin has been highlighted so prominently on the page users see after they update to the latest version.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-15-at-4.33.01-PM-e1510785254925.png?ssl=1\"><img /></a></p>\n<p>The Gutenberg project has been getting a lot of attention over the past few months as the WordPress community looks ahead to the 5.0 release that will introduce the new editor to the world. Meanwhile, contributors to 4.9 have been working in tandem to make significant improvements to existing features, enabling users to do more with widgets and overall site design than ever before. This release was led by Weston Ruter and Mel Choyce with help from 443 contributors, 42% (185) of them contributing to WordPress for the first time.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 16 Nov 2017 01:24:33 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"Dev Blog: WordPress 4.9 “Tipton”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4968\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://wordpress.org/news/2017/11/tipton/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:41239:\"<h2>Major Customizer Improvements, Code Error Checking, and More!&nbsp;?</h2>\n<img src=\"https://i1.wp.com/wordpress.org/news/files/2017/11/banner.png?fit=2400%2C1200&ssl=1\" alt=\"\" />\n<p>Version 4.9 of WordPress, named “Tipton” in honor of jazz musician and band leader Billy Tipton, is available for download or update in your WordPress dashboard. New features in 4.9 will smooth your design workflow and keep you safe from coding errors.</p>\n<p>Featuring design drafts, scheduling, and locking, along with preview links, the Customizer workflow improves collaboration for content creators. What’s more, code syntax highlighting and error checking will make for a clean and smooth site building experience. Finally, if all that wasn’t pretty great, we’ve got an awesome new Gallery widget and improvements to theme browsing and switching.</p>\n<hr class=\"wp-block-separator\" />\n<h2>Customizer Workflow Improved </h2>\n<img src=\"https://i0.wp.com/wordpress.org/news/files/2017/11/customizer-workflow-improved-small.png?w=632&ssl=1\" alt=\"\" />\n<h3>Draft and Schedule Site Design Customizations</h3>\n<p>Yes, you read that right. Just like you can draft and revise posts and schedule them to go live on the date and time you choose, you can now tinker with your site’s design and schedule those design changes to go live as you please.</p>\n<h3>Collaborate with Design Preview Links</h3>\n<p>Need to get some feedback on proposed site design changes? WordPress 4.9 gives you a preview link you can send to colleagues and customers so that you can collect and integrate feedback before you schedule the changes to go live. Can we say collaboration++?</p>\n<h3>Design Locking Guards Your Changes</h3>\n<p>Ever encounter a scenario where two designers walk into a project and designer A overrides designer B’s beautiful changes? WordPress 4.9’s design lock feature (similar to post locking) secures your draft design so that no one can make changes to it or erase all your hard work.</p>\n<h3>A Prompt to Protect Your Work</h3>\n<p>Were you lured away from your desk before you saved your new draft design? Fear not, when you return, WordPress 4.9 will politely ask whether or not you’d like to save your unsaved changes.</p>\n<hr class=\"wp-block-separator\" />\n<h2>Coding Enhancements</h2>\n<img src=\"https://i2.wp.com/wordpress.org/news/files/2017/11/coding-enhancements-small.png?w=632&ssl=1\" alt=\"\" />\n<h3>Syntax Highlighting and Error Checking? Yes, Please!</h3>\n<p>You’ve got a display problem but can’t quite figure out exactly what went wrong in the CSS you lovingly wrote. With syntax highlighting and error checking for CSS editing and the Custom HTML widget introduced in WordPress 4.8.1, you’ll pinpoint coding errors quickly. Practically guaranteed to help you scan code more easily, and suss out &amp; fix code errors quickly.</p>\n<h3>Sandbox for Safety</h3>\n<p>The dreaded white screen. You’ll avoid it when working on themes and plugin code because WordPress 4.9 will warn you about saving an error. You’ll sleep better at night.</p>\n<h3>Warning: Potential Danger Ahead!</h3>\n<p>When you edit themes and plugins directly, WordPress 4.9 will politely warn you that this is a dangerous practice and will recommend that you draft and test changes before updating your file. Take the safe route: You’ll thank you. Your team and customers will thank you.</p>\n<hr class=\"wp-block-separator\" />\n<h2>Even More Widget Updates </h2>\n<img src=\"https://i1.wp.com/wordpress.org/news/files/2017/11/even-more-widget-updates-small.png?w=632&ssl=1\" alt=\"\" />\n<h3>The New Gallery Widget</h3>\n<p>An incremental improvement to the media changes hatched in WordPress 4.8, you can now add a gallery via this new widget. Yes!</p>\n<h3>Press a Button, Add Media</h3>\n<p>Want to add media to your text widget? Embed images, video, and audio directly into the widget along with your text, with our simple but useful Add Media button. Woo!</p>\n<hr class=\"wp-block-separator\" />\n<h2>Site Building Improvements </h2>\n<img src=\"https://i1.wp.com/wordpress.org/news/files/2017/11/site-building-improvements-small.png?w=632&ssl=1\" alt=\"\" />\n<h3>More Reliable Theme Switching</h3>\n<p>When you switch themes, widgets sometimes think they can just move location. Improvements in WordPress 4.9 offer more persistent menu and widget placement when you decide it’s time for a new theme. </p>\n<h3>Find and Preview the Perfect Theme</h3>\n<p>Looking for a new theme for your site? Now, from within the Customizer, you can search, browse, and preview over 2600 themes before deploying changes to your site. What’s more, you can speed your search with filters for subject, features, and layout.</p>\n<h3>Better Menu Instructions = Less Confusion</h3>\n<p>Were you confused by the steps to create a new menu? Perhaps no longer! We’ve ironed out the UX for a smoother menu creation process. Newly updated copy will guide you.</p>\n<hr class=\"wp-block-separator\" />\n<h2>Lend a Hand with Gutenberg ?</h2>\n<img src=\"https://i2.wp.com/wordpress.org/news/files/2017/11/gutenberg-1.png?w=632&ssl=1\" alt=\"\" />\n<p>WordPress is working on a new way to create and control your content and we’d love to have your help. Interested in being an <a href=\"https://wordpress.org/plugins/gutenberg/\">early tester</a> or getting involved with the Gutenberg project? <a href=\"https://github.com/WordPress/gutenberg\">Contribute on GitHub</a>.</p>\n<p>(PS: this post was written in Gutenberg!)</p>\n<hr class=\"wp-block-separator\" />\n<h2>Developer Happiness ?</h2>\n<h3><a href=\"https://make.wordpress.org/core/2017/11/01/improvements-to-the-customize-js-api-in-4-9/\">Customizer JS API Improvements</a></h3>\n<p>We’ve made numerous improvements to the Customizer JS API in WordPress 4.9, eliminating many pain points. (Hello, default parameters for constructs! Goodbye repeated ID for constructs!) There are also new base control templates, a date/time control, and section/panel/global notifications to name a few. <a href=\"https://make.wordpress.org/core/2017/11/01/improvements-to-the-customize-js-api-in-4-9/\">Check out the full list.</a></p>\n<h3><a href=\"https://make.wordpress.org/core/2017/10/22/code-editing-improvements-in-wordpress-4-9/\">CodeMirror available for use in your themes and plugins</a></h3>\n<p>We’ve introduced a new code editing library, CodeMirror, for use within core. CodeMirror allows for syntax highlighting, error checking, and validation when creating code writing or editing experiences within your plugins, like CSS or JavaScript include fields.</p>\n<h3><a href=\"https://make.wordpress.org/core/2017/10/30/mediaelement-upgrades-in-wordpress-4-9/\">MediaElement.js upgraded to 4.2.6</a></h3>\n<p>WordPress 4.9 includes an upgraded version of MediaElement.js, which removes dependencies on jQuery, improves accessibility, modernizes the UI, and fixes many bugs.</p>\n<h3><a href=\"https://make.wordpress.org/core/2017/10/15/improvements-for-roles-and-capabilities-in-4-9/\">Roles and Capabilities Improvements</a></h3>\n<p>New capabilities have been introduced that allow granular management of plugins and translation files. In addition, the site switching process in multisite has been fine-tuned to update the available roles and capabilities in a more reliable and coherent way.</p>\n<hr class=\"wp-block-separator\" />\n<h2>The Squad</h2>\n<p>This release was led by <a href=\"https://choycedesign.com/\">Mel Choyce</a> and <a href=\"https://weston.ruter.net/\">Weston Ruter</a>, with the help of the following fabulous folks. There are 443 contributors with props in this release, with 185 of them contributing for the first time. Pull up some Billy Tipton on your music service of choice, and check out some of their profiles:</p>\n<p><a href=\"https://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/abrightclearweb\">abrightclearweb</a>, <a href=\"https://profiles.wordpress.org/ibachal\">Achal Jain</a>, <a href=\"https://profiles.wordpress.org/achbed\">achbed</a>, <a href=\"https://profiles.wordpress.org/acmethemes\">Acme Themes</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/adammacias\">adammacias</a>, <a href=\"https://profiles.wordpress.org/mrahmadawais\">Ahmad Awais</a>, <a href=\"https://profiles.wordpress.org/ahmadawais\">ahmadawais</a>, <a href=\"https://profiles.wordpress.org/airesvsg\">airesvsg</a>, <a href=\"https://profiles.wordpress.org/ajoah\">ajoah</a>, <a href=\"https://profiles.wordpress.org/akibjorklund\">Aki Bj&#246;rklund</a>, <a href=\"https://profiles.wordpress.org/akshayvinchurkar\">akshayvinchurkar</a>, <a href=\"https://profiles.wordpress.org/schlessera\">Alain Schlesser</a>, <a href=\"https://profiles.wordpress.org/xknown\">Alex Concha</a>, <a href=\"https://profiles.wordpress.org/xavortm\">Alex Dimitrov</a>, <a href=\"https://profiles.wordpress.org/ironpaperweight\">Alex Hon</a>, <a href=\"https://profiles.wordpress.org/alex27\">alex27</a>, <a href=\"https://profiles.wordpress.org/allancole\">allancole</a>, <a href=\"https://profiles.wordpress.org/arush\">Amanda Rush</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/andrewp-2\">Andreas Panag</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/rarst\">Andrey \"Rarst\" Savchenko</a>, <a href=\"https://profiles.wordpress.org/andizer\">Andy Meerwaldt</a>, <a href=\"https://profiles.wordpress.org/kelderic\">Andy Mercer</a>, <a href=\"https://profiles.wordpress.org/andy\">Andy Skelton</a>, <a href=\"https://profiles.wordpress.org/aniketpant\">Aniket Pant</a>, <a href=\"https://profiles.wordpress.org/anilbasnet\">Anil Basnet</a>, <a href=\"https://profiles.wordpress.org/ankit-k-gupta\">Ankit K Gupta</a>, <a href=\"https://profiles.wordpress.org/ahortin\">Anthony Hortin</a>, <a href=\"https://profiles.wordpress.org/antisilent\">antisilent</a>, <a href=\"https://profiles.wordpress.org/atimmer\">Anton Timmermans</a>, <a href=\"https://profiles.wordpress.org/apokalyptik\">apokalyptik</a>, <a href=\"https://profiles.wordpress.org/artoliukkonen\">artoliukkonen</a>, <a href=\"https://profiles.wordpress.org/ideag\">Arunas Liuiza</a>, <a href=\"https://profiles.wordpress.org/attitude\">attitude</a>, <a href=\"https://profiles.wordpress.org/backermann\">backermann</a>, <a href=\"https://profiles.wordpress.org/b-07\">Bappi</a>, <a href=\"https://profiles.wordpress.org/bcole808\">Ben Cole</a>, <a href=\"https://profiles.wordpress.org/quasel\">Bernhard Gronau</a>, <a href=\"https://profiles.wordpress.org/kau-boy\">Bernhard Kau</a>, <a href=\"https://profiles.wordpress.org/binarymoon\">binarymoon</a>, <a href=\"https://profiles.wordpress.org/birgire\">Birgir Erlendsson (birgire)</a>, <a href=\"https://profiles.wordpress.org/bjornw\">BjornW</a>, <a href=\"https://profiles.wordpress.org/bobbingwide\">bobbingwide</a>, <a href=\"https://profiles.wordpress.org/boblinthorst\">boblinthorst</a>, <a href=\"https://profiles.wordpress.org/boboudreau\">boboudreau</a>, <a href=\"https://profiles.wordpress.org/gitlost\">bonger</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone B. Gorges</a>, <a href=\"https://profiles.wordpress.org/bradyvercher\">Brady Vercher</a>, <a href=\"https://profiles.wordpress.org/brainstormforce\">Brainstorm Force</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/brianhogg\">Brian Hogg</a>, <a href=\"https://profiles.wordpress.org/krogsgard\">Brian Krogsgard</a>, <a href=\"https://profiles.wordpress.org/bronsonquick\">Bronson Quick</a>, <a href=\"https://profiles.wordpress.org/sixhours\">Caroline Moore</a>, <a href=\"https://profiles.wordpress.org/caseypatrickdriscoll\">Casey Driscoll</a>, <a href=\"https://profiles.wordpress.org/caspie\">Caspie</a>, <a href=\"https://profiles.wordpress.org/chandrapatel\">Chandra Patel</a>, <a href=\"https://profiles.wordpress.org/chaos-engine\">Chaos Engine</a>, <a href=\"https://profiles.wordpress.org/cheeserolls\">cheeserolls</a>, <a href=\"https://profiles.wordpress.org/chesio\">chesio</a>, <a href=\"https://profiles.wordpress.org/ketuchetan\">chetansatasiya</a>, <a href=\"https://profiles.wordpress.org/choongsavvii\">choong</a>, <a href=\"https://profiles.wordpress.org/chouby\">Chouby</a>, <a href=\"https://profiles.wordpress.org/chredd\">chredd</a>, <a href=\"https://profiles.wordpress.org/chrisjean\">Chris Jean</a>, <a href=\"https://profiles.wordpress.org/cmmarslender\">Chris Marslender</a>, <a href=\"https://profiles.wordpress.org/chris_d2d\">Chris Smith</a>, <a href=\"https://profiles.wordpress.org/chrisvanpatten\">Chris Van Patten</a>, <a href=\"https://profiles.wordpress.org/chriswiegman\">Chris Wiegman</a>, <a href=\"https://profiles.wordpress.org/chriscct7\">chriscct7</a>, <a href=\"https://profiles.wordpress.org/chriseverson\">chriseverson</a>, <a href=\"https://profiles.wordpress.org/christian1012\">Christian Chung</a>, <a href=\"https://profiles.wordpress.org/cwpnolen\">Christian Nolen</a>, <a href=\"https://profiles.wordpress.org/needle\">Christian Wach</a>, <a href=\"https://profiles.wordpress.org/christophherr\">Christoph Herr</a>, <a href=\"https://profiles.wordpress.org/clarionwpdeveloper\">Clarion Technologies</a>, <a href=\"https://profiles.wordpress.org/claudiosmweb\">Claudio Sanches</a>, <a href=\"https://profiles.wordpress.org/claudiosanches\">Claudio Sanches</a>, <a href=\"https://profiles.wordpress.org/claudiolabarbera\">ClaudioLaBarbera</a>, <a href=\"https://profiles.wordpress.org/codemovementpk\">codemovement.pk</a>, <a href=\"https://profiles.wordpress.org/coderkevin\">coderkevin</a>, <a href=\"https://profiles.wordpress.org/codfish\">codfish</a>, <a href=\"https://profiles.wordpress.org/coreymcollins\">coreymcollins</a>, <a href=\"https://profiles.wordpress.org/curdin\">Curdin Krummenacher</a>, <a href=\"https://profiles.wordpress.org/cgrymala\">Curtiss Grymala</a>, <a href=\"https://profiles.wordpress.org/cdog\">Cătălin Dogaru</a>, <a href=\"https://profiles.wordpress.org/danhgilmore\">danhgilmore</a>, <a href=\"https://profiles.wordpress.org/danielbachhuber\">Daniel Bachhuber </a>, <a href=\"https://profiles.wordpress.org/danielkanchev\">Daniel Kanchev</a>, <a href=\"https://profiles.wordpress.org/danielpietrasik\">Daniel Pietrasik</a>, <a href=\"https://profiles.wordpress.org/mte90\">Daniele Scasciafratte</a>, <a href=\"https://profiles.wordpress.org/dllh\">Daryl L. L. Houston (dllh)</a>, <a href=\"https://profiles.wordpress.org/davepullig\">Dave Pullig</a>, <a href=\"https://profiles.wordpress.org/goto10\">Dave Romsey (goto10)</a>, <a href=\"https://profiles.wordpress.org/davidakennedy\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/turtlepod\">David Chandra Purnama</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/dglingren\">David Lingren</a>, <a href=\"https://profiles.wordpress.org/davidmosterd\">David Mosterd</a>, <a href=\"https://profiles.wordpress.org/dshanske\">David Shanske</a>, <a href=\"https://profiles.wordpress.org/davidbhayes\">davidbhayes</a>, <a href=\"https://profiles.wordpress.org/folletto\">Davide \'Folletto\' Casali</a>, <a href=\"https://profiles.wordpress.org/deeptiboddapati\">deeptiboddapati</a>, <a href=\"https://profiles.wordpress.org/delphinus\">delphinus</a>, <a href=\"https://profiles.wordpress.org/deltafactory\">deltafactory</a>, <a href=\"https://profiles.wordpress.org/denis-de-bernardy\">Denis de Bernardy</a>, <a href=\"https://profiles.wordpress.org/valendesigns\">Derek Herman</a>, <a href=\"https://profiles.wordpress.org/pcfreak30\">Derrick Hammer</a>, <a href=\"https://profiles.wordpress.org/derrickkoo\">Derrick Koo</a>, <a href=\"https://profiles.wordpress.org/dimchik\">dimchik</a>, <a href=\"https://profiles.wordpress.org/dineshc\">Dinesh Chouhan</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/dipeshkakadiya\">dipeshkakadiya</a>, <a href=\"https://profiles.wordpress.org/dmsnell\">dmsnell</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/dotancohen\">Dotan Cohen</a>, <a href=\"https://profiles.wordpress.org/dougwollison\">Doug Wollison</a>, <a href=\"https://profiles.wordpress.org/doughamlin\">doughamlin</a>, <a href=\"https://profiles.wordpress.org/dreamon11\">DreamOn11</a>, <a href=\"https://profiles.wordpress.org/drewapicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/duncanjbrown\">duncanjbrown</a>, <a href=\"https://profiles.wordpress.org/dungengronovius\">dungengronovius</a>, <a href=\"https://profiles.wordpress.org/dylanauty\">DylanAuty</a>, <a href=\"https://profiles.wordpress.org/hurtige\">Eddie Hurtig</a>, <a href=\"https://profiles.wordpress.org/oso96_2000\">Eduardo Reveles</a>, <a href=\"https://profiles.wordpress.org/chopinbach\">Edwin Cromley</a>, <a href=\"https://profiles.wordpress.org/electricfeet\">ElectricFeet</a>, <a href=\"https://profiles.wordpress.org/eliorivero\">Elio Rivero</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Ella Iseulde Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/elyobo\">elyobo</a>, <a href=\"https://profiles.wordpress.org/enodekciw\">enodekciw</a>, <a href=\"https://profiles.wordpress.org/enshrined\">enshrined</a>, <a href=\"https://profiles.wordpress.org/ericlewis\">Eric Andrew Lewis</a>, <a href=\"https://profiles.wordpress.org/pushred\">Eric Lanehart</a>, <a href=\"https://profiles.wordpress.org/eherman24\">Evan Herman</a>, <a href=\"https://profiles.wordpress.org/flixos90\">Felix Arntz</a>, <a href=\"https://profiles.wordpress.org/fencer04\">Fencer04</a>, <a href=\"https://profiles.wordpress.org/florianbrinkmann\">Florian Brinkmann</a>, <a href=\"https://profiles.wordpress.org/mista-flo\">Florian TIAR</a>, <a href=\"https://profiles.wordpress.org/foliovision\">FolioVision</a>, <a href=\"https://profiles.wordpress.org/fomenkoandrey\">fomenkoandrey</a>, <a href=\"https://profiles.wordpress.org/frank-klein\">Frank Klein</a>, <a href=\"https://profiles.wordpress.org/frankiet\">Frankie</a>, <a href=\"https://profiles.wordpress.org/fjarrett\">Frankie Jarrett</a>, <a href=\"https://profiles.wordpress.org/akeif\">Fred</a>, <a href=\"https://profiles.wordpress.org/frozzare\">Fredrik Forsmo</a>, <a href=\"https://profiles.wordpress.org/fuscata\">fuscata</a>, <a href=\"https://profiles.wordpress.org/gma992\">Gabriel Maldonado</a>, <a href=\"https://profiles.wordpress.org/voldemortensen\">Garth Mortensen</a>, <a href=\"https://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/geekysoft\">Geeky Software</a>, <a href=\"https://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"https://profiles.wordpress.org/goranseric\">Goran &#352;erić</a>, <a href=\"https://profiles.wordpress.org/grahamarmfield\">Graham Armfield</a>, <a href=\"https://profiles.wordpress.org/grantderepas\">Grant Derepas</a>, <a href=\"https://profiles.wordpress.org/tivnet\">Gregory Karpinsky (@tivnet)</a>, <a href=\"https://profiles.wordpress.org/hardeepasrani\">Hardeep Asrani</a>, <a href=\"https://profiles.wordpress.org/helen\">Helen Hou-Sandí</a>, <a href=\"https://profiles.wordpress.org/henrywright\">Henry Wright</a>, <a href=\"https://profiles.wordpress.org/hiddenpearls\">hiddenpearls</a>, <a href=\"https://profiles.wordpress.org/hnle\">Hinaloe</a>, <a href=\"https://profiles.wordpress.org/hristo-sg\">Hristo Pandjarov</a>, <a href=\"https://profiles.wordpress.org/hugobaeta\">Hugo Baeta</a>, <a href=\"https://profiles.wordpress.org/polevaultweb\">Iain Poulson</a>, <a href=\"https://profiles.wordpress.org/iandunn\">Ian Dunn</a>, <a href=\"https://profiles.wordpress.org/ianedington\">Ian Edington</a>, <a href=\"https://profiles.wordpress.org/idealien\">idealien</a>, <a href=\"https://profiles.wordpress.org/igmoweb\">Ignacio Cruz Moreno</a>, <a href=\"https://profiles.wordpress.org/imath\">imath</a>, <a href=\"https://profiles.wordpress.org/implenton\">implenton</a>, <a href=\"https://profiles.wordpress.org/ionutst\">Ionut Stanciu</a>, <a href=\"https://profiles.wordpress.org/ipstenu\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/ivdimova\">ivdimova</a>, <a href=\"https://profiles.wordpress.org/jdgrimes\">J.D. Grimes</a>, <a href=\"https://profiles.wordpress.org/jakept\">Jacob Peattie</a>, <a href=\"https://profiles.wordpress.org/whyisjake\">Jake Spurlock</a>, <a href=\"https://profiles.wordpress.org/jnylen0\">James Nylen</a>, <a href=\"https://profiles.wordpress.org/jamesacero\">jamesacero</a>, <a href=\"https://profiles.wordpress.org/japh\">Japh</a>, <a href=\"https://profiles.wordpress.org/jaredcobb\">Jared Cobb</a>, <a href=\"https://profiles.wordpress.org/jayarjo\">jayarjo</a>, <a href=\"https://profiles.wordpress.org/jdolan\">jdolan</a>, <a href=\"https://profiles.wordpress.org/jdoubleu\">jdoubleu</a>, <a href=\"https://profiles.wordpress.org/jblz\">Jeff Bowen</a>, <a href=\"https://profiles.wordpress.org/jbpaul17\">Jeff Paul</a>, <a href=\"https://profiles.wordpress.org/cheffheid\">Jeffrey de Wit</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jpry\">Jeremy Pry</a>, <a href=\"https://profiles.wordpress.org/jimt\">jimt</a>, <a href=\"https://profiles.wordpress.org/jipmoors\">Jip Moors</a>, <a href=\"https://profiles.wordpress.org/jmusal\">jmusal</a>, <a href=\"https://profiles.wordpress.org/joedolson\">Joe Dolson</a>, <a href=\"https://profiles.wordpress.org/joehoyle\">Joe Hoyle</a>, <a href=\"https://profiles.wordpress.org/joemcgill\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/joelcj91\">Joel James</a>, <a href=\"https://profiles.wordpress.org/johanmynhardt\">johanmynhardt</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/zyphonic\">John Dittmar</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/johnpbloch\">John P. Bloch</a>, <a href=\"https://profiles.wordpress.org/johnregan3\">John Regan</a>, <a href=\"https://profiles.wordpress.org/johnpgreen\">johnpgreen</a>, <a href=\"https://profiles.wordpress.org/kenshino\">Jon (Kenshino)</a>, <a href=\"https://profiles.wordpress.org/jonathanbardo\">Jonathan Bardo</a>, <a href=\"https://profiles.wordpress.org/jbrinley\">Jonathan Brinley</a>, <a href=\"https://profiles.wordpress.org/daggerhart\">Jonathan Daggerhart</a>, <a href=\"https://profiles.wordpress.org/desrosj\">Jonathan Desrosiers</a>, <a href=\"https://profiles.wordpress.org/spacedmonkey\">Jonny Harris</a>, <a href=\"https://profiles.wordpress.org/jonnyauk\">jonnyauk</a>, <a href=\"https://profiles.wordpress.org/jordesign\">jordesign</a>, <a href=\"https://profiles.wordpress.org/jorritschippers\">JorritSchippers</a>, <a href=\"https://profiles.wordpress.org/joefusco\">Joseph Fusco</a>, <a href=\"https://profiles.wordpress.org/jjeaton\">Josh Eaton</a>, <a href=\"https://profiles.wordpress.org/shelob9\">Josh Pollock</a>, <a href=\"https://profiles.wordpress.org/joshcummingsdesign\">joshcummingsdesign</a>, <a href=\"https://profiles.wordpress.org/joshkadis\">joshkadis</a>, <a href=\"https://profiles.wordpress.org/joyously\">Joy</a>, <a href=\"https://profiles.wordpress.org/jrf\">jrf</a>, <a href=\"https://profiles.wordpress.org/jrgould\">JRGould</a>, <a href=\"https://profiles.wordpress.org/juanfra\">Juanfra Aldasoro</a>, <a href=\"https://profiles.wordpress.org/juhise\">Juhi Saxena</a>, <a href=\"https://profiles.wordpress.org/nukaga\">Junko Nukaga</a>, <a href=\"https://profiles.wordpress.org/justinbusa\">Justin Busa</a>, <a href=\"https://profiles.wordpress.org/justinsainton\">Justin Sainton</a>, <a href=\"https://profiles.wordpress.org/jshreve\">Justin Shreve</a>, <a href=\"https://profiles.wordpress.org/jtsternberg\">Justin Sternberg</a>, <a href=\"https://profiles.wordpress.org/kadamwhite\">K.Adam White</a>, <a href=\"https://profiles.wordpress.org/kacperszurek\">kacperszurek</a>, <a href=\"https://profiles.wordpress.org/trepmal\">Kailey (trepmal)</a>, <a href=\"https://profiles.wordpress.org/kalenjohnson\">KalenJohnson</a>, <a href=\"https://profiles.wordpress.org/codebykat\">Kat Hagan</a>, <a href=\"https://profiles.wordpress.org/kkoppenhaver\">Keanan Koppenhaver</a>, <a href=\"https://profiles.wordpress.org/keesiemeijer\">keesiemeijer</a>, <a href=\"https://profiles.wordpress.org/kellbot\">kellbot</a>, <a href=\"https://profiles.wordpress.org/ryelle\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/khag7\">Kevin Hagerty</a>, <a href=\"https://profiles.wordpress.org/kwight\">Kirk Wight</a>, <a href=\"https://profiles.wordpress.org/kitchin\">kitchin</a>, <a href=\"https://profiles.wordpress.org/ixkaito\">Kite</a>, <a href=\"https://profiles.wordpress.org/kjbenk\">kjbenk</a>, <a href=\"https://profiles.wordpress.org/knutsp\">Knut Sparhell</a>, <a href=\"https://profiles.wordpress.org/koenschipper\">koenschipper</a>, <a href=\"https://profiles.wordpress.org/kokarn\">kokarn</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/obenland\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/kouratoras\">Konstantinos Kouratoras</a>, <a href=\"https://profiles.wordpress.org/kuchenundkakao\">kuchenundkakao</a>, <a href=\"https://profiles.wordpress.org/kuldipem\">kuldipem</a>, <a href=\"https://profiles.wordpress.org/laurelfulford\">Laurel Fulford</a>, <a href=\"https://profiles.wordpress.org/leewillis77\">Lee Willis</a>, <a href=\"https://profiles.wordpress.org/leobaiano\">Leo Baiano</a>, <a href=\"https://profiles.wordpress.org/littlebigthing\">LittleBigThings (Csaba)</a>, <a href=\"https://profiles.wordpress.org/lucasstark\">Lucas Stark</a>, <a href=\"https://profiles.wordpress.org/lukecavanagh\">Luke Cavanagh</a>, <a href=\"https://profiles.wordpress.org/lgedeon\">Luke Gedeon</a>, <a href=\"https://profiles.wordpress.org/lukepettway\">Luke Pettway</a>, <a href=\"https://profiles.wordpress.org/lyubomir_popov\">lyubomir_popov</a>, <a href=\"https://profiles.wordpress.org/mariovalney\">M&#225;rio Valney</a>, <a href=\"https://profiles.wordpress.org/mageshp\">mageshp</a>, <a href=\"https://profiles.wordpress.org/mahesh901122\">Mahesh Waghmare</a>, <a href=\"https://profiles.wordpress.org/mangeshp\">Mangesh Parte</a>, <a href=\"https://profiles.wordpress.org/manishsongirkar36\">Manish Songirkar</a>, <a href=\"https://profiles.wordpress.org/mantismamita\">mantismamita</a>, <a href=\"https://profiles.wordpress.org/mbootsman\">Marcel Bootsman</a>, <a href=\"https://profiles.wordpress.org/tyxla\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius L. J.</a>, <a href=\"https://profiles.wordpress.org/mbelchev\">Mariyan Belchev</a>, <a href=\"https://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"https://profiles.wordpress.org/mrwweb\">Mark Root-Wiley</a>, <a href=\"https://profiles.wordpress.org/mapk\">Mark Uraine</a>, <a href=\"https://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/markshep\">markshep</a>, <a href=\"https://profiles.wordpress.org/matrixik\">matrixik</a>, <a href=\"https://profiles.wordpress.org/mjbanks\">Matt Banks</a>, <a href=\"https://profiles.wordpress.org/mattking5000\">Matt King</a>, <a href=\"https://profiles.wordpress.org/matt\">Matt Mullenweg</a>, <a href=\"https://profiles.wordpress.org/jaworskimatt\">Matt PeepSo</a>, <a href=\"https://profiles.wordpress.org/veraxus\">Matt van Andel</a>, <a href=\"https://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"https://profiles.wordpress.org/mattheu\">Matthew Haines-Young</a>, <a href=\"https://profiles.wordpress.org/mattyrob\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/maxcutler\">Max Cutler</a>, <a href=\"https://profiles.wordpress.org/maximeculea\">Maxime Culea</a>, <a href=\"https://profiles.wordpress.org/mayukojpn\">Mayo Moriyama</a>, <a href=\"https://profiles.wordpress.org/mckernanin\">mckernanin</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/mhowell\">mhowell</a>, <a href=\"https://profiles.wordpress.org/michaelarestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/michael-arestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/michalzuber\">michalzuber</a>, <a href=\"https://profiles.wordpress.org/stubgo\">Miina Sikk</a>, <a href=\"https://profiles.wordpress.org/mauteri\">Mike Auteri</a>, <a href=\"https://profiles.wordpress.org/mihai2u\">Mike Crantea</a>, <a href=\"https://profiles.wordpress.org/mdgl\">Mike Glendinning</a>, <a href=\"https://profiles.wordpress.org/mikehansenme\">Mike Hansen</a>, <a href=\"https://profiles.wordpress.org/mikelittle\">Mike Little</a>, <a href=\"https://profiles.wordpress.org/mikeschroder\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/mikeviele\">Mike Viele</a>, <a href=\"https://profiles.wordpress.org/dimadin\">Milan Dinić</a>, <a href=\"https://profiles.wordpress.org/modemlooper\">modemlooper</a>, <a href=\"https://profiles.wordpress.org/batmoo\">Mohammad Jangda</a>, <a href=\"https://profiles.wordpress.org/deremohan\">Mohan Dere</a>, <a href=\"https://profiles.wordpress.org/monikarao\">Monika Rao</a>, <a href=\"https://profiles.wordpress.org/morettigeorgiev\">morettigeorgiev</a>, <a href=\"https://profiles.wordpress.org/morganestes\">Morgan Estes</a>, <a href=\"https://profiles.wordpress.org/mor10\">Morten Rand-Hendriksen</a>, <a href=\"https://profiles.wordpress.org/mt8biz\">moto hachi ( mt8.biz )</a>, <a href=\"https://profiles.wordpress.org/mrbobbybryant\">mrbobbybryant</a>, <a href=\"https://profiles.wordpress.org/nnaimov\">Naim Naimov</a>, <a href=\"https://profiles.wordpress.org/natereist\">Nate Reist</a>, <a href=\"https://profiles.wordpress.org/natewr\">NateWr</a>, <a href=\"https://profiles.wordpress.org/nathanrice\">nathanrice</a>, <a href=\"https://profiles.wordpress.org/nazgul\">Nazgul</a>, <a href=\"https://profiles.wordpress.org/greatislander\">Ned Zimmerman</a>, <a href=\"https://profiles.wordpress.org/krstarica\">net</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey </a>, <a href=\"https://profiles.wordpress.org/nikeo\">Nicolas GUILLAUME</a>, <a href=\"https://profiles.wordpress.org/nikschavan\">Nikhil Chavan</a>, <a href=\"https://profiles.wordpress.org/nikv\">Nikhil Vimal</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/rabmalin\">Nilambar Sharma</a>, <a href=\"https://profiles.wordpress.org/noplanman\">noplanman</a>, <a href=\"https://profiles.wordpress.org/nullvariable\">nullvariable</a>, <a href=\"https://profiles.wordpress.org/odie2\">odie2</a>, <a href=\"https://profiles.wordpress.org/odysseygate\">odyssey</a>, <a href=\"https://profiles.wordpress.org/hideokamoto\">Okamoto Hidetaka</a>, <a href=\"https://profiles.wordpress.org/orvils\">orvils</a>, <a href=\"https://profiles.wordpress.org/oskosk\">oskosk</a>, <a href=\"https://profiles.wordpress.org/ottok\">Otto Kek&#228;l&#228;inen</a>, <a href=\"https://profiles.wordpress.org/ovann86\">ovann86</a>, <a href=\"https://profiles.wordpress.org/imnok\">Pantip Treerattanapitak (Nok)</a>, <a href=\"https://profiles.wordpress.org/swissspidy\">Pascal Birchler</a>, <a href=\"https://profiles.wordpress.org/patilvikasj\">patilvikasj</a>, <a href=\"https://profiles.wordpress.org/pbearne\">Paul Bearne</a>, <a href=\"https://profiles.wordpress.org/paulwilde\">Paul Wilde</a>, <a href=\"https://profiles.wordpress.org/sirbrillig\">Payton Swick</a>, <a href=\"https://profiles.wordpress.org/pdufour\">pdufour</a>, <a href=\"https://profiles.wordpress.org/piewp\">Perdaan</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/phh\">phh</a>, <a href=\"https://profiles.wordpress.org/php\">php</a>, <a href=\"https://profiles.wordpress.org/delawski\">Piotr Delawski</a>, <a href=\"https://profiles.wordpress.org/pippinsplugins\">pippinsplugins</a>, <a href=\"https://profiles.wordpress.org/pjgalbraith\">pjgalbraith</a>, <a href=\"https://profiles.wordpress.org/pkevan\">pkevan</a>, <a href=\"https://profiles.wordpress.org/pratikchaskar\">Pratik</a>, <a href=\"https://profiles.wordpress.org/pressionate\">Pressionate</a>, <a href=\"https://profiles.wordpress.org/presskopp\">Presskopp</a>, <a href=\"https://profiles.wordpress.org/procodewp\">procodewp</a>, <a href=\"https://profiles.wordpress.org/rachelbaker\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/rahulsprajapati\">Rahul Prajapati</a>, <a href=\"https://profiles.wordpress.org/superpoincare\">Ramanan</a>, <a href=\"https://profiles.wordpress.org/ramiy\">Rami Yushuvaev</a>, <a href=\"https://profiles.wordpress.org/ramiabraham\">ramiabraham</a>, <a href=\"https://profiles.wordpress.org/ranh\">ranh</a>, <a href=\"https://profiles.wordpress.org/redsand\">Red Sand Media Group</a>, <a href=\"https://profiles.wordpress.org/youknowriad\">Riad Benguella</a>, <a href=\"https://profiles.wordpress.org/rianrietveld\">Rian Rietveld</a>, <a href=\"https://profiles.wordpress.org/iamfriendly\">Richard Tape</a>, <a href=\"https://profiles.wordpress.org/rpayne7264\">Robert D Payne</a>, <a href=\"https://profiles.wordpress.org/iamjolly\">Robert Jolly</a>, <a href=\"https://profiles.wordpress.org/rnoakes3rd\">Robert Noakes</a>, <a href=\"https://profiles.wordpress.org/d4z_c0nf\">Rocco Aliberti</a>, <a href=\"https://profiles.wordpress.org/rodrigosprimo\">Rodrigo Primo</a>, <a href=\"https://profiles.wordpress.org/rommelxcastro\">Rommel Castro</a>, <a href=\"https://profiles.wordpress.org/fronaldaraujo\">Ronald Ara&#250;jo</a>, <a href=\"https://profiles.wordpress.org/magicroundabout\">Ross Wintle</a>, <a href=\"https://profiles.wordpress.org/guavaworks\">Roy Sivan</a>, <a href=\"https://profiles.wordpress.org/ryankienstra\">Ryan Kienstra</a>, <a href=\"https://profiles.wordpress.org/rmccue\">Ryan McCue</a>, <a href=\"https://profiles.wordpress.org/ryanplas\">Ryan Plas</a>, <a href=\"https://profiles.wordpress.org/welcher\">Ryan Welcher</a>, <a href=\"https://profiles.wordpress.org/salcode\">Sal Ferrarello</a>, <a href=\"https://profiles.wordpress.org/samikeijonen\">Sami Keijonen</a>, <a href=\"https://profiles.wordpress.org/solarissmoke\">Samir Shah</a>, <a href=\"https://profiles.wordpress.org/samuelsidler\">Samuel Sidler</a>, <a href=\"https://profiles.wordpress.org/sandesh055\">Sandesh</a>, <a href=\"https://profiles.wordpress.org/smyoon315\">Sang-Min Yoon</a>, <a href=\"https://profiles.wordpress.org/sanketparmar\">Sanket Parmar</a>, <a href=\"https://profiles.wordpress.org/pollyplummer\">Sarah Gooding</a>, <a href=\"https://profiles.wordpress.org/sayedwp\">Sayed Taqui</a>, <a href=\"https://profiles.wordpress.org/schrapel\">schrapel</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/scrappyhuborg\">scrappy@hub.org</a>, <a href=\"https://profiles.wordpress.org/scribu\">scribu</a>, <a href=\"https://profiles.wordpress.org/seancjones\">seancjones</a>, <a href=\"https://profiles.wordpress.org/sebastianpisula\">Sebastian Pisula</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/sgr33n\">Sergio De Falco</a>, <a href=\"https://profiles.wordpress.org/sfpt\">sfpt</a>, <a href=\"https://profiles.wordpress.org/shayanys\">shayanys</a>, <a href=\"https://profiles.wordpress.org/shazahm1hotmailcom\">shazahm1</a>, <a href=\"https://profiles.wordpress.org/shprink\">shprink</a>, <a href=\"https://profiles.wordpress.org/simonlampen\">simonlampen</a>, <a href=\"https://profiles.wordpress.org/skippy\">skippy</a>, <a href=\"https://profiles.wordpress.org/smerriman\">smerriman</a>, <a href=\"https://profiles.wordpress.org/snacking\">snacking</a>, <a href=\"https://profiles.wordpress.org/solal\">solal</a>, <a href=\"https://profiles.wordpress.org/soean\">Soren Wrede</a>, <a href=\"https://profiles.wordpress.org/sstoqnov\">Stanimir Stoyanov</a>, <a href=\"https://profiles.wordpress.org/metodiew\">Stanko Metodiev</a>, <a href=\"https://profiles.wordpress.org/sharkomatic\">Steph</a>, <a href=\"https://profiles.wordpress.org/sswells\">Steph Wells</a>, <a href=\"https://profiles.wordpress.org/sillybean\">Stephanie Leary</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/stephenharris\">Stephen Harris</a>, <a href=\"https://profiles.wordpress.org/stevenkword\">Steven Word</a>, <a href=\"https://profiles.wordpress.org/stevenlinx\">stevenlinx</a>, <a href=\"https://profiles.wordpress.org/sudar\">Sudar Muthu</a>, <a href=\"https://profiles.wordpress.org/patilswapnilv\">Swapnil V. Patil</a>, <a href=\"https://profiles.wordpress.org/swapnild\">swapnild</a>, <a href=\"https://profiles.wordpress.org/szaqal21\">szaqal21</a>, <a href=\"https://profiles.wordpress.org/takahashi_fumiki\">Takahashi Fumiki</a>, <a href=\"https://profiles.wordpress.org/miyauchi\">Takayuki Miyauchi</a>, <a href=\"https://profiles.wordpress.org/karmatosed\">Tammie Lister</a>, <a href=\"https://profiles.wordpress.org/tapsboy\">tapsboy</a>, <a href=\"https://profiles.wordpress.org/tlovett1\">Taylor Lovett</a>, <a href=\"https://profiles.wordpress.org/team\">team</a>, <a href=\"https://profiles.wordpress.org/tg29359\">tg29359</a>, <a href=\"https://profiles.wordpress.org/tharsheblows\">tharsheblows</a>, <a href=\"https://profiles.wordpress.org/the\">the</a>, <a href=\"https://profiles.wordpress.org/themeshaper\">themeshaper</a>, <a href=\"https://profiles.wordpress.org/thenbrent\">thenbrent</a>, <a href=\"https://profiles.wordpress.org/thomaswm\">thomaswm</a>, <a href=\"https://profiles.wordpress.org/tfrommen\">Thorsten Frommen</a>, <a href=\"https://profiles.wordpress.org/tierra\">tierra</a>, <a href=\"https://profiles.wordpress.org/tnash\">Tim Nash</a>, <a href=\"https://profiles.wordpress.org/timmydcrawford\">Timmy Crawford</a>, <a href=\"https://profiles.wordpress.org/timothyblynjacobs\">Timothy Jacobs</a>, <a href=\"https://profiles.wordpress.org/timph\">timph</a>, <a href=\"https://profiles.wordpress.org/tkama\">Tkama</a>, <a href=\"https://profiles.wordpress.org/tnegri\">tnegri</a>, <a href=\"https://profiles.wordpress.org/tomauger\">Tom Auger</a>, <a href=\"https://profiles.wordpress.org/tjnowell\">Tom J Nowell</a>, <a href=\"https://profiles.wordpress.org/tomdxw\">tomdxw</a>, <a href=\"https://profiles.wordpress.org/toro_unit\">Toro_Unit (Hiroshi Urabe)</a>, <a href=\"https://profiles.wordpress.org/zodiac1978\">Torsten Landsiedel</a>, <a href=\"https://profiles.wordpress.org/transl8or\">transl8or</a>, <a href=\"https://profiles.wordpress.org/traversal\">traversal</a>, <a href=\"https://profiles.wordpress.org/wpsmith\">Travis Smith</a>, <a href=\"https://profiles.wordpress.org/nmt90\">Triet Minh</a>, <a href=\"https://profiles.wordpress.org/trishasalas\">Trisha Salas</a>, <a href=\"https://profiles.wordpress.org/tristangemus\">tristangemus</a>, <a href=\"https://profiles.wordpress.org/truongwp\">truongwp</a>, <a href=\"https://profiles.wordpress.org/tsl143\">tsl143</a>, <a href=\"https://profiles.wordpress.org/tywayne\">Ty Carlson</a>, <a href=\"https://profiles.wordpress.org/grapplerulrich\">Ulrich</a>, <a href=\"https://profiles.wordpress.org/utkarshpatel\">Utkarsh</a>, <a href=\"https://profiles.wordpress.org/valeriutihai\">Valeriu Tihai</a>, <a href=\"https://profiles.wordpress.org/zuige\">Viljami Kuosmanen</a>, <a href=\"https://profiles.wordpress.org/vishalkakadiya\">Vishal Kakadiya</a>, <a href=\"https://profiles.wordpress.org/vortfu\">vortfu</a>, <a href=\"https://profiles.wordpress.org/vrundakansara-1\">Vrunda Kansara</a>, <a href=\"https://profiles.wordpress.org/webbgaraget\">webbgaraget</a>, <a href=\"https://profiles.wordpress.org/webmandesign\">WebMan Design &#124; Oliver Juhas</a>, <a href=\"https://profiles.wordpress.org/websupporter\">websupporter</a>, <a href=\"https://profiles.wordpress.org/earnjam\">William Earnhardt</a>, <a href=\"https://profiles.wordpress.org/williampatton\">williampatton</a>, <a href=\"https://profiles.wordpress.org/wolly\">Wolly aka Paolo Valenti</a>, <a href=\"https://profiles.wordpress.org/wraithkenny\">WraithKenny</a>, <a href=\"https://profiles.wordpress.org/yale01\">yale01</a>, <a href=\"https://profiles.wordpress.org/yoavf\">Yoav Farhi</a>, <a href=\"https://profiles.wordpress.org/yogasukma\">Yoga Sukma</a>, <a href=\"https://profiles.wordpress.org/oxymoron\">Zach Wills</a>, <a href=\"https://profiles.wordpress.org/tollmanz\">Zack Tollman</a>, <a href=\"https://profiles.wordpress.org/vanillalounge\">Ze Fontainhas</a>, <a href=\"https://profiles.wordpress.org/zhildzik\">zhildzik</a>, and <a href=\"https://profiles.wordpress.org/zsusag\">zsusag</a>.</p>\n<p>Finally, thanks to all the community translators who worked on WordPress 4.9. Their efforts bring WordPress 4.9 fully translated to 43 languages at release time, with more on the way.</p>\n<p>Do you want to report on WordPress 4.9? <a href=\"https://s.w.org/images/core/4.9/wp-4-9_press-kit.zip\">We&#x27;ve compiled a press kit featuring information about the release features, and some media assets to help you along</a>.</p>\n<p>If you want to follow along or help out, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/core/\">core development blog</a>.</p>\n<p>Thanks for choosing WordPress!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 16 Nov 2017 01:16:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Mel Choyce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"WPTavern: Gutenberg 1.7 Adds Multi-Block Transform Functionality, Drops iframes Implementation of Meta Boxes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76552\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:118:\"https://wptavern.com/gutenberg-1-7-adds-multi-block-transform-functionality-drops-iframes-implementation-of-meta-boxes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4469:\"<p><a href=\"https://make.wordpress.org/core/2017/11/15/whats-new-in-gutenberg-15th-november/\" rel=\"noopener\" target=\"_blank\">Gutenberg 1.7</a> was released today, two weeks after version 1.6, with a fresh round of new features, design updates, and the groundwork for nested blocks and block extensibility.</p>\n<p>Last week contributors began exploring <a href=\"https://wptavern.com/gutenberg-contributors-explore-alternative-to-using-iframes-for-meta-boxes\" rel=\"noopener\" target=\"_blank\">an alternative to using iframes for meta boxes</a>. This experiment has landed in 1.7 so that the plugin now <a href=\"https://github.com/WordPress/gutenberg/pull/3345\" rel=\"noopener\" target=\"_blank\">renders meta boxes inline</a>. Gutenberg engineer Riad Benguella, who wrote and merged the code, said that it doesn&#8217;t fix all the meta box issues and might create some new ones, but it &#8220;gets us closer to where we want to go.&#8221; Pre-rendering meta boxes and creating a migration path for existing ones is next on the agenda.</p>\n<p>One of the most exciting new features in 1.7 is the <a href=\"https://github.com/WordPress/gutenberg/pull/3357\" rel=\"noopener\" target=\"_blank\">multi-block transform functionality</a> that allows users to select multiple blocks and instantly transform them into other block types. It works like a little bit of Gutenberg magic. By default, users can select multiple paragraphs and transform them into a list or select multiple images and transform them into a gallery.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-15-at-2.50.25-PM-e1510779367673.png?ssl=1\"><img /></a></p>\n<p>After selecting two or more blocks, the user can click on the block&#8217;s settings in the toolbar to transform them. They can also be easily changed back to single blocks. The multi-block transform functionality has been added to the Blocks API so that developers can set isMultiBlock to true to specify blocks that can be transformed.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-15-at-3.31.49-PM-e1510781927286.png?ssl=1\"><img /></a></p>\n<p>Version 1.7 introduces a new toggle that the team is testing for <a href=\"https://github.com/WordPress/gutenberg/pull/3311\" rel=\"noopener\" target=\"_blank\">switching between the top fixed toolbar and the contextual toolbars attached to each block</a>. It provides an easy way for users to test both types of toolbar styles, but may be temporary as the pull request was submitted as a suggestion for an A/B test.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-15-at-4.03.38-PM.png?ssl=1\"><img /></a></p>\n<p>Gutenberg 1.7 <a href=\"https://github.com/WordPress/gutenberg/pull/2743\" rel=\"noopener\" target=\"_blank\">paves the way for nested blocks</a> in the data structure. It also adds <a href=\"https://github.com/WordPress/gutenberg/pull/3318\" rel=\"noopener\" target=\"_blank\">hooks for block extensibility</a> and contributors are currently testing how these work internally.</p>\n<p>A few other notable features in this release include the following:</p>\n<ul>\n<li>Added <a href=\"https://github.com/WordPress/gutenberg/pull/2896\" rel=\"noopener\" target=\"_blank\">@-mention autocomplete for users</a> in a site</li>\n<li>Allow <a href=\"https://github.com/WordPress/gutenberg/pull/2792\" rel=\"noopener\" target=\"_blank\">pasting standalone images</a> and uploading them (also supports pasting base64 encoded images)</li>\n<li>Full <a href=\"https://github.com/WordPress/gutenberg/pull/3401\" rel=\"noopener\" target=\"_blank\">design update to focus styles</a> around the UI</li>\n<li>Placed <a href=\"https://github.com/WordPress/gutenberg/pull/3459\" rel=\"noopener\" target=\"_blank\">&#8220;table of contents&#8221; button in the header area</a>, disabled when there are no blocks in the content, added paragraph count</li>\n</ul>\n<p>Gutenberg&#8217;s documentation has also been <a href=\"https://github.com/WordPress/gutenberg/pull/3381\" rel=\"noopener\" target=\"_blank\">moved</a> to <a href=\"https://wordpress.org/gutenberg/handbook/\" rel=\"noopener\" target=\"_blank\">https://wordpress.org/gutenberg/handbook/</a>, signaling the project is getting closer to becoming part of WordPress. The new editor will be included in WordPress 5.0, which will ship when Gutenberg is ready. A notice in the 4.9 about.php page invites users to start testing the feature plugin ahead of its inclusion in core.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Nov 2017 23:57:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Matt: Post Status Interview\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47650\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"https://ma.tt/2017/11/post-status-interview/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:676:\"<p>In the lead-up <a href=\"https://2017.us.wordcamp.org/\">to WordCamp US</a> we&#x27;re in right now <a href=\"https://poststatus.com/interview-matt-mullenweg-wordpress-ecosystem-draft-podcast/\">I chatted with Brian Krogsgard at Post Status in an hour podcast</a> and we spoke about the core releases this year, Gutenberg, React, WooCommerce, and WordPress.org. On the 29th I&#x27;ll be <a href=\"https://wptavern.com/\">talking to WP Tavern</a>, so tune in then as well. For something completely different, I was on the <a href=\"https://offrcrd.com/episodes/matt-mullenweg/\">new OFF RCRD podcast with Cory Levy about the earliest days at Automattic and entrepreneurship</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Nov 2017 17:06:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"HeroPress: My journey to WordPress taught me that my talents are best used elsewhere.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=2269\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:178:\"https://heropress.com/essays/journey-wordpress-taught-talents-best-used-elsewhere/#utm_source=rss&utm_medium=rss&utm_campaign=journey-wordpress-taught-talents-best-used-elsewhere\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:10329:\"<img width=\"960\" height=\"480\" src=\"https://heropress.com/wp-content/uploads/2017/11/111517-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: Together we\'ll create the future of WordPress.\" /><p>My first website was built using Frontpage. Then I discovered Geocities, which at the time made it easy to break and fix code and have it instantly live for others to find on the world wide web. It was an optimal learning environment for me. I learned HTML and CSS by copying, pasting, and then tweaking every which way until it was doing something absurd like flashing hot pink text. It was the Wild West and there were no real rules yet except for those in this new language.</p>\n<blockquote><p>Like any language, I was learning little by little in search of ways to bend the rules and “speak” like a native.</p></blockquote>\n<p>I only coded for fun, but many years later, I made a website for a job. I used Dreamweaver because I was told all professionals used Dreamweaver. I found it easy to use, much easier than Frontpage, especially for building a larger more complex website. I started learning how to read PHP and doing a lot of what was needed in the metadata and the code for basic SEO.</p>\n<h3>Finding WordPress</h3>\n<p>Fast forward another few years. I set up several free sites for nonprofits using Webs, Weebly, other page builders whose names I can’t recall, Joomla, and then, one day I stumbled upon WordPress. I wasn’t sure if I liked it at first because the out of the box theme was ugly and I couldn’t figure out how to manipulate it. Then, I found a theme on Themeforest that installed the styles and the demo content. This was worth the $30. This gave me the ability to tweak the theme because I knew enough HTML and CSS to change things in the file editor. I was still coding like I did in my Geocities days, only my aesthetics had improved.</p>\n<p>I cringe relaying that experience now. I knew enough to be really dangerous. I didn’t do any form of version control, I didn’t do any backups, I didn’t vet my plugins, or even know how to properly vet my plugins.</p>\n<blockquote><p>I am so lucky nothing went terribly wrong.</p></blockquote>\n<p>On one hand, WordPress gave me an easy way to dive right in and do everything on my own. On the other hand, it made it too easy for me to download bad plugins, edit things I probably should not have been touching, and in the end, I guess that’s okay because when I was serious about maintaining a website, I did take the time to learn more about what I needed to know.</p>\n<h3>Finding What I Needed</h3>\n<p>What I know today is that I am not a developer. I’m not even a designer. I have fun with the creation process, but there are other people who are much more talented and efficient in those processes and I’m happy to pay them for their expertise. I have learned what I need to know about the framework and can talk to designers and developers about what I’m looking for and ensure they know what they’re doing. I can pick out reliable themes and plugins. I can advise our clients, who are mostly nonprofits and social enterprises, on the best path for a sustainable website. I understand the need for disaster recovery, backups, and security. I understand the value of paid premium licenses and ongoing support.</p>\n<p>These are all things that in my days of starting out I didn’t know I needed. Even if someone tried to explain it to me, I probably wouldn’t have felt that I needed them. Sometimes I can be stubborn and I need to experience the pain points myself before I buy into what everyone else is saying. I used to learn best from failure.</p>\n<blockquote><p>I still learn from failure, but when it comes to WordPress, I have also surrounded myself with a community who help me grow and learn.</p></blockquote>\n<p>In 2013, I started attending the Fort Worth WordPress meetup. The group was still pretty small at the time, but they were very inviting. I picked up some new tips and tricks that I used right away. While my eyes glazed over at some of the more advanced details, I understood the possibilities and that the work was beyond my capabilities. I learned how to ask for help with those things. Remember, I’m not a designer or a developer, so this meant hiring for those skills from the network of people I met in the WordPress community.</p>\n<p>Over the last 4 ½ years I’ve been able to sell numerous WordPress projects and some of them are incredibly custom and complex. In return, I’ve been able to provide freelance work for members of my community; I’ve been able to give back via WordCamps sharing my experience with project scoping, sales, and negotiations. We all have something of value to share. No matter your area of expertise, you can give something back to the community.</p>\n<h3>The Real Value</h3>\n<p>The best thing about WordPress is not the tool itself. It’s the people who use it or are wanting to try it. The WordPress community is what makes WordPress and WordCamps really great. My hope is that as a community we can help WordPress evolve and adapt and that we can leverage technology, including WordPress, for the greater good.</p>\n<p>We’ve already done this and that’s why WordPress powers almost 30% of the web. We’ve been doing it for years, but the technology landscape is changing rapidly. Are we keeping up?</p>\n<p>A few weeks ago, Chris Lema asked me and a group of other WordPressers, “What could destroy WordPress, and how would you fix it?” We answered this a number of ways and you’ve probably come up with your own answer. My answer? I think that the evolution of technology could destroy WordPress.</p>\n<p>To fix that we would need to evolve, dream big, and create the innovative changes that would keep WordPress alive. We can’t wait until the changes are already in place. It would take far too long for such a large ecosystem to catch up, and in the meantime, it would start to disappear. Look at Kodak; my kids don’t even know what a Kodak moment is. That’s just sad.</p>\n<h3>What is our dream as a community?</h3>\n<p>Will people talk about WordPress in the past tense or will we find ways to help it thrive?</p>\n<p>Even as we work towards the same dream, there are still complex challenges to overcome. We’ll likely fail many times as we try to innovate. This is actually good; we’ll learn from those mistakes, but we might become jaded. We’ll certainly have moments of frustration. We might even try another framework, and the grass might actually be greener on the other side. Yet, the fact that we are such a close knit community sets us apart.</p>\n<blockquote><p>Imagine what could happen if a community this large banded together towards one dream.</p></blockquote>\n<p>We could pave a path towards something really great. It feels like a huge undertaking. It’s something that could paralyze us if we tried to get it “right” before we started. The key is to set common goals, but to individually start working and living on purpose. Then, we can come together in a more meaningful way.</p>\n<p>In my recent keynote at WordCamp DFW I shared a bit of my heritage and my life story so that people could understand my passion for social impact. Everyone has a story that makes them a unique fit to tackle different challenges. When we put our collective skills together, we can make a difference.</p>\n<p>John F. Kennedy said, “One person can make difference, and everyone should try,” and Nelson Mandela said, “It is in our hands to make a difference.”</p>\n<p>Many paths have been paved so that we could live in a different world. Now, our dreams pave the way for future. Together we’ll create the future of WordPress.</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: My journey to WordPress taught me that my talents are best used elsewhere.\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=My%20journey%20to%20WordPress%20taught%20me%20that%20my%20talents%20are%20best%20used%20elsewhere.&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fjourney-wordpress-taught-talents-best-used-elsewhere%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: My journey to WordPress taught me that my talents are best used elsewhere.\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fjourney-wordpress-taught-talents-best-used-elsewhere%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fjourney-wordpress-taught-talents-best-used-elsewhere%2F&title=My+journey+to+WordPress+taught+me+that+my+talents+are+best+used+elsewhere.\" rel=\"nofollow\" target=\"_blank\" title=\"Share: My journey to WordPress taught me that my talents are best used elsewhere.\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/journey-wordpress-taught-talents-best-used-elsewhere/&media=https://heropress.com/wp-content/uploads/2017/11/111517-150x150.jpg&description=My journey to WordPress taught me that my talents are best used elsewhere.\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: My journey to WordPress taught me that my talents are best used elsewhere.\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/journey-wordpress-taught-talents-best-used-elsewhere/\" title=\"My journey to WordPress taught me that my talents are best used elsewhere.\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/journey-wordpress-taught-talents-best-used-elsewhere/\">My journey to WordPress taught me that my talents are best used elsewhere.</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Nov 2017 12:10:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Sheryle Gillihan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"Dev Blog: WordPress 4.9 Release Candidate 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=5184\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2017/11/wordpress-4-9-release-candidate-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4080:\"<p>The third release candidate for WordPress 4.9 is now available.</p>\n<p>A release candidate (RC) means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. In fact, we did miss some things in RC1 and RC2. This third release candidate was not originally scheduled, but due a number of defects uncovered through your testing of RC2 (thank you!), we are putting out another 4.9 release candidate.</p>\n<p>We hope to ship WordPress 4.9 on <strong>Tuesday, November 14</strong> (that&#8217;s <em>tomorrow</em>) at 23:00 UTC, but we still need your help to get there. If you haven’t tested 4.9 yet, now is the time! If there are additional defects uncovered through testing between now and the release time, we may delay the 4.9 release to the following day.</p>\n<p>To test WordPress 4.9, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.9-RC3.zip\">download the release candidate here</a> (zip).</p>\n<p>We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log/branches/4.9?action=stop_on_copy&mode=stop_on_copy&rev=42178&stop_rev=42133\">just over 20 changes</a> since releasing RC2 last week (as we did between RC1 and RC2). For more details about what’s new in version 4.9, check out the <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-2/\">Beta 2</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-3/\">Beta 3</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-beta-4/\">Beta 4</a>, <a href=\"https://wordpress.org/news/2017/10/wordpress-4-9-release-candidate/\">RC1</a>, and <a href=\"https://wordpress.org/news/2017/11/wordpress-4-9-release-candidate-2/\">RC2</a> blog posts. A few specific areas to test in RC3:</p>\n<ul>\n<li>Switching between the Visual and Text tabs of the editor, and the syncing of the cursor between those two tabs.</li>\n<li>Overriding linting errors in the Customizer&#8217;s Additional CSS editor.</li>\n<li>Adding nav menu items for Custom Links in the Customizer.</li>\n<li>Scheduling customization drafts (stubbed posts/pages) for publishing in the Customizer.</li>\n<li>Autosave revisions for changes in the Customizer.</li>\n<li>About page styling.</li>\n</ul>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.9 and update your plugin’s <em>Tested up to</em> version in the readme to 4.9. If you find compatibility problems please be sure to post to the support forums so we can figure those out before the final release — we work hard to avoid breaking things. Please see the summative <a href=\"https://make.wordpress.org/core/2017/11/07/wordpress-4-9-field-guide/\">field guide</a> to the 4.9 <a href=\"https://make.wordpress.org/core/tag/4.9+dev-notes/\">developer notes</a> on the <a href=\"https://make.wordpress.org/core/\">core development blog</a>.</p>\n<p>Do you speak a language other than English? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help us translate WordPress into more than 100 languages!</a></p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\">file one on WordPress Trac</a>, where you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a>.</p>\n<p><em>Didn&#8217;t squash them all <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/1f41b.png\" alt=\"?\" class=\"wp-smiley\" /></em><br />\n<em>We want to release Tuesday</em><br />\n<em>New features not bugs <img src=\"https://s.w.org/images/core/emoji/2.3/72x72/2728.png\" alt=\"✨\" class=\"wp-smiley\" /></em></p>\n<p>Thanks for your continued help testing out the latest versions of WordPress.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 14 Nov 2017 06:53:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Weston Ruter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: iA Writer 5 for iOS Released, Web Collaboration Version Coming Soon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76417\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"https://wptavern.com/ia-writer-5-for-ios-released-web-collaboration-version-coming-soon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4453:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-13-at-3.40.57-PM.png?ssl=1\"><img /></a></p>\n<p><a href=\"https://ia.net/writer/blog/95-keyboard-ia-writer-5/\" rel=\"noopener\" target=\"_blank\">iA Writer 5 for iOS</a> was released last week, nearly a year after <a href=\"https://ia.net/writer/blog/ia-writer-4/\" rel=\"noopener\" target=\"_blank\">version 4</a>. This update is free for those who purchased version 4 from the iOS App Store. iA Writer 5 for Mac is still in the works. The free Android version of the app is receiving incremental improvements that will bring it to parity with version 5 in the near future.</p>\n<p>iA Writer is a plain text writing and editing app that is popular with authors, academics, and long-form writers. It&#8217;s also a favorite among WordPress users who look to third-party apps for to provide a more focused, distraction-free writing environment. In April 2016, version 3.1.4 for Mac and iOS introduced publishing drafts to WordPress.com and Jetpack-powered sites.</p>\n<p>Version 5 focuses on making everything accessible through the keyboard by bringing the Open Quickly feature in iA Writer for Mac to iOS. The app&#8217;s creators said the goal of the design process was to &#8220;allow the writer to do everything without leaving the keyboard, including file handling, export, and all commands.&#8221; The new Quick Search feature is now built into the keyboard bar along with with a fully configurable keyboard. This allows users to quickly do things like create new files, switch to night mode, and export to PDF without leaving the keyboard.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-12-at-11.20.56-PM.png?ssl=1\"><img /></a></p>\n<p>This release adds new organization features that allow users to select multiple files and folders and move, rename, or delete them from the Library. It also introduces Smart Folders which can be created based on a set of rules. Version 5 <a href=\"https://ia.net/writer/blog/files-in-ios11/\" rel=\"noopener\" target=\"_blank\">adds support for iOS11’s Files system</a>, allowing users to open and edit text files from any storage provider that works with Files. Support for Dropbox, Google Drive, and Box is already available with more providers coming soon.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-13-at-12.54.33-PM.png?ssl=1\"><img /></a></p>\n<p>The makers of iA Writer are interested in <a href=\"https://ia.net/writer/blog/ia-writer-5-forging-the-hammer/\" rel=\"noopener\" target=\"_blank\">exploring other platforms</a> if there is sufficient interest, including the possibility of creating a Windows version. Demand doesn&#8217;t seem to be very high, as the writing app&#8217;s fans are primarily Apple-only users.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">How badly do you want a Windows version of iA Writer?</p>\n<p>&mdash; iA Writer (@iAWriter) <a href=\"https://twitter.com/iAWriter/status/920297492280852480?ref_src=twsrc%5Etfw\">October 17, 2017</a></p></blockquote>\n<p></p>\n<p>However, users across multiple platforms have requested a web version of iA Writer, and the company confirmed in September that they are already working on it. After releasing a big Material Design <a href=\"https://ia.net/writer/blog/turbocharged-ia-writer-for-android/\" rel=\"noopener\" target=\"_blank\">update to the iA for Android app </a>in October, the creators said Android users will be the first to have access to the web version:</p>\n<blockquote><p>The biggest request from you was collaboration, in other words, iA Writer for Web. iA Writer for Android will stay free and you will be able to connect and subscribe to the Web version via the app, if you wish to. If you could tell us what you’d expect to pay for it, that would be very helpful&#8230;As part of our commitment to continually improve iA Writer on all platforms, Android will likely be the first to gain access to the upcoming Web collaboration.</p></blockquote>\n<p>The upcoming web version should provide a sort of bridge for users on other desktop platforms without an iA Writer app.</p>\n<p>There&#8217;s no target release date for iA Writer 5 for Mac but iA Inc has <a href=\"https://twitter.com/iA/status/917679399008215041\" rel=\"noopener\" target=\"_blank\">confirmed</a> that it will also be a free update for those who have purchased the previous version.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Nov 2017 22:00:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"WPTavern: Watch the State of the Woo! After You Give WooCommerce Your Name and Email Address\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76497\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"https://wptavern.com/watch-the-state-of-the-woo-after-you-give-woocommerce-your-name-and-email-address\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1557:\"<p>If you didn&#8217;t watch the live stream or attend <a href=\"https://wooconf.com/\">WooConf</a> in-person, you&#8217;re in luck as videos from the event are starting to come online. The first talk highlights is the <a href=\"https://wptavern.com/woocommerce-stores-on-track-to-surpass-10b-in-sales-this-year\">State of the Woo</a> by Todd Wilkens, Head of WooCommerce. Wilkens shares stats, provides an overview of projects the team is working on, what to expect in new versions, and explains the relationship between WooCommerce and Jetpack.</p>\n<p></p>\n<p>The video is available to watch for free, but viewers must provide their first and last name as well as an email address. Clicking the play button without entering this information displays a message that says Please enter your full name. This is a classic technique used by many internet marketers.</p>\n<p>Although you can provide fake information in order to watch the video for free, I feel it&#8217;s an unnecessary burden. The WooCommerce team could obtain the same information with a form in the post. An alternative to watching the video is reading the company&#8217;s<a href=\"https://woocommerce.com/2017/11/wooconf-state-of-the-woo/?utm_campaign=coschedule&utm_source=twitter&utm_medium=WooCommerce&utm_content=WooConf%3A%20State%20of%20the%20Woo\"> great overview</a> of Wilkens&#8217; session. The team plans to publish other talks from WooConf in the coming weeks.</p>\n<p><strong>Updated November 14th: </strong>An Automattic employee has removed the email form and made it skippable.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Nov 2017 21:25:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Matt: Product and Process\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47646\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://ma.tt/2017/11/product-and-process/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:726:\"<blockquote class=\"wp-block-quote blocks-quote-style-1\">\n    <p>When I look back over the last 25 years, in some ways what seems most precious is not what we have made but how we have made it and what we have learned as a consequence of that. I always think that there are two products at the end of a programme; there is the physical product or the service, the thing that you have managed to make, and then there is all that you have learned. The power of what you have learned enables you to do the next thing and it enables you to do the next thing better. — Jony Ive<br /></p>\n</blockquote>\n\n\n\n<p>From the <a href=\"https://www.wallpaper.com/design/jony-ive-apple-park\">Wallpaper article on the new Apple campus</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 11 Nov 2017 05:01:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"WPTavern: WP-SpamShield Plugin Removed from WordPress.org, Author Plans to Pull All Plugins from the Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76434\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:120:\"https://wptavern.com/wp-spamshield-plugin-removed-from-wordpress-org-author-plans-to-pull-all-plugins-from-the-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6048:\"<p>The <a href=\"https://wordpress.org/plugins/WP-SpamShield/\" rel=\"noopener\" target=\"_blank\">WP-SpamShield</a> plugin was removed from the WordPress.org directory this week due to what the Plugin Review Team has deemed a violation of the guidelines and a possible miscommunication.</p>\n<p>Two weeks ago, the author of WP-SPamShield and the author of the Plugin Organizer plugin exchanged contentious remarks in a <a href=\"https://wordpress.org/support/topic/please-remove-code-that-maliciously-disables-wp-spamshield/\" rel=\"noopener\" target=\"_blank\">support forum thread</a> where each accused the other of targeting each others&#8217; plugins. This resulted in both parties adding code that disabled the others&#8217; plugins, and both were asked by the Plugin Team to remove the code.</p>\n<p>WP-SpamShield&#8217;s author, Scott Allen, has <a href=\"https://www.redsandmarketing.com/blog/wp-spamshield-removed-wordpress-org-directory-without-cause/\" rel=\"noopener\" target=\"_blank\">published an account of his interactions with the Plugin Team</a> with updates for users who are monitoring the status of the plugin. Although the team rarely discloses why a plugin was removed, representative Mika Epstein <a href=\"https://wordpress.org/support/topic/plugin-removed-from-repository-6/page/2/#post-9671552\" rel=\"noopener\" target=\"_blank\">responded</a> to Allen when he said he had not received an answer about what guideline the plugin had violated:</p>\n<blockquote><p>Sorry, I thought it was clear that it’s issues regarding the <a href=\"https://wordpress.org/support/guidelines/\" rel=\"noopener\" target=\"_blank\">forum guidelines</a> and rule #9:<br />\n <em>Intentionally attempting to exploit loopholes in the guidelines</em>.</p>\n<p>To whit, you were asked to make a change and did so incompletely. If this was not intentional, then I apologize.</p>\n<p>I’ve sent you a followup email, trying to clarify what we would accept as solutions to the issue (I came up with 3 options, but I’m open to hearing more).</p>\n<p>I understand why you’re angry and we will respect any decision you make regarding this. Nothing that has happened thus far is insurmountable or permanent.</p></blockquote>\n<p>In the post Allen published, he said his experiences with the Plugin Team over the past 10 years have caused him to decide to move his plugins off of WordPress.org. When I contacted him to see if he plans to update his code according to the Plugin Team&#8217;s suggestions, he said he doesn&#8217;t agree with the solutions the team is offering, nor their assessment of the situation.</p>\n<p>&#8220;They really were not solutions,&#8221; Allen said. &#8220;It was just rehashing the same issues we&#8217;d already discussed. Unfortunately, neither Otto nor Mika have the security expertise to be making the dictates they were making, so there were no realistic solutions.&#8221;</p>\n<p>Allen also claimed that Epstein&#8217;s report about him making a change and it being incomplete was not accurate and that the Plugin Team did not seem to be on the same page:</p>\n<blockquote><p>We literally did exactly what they asked and made the changes. Two weeks ago Mika had emailed me and indicated things were good. (No code updates since then.) Then two weeks of silence, and then angry email from Otto out of the blue yesterday telling us it was booted. The issue he brought up was different code.</p>\n<p>The two of them cannot make up their minds on what is acceptable, and what is not. The arbitrary removal was the last straw though. WordPress.org is the only venue that would do that. We repeatedly asked them what rule we broke, to no answer. Only after I called Mika out on the forum did she come up with something &#8211; Rule 9 &#8211; exploiting a loophole in the rules. Seriously? It&#8217;s impossible for developers to comply with rules that are constantly changing.</p></blockquote>\n<p>Allen confirmed that his team at Red Sand Media Group plans to pull all seven of its plugins from WordPress.org as the result of the incident but will continue maintaining and hosting them elsewhere.</p>\n<p>&#8220;Developers cannot operate like that,&#8221; Allen said. &#8220;People depend on us. While it might hurt a bit in the short term, in the long term, we have to do it. There really need to be some major reforms to the way plugins are handled.&#8221;</p>\n<p>WP-SpamShield was installed on more than 100,000 WordPress sites before it was removed. There is currently no standard way to notify users why a plugin was removed from the directory, but the original dispute between the WP-SpamShield and Plugin Organizer authors is public, as well as a few exchanges between Allen and the Plugin Team. Allen said he is still working out the details of how to notify users that his plugins will be hosted elsewhere from now on.</p>\n<p>&#8220;We&#8217;ll come up with a good plan in the next few days,&#8221; he said. &#8220;Some people have been notified already because WordFence let them know yesterday that WPSS was removed. (They knew before I did.)&#8221;</p>\n<p>Samuel &#8220;Otto&#8221; Wood said the Plugin Team is still willing to put Allen&#8217;s plugins back up if he removes the code in question and that the team is not offended by a plugin developer being angry over a decision. At this time Allen appears to be unwilling to comply with the team&#8217;s most recent requests.</p>\n<p>In the meantime, users who know that WP-SpamShield was been removed are waiting to hear if they need to begin looking for a replacement. Allen said that users shouldn&#8217;t need to replace the plugin, since the it will continue to work as before. However, some users are not comfortable installing free plugins hosted outside of WordPress.org. Allen&#8217;s team is figuring out a plan for how they will deliver updates to the plugin and will post more information for users on the <a href=\"https://www.redsandmarketing.com/blog/wp-spamshield-removed-wordpress-org-directory-without-cause/\" rel=\"noopener\" target=\"_blank\">Red Sand Marketing blog</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 11 Nov 2017 04:19:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"WPTavern: Weglot Passes €44K in Monthly Revenue, Plans to Expand into More CMS and E-commerce Markets\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76296\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"https://wptavern.com/weglot-passes-e44k-in-monthly-revenue-plans-to-expand-into-more-cms-and-e-commerce-markets\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5746:\"<p><a href=\"https://wordpress.org/plugins/weglot/\" rel=\"noopener\" target=\"_blank\">Weglot</a>, a SaaS-based multilingual plugin that entered the WordPress market last year, has <a href=\"http://blog.weglot.com/21000-44000-euro-monthly-company-rises/\" rel=\"noopener\" target=\"_blank\">passed €44,000 in monthly revenue</a>. The company received <a href=\"https://wptavern.com/weglot-multilingual-plugin-closes-450k-in-seed-funding\" rel=\"noopener\" target=\"_blank\">€450K in seed funding</a> in May 2017 and has nearly doubled its user base in the past six months. Co-founder Rémy Berda reports that the plugin is approaching 20,000 users and that more than 20,000 websites are connected to the Weglot API, if you include the company&#8217;s Shopify product and those using the JS script directly.</p>\n<p>WordPress customers currently represent 75% of Weglot&#8217;s revenue with Shopify at 25%, but Berda says the two markets are growing at the same rate. In May, the company&#8217;s customer distribution was primarily in the US and France, which made sense as the product&#8217;s founders are French and Weglot was first marketed to the French WordPress community. Weglot&#8217;s customer distribution has become more global over the past six months and the US has now overtaken France as the strongest market for the multilingual plugin. Canada has also passed Germany, and Berda said he thinks the distribution will eventually align progressively with global WordPress usage.</p>\n<a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/11/chart-1.png?ssl=1\"><img /></a>Weglot customer distribution as of November 2017\n<p>Despite having only recently entered the WordPress community in a niche with well-established competitors, Weglot&#8217;s cofounders are confident their SaaS approach is the road to success for becoming the best multilingual solution for WordPress. The team is aiming for its product to become the highest rated multilingual plugin in the WordPress directory within the next six months.</p>\n<p><a href=\"https://wpml.org/\" rel=\"noopener\" target=\"_blank\">WPML</a>, a purely commercial product and the most widely used, has been in business since 2009 and is active on more than 500K sites. <a href=\"https://wordpress.org/plugins/polylang/\" rel=\"noopener\" target=\"_blank\">Polylang</a>, a popular free plugin with a commercial option, is installed on more than 300,000 sites and has a 4.7-star rating on WordPress.org. <a href=\"https://wordpress.org/plugins/qtranslate-x/\" rel=\"noopener\" target=\"_blank\">qTranslate X</a> is also a formidable competitor with more than 100,000 active installs and a 4.7-star rating.</p>\n<p>&#8220;For now the two biggest plugins in terms of active installs are WPML and Polylang,&#8221; Berda said. &#8220;Both don&#8217;t have a SaaS approach. Polylang recently released the PRO version (it was only free previously) but it is still sold as a piece of software, not a SaaS. We are convinced that SaaS is the right approach as it allows us to be in constant relation with users and make the product evolve faster. It&#8217;s also healthier in terms of business.&#8221;</p>\n<p>Although he has no precise statistics on how many, Berda said he sees a lot of former WPML and Polylang users (freelancers and agencies) in their support center who have opted to use Weglot on their new projects. This indicates that Weglot may not so much be whittling away at the existing customer base of other plugins but is finding success at attracting customers who are starting new projects.</p>\n<p>In their efforts to stake a claim in the WordPress ecosystem, the Weglot team has found that being active in the community is important to having a successful product.</p>\n<p>&#8220;WordPress is really huge so there is no magical formula for marketing,&#8221; Berda said. &#8220;I think what is important is to accept that it takes time. You must keep improving your product forever while being active in the community and do it not only with high intensity but for a long time.&#8221;</p>\n<p>The €450K in seed funding Weglot received earlier this year has helped the team to expand its support and development team, but it has also made it possible for the company to invest more in the community. They have now sponsored a dozen WordCamps across the world, including WordCamp Europe in Paris.</p>\n<p>Berda&#8217;s advice to other WordPress entrepreneurs who are looking for funding is to consider the option carefully and understand how it will impact the company&#8217;s future and ability to act independently.</p>\n<p>&#8220;My recommendation would be to think twice about raising money as it takes time,&#8221; Berda said. &#8220;It changes your governance and it temporarily distracts you from your number one focus &#8211; your users. Raise only if you are sure you will have a return with the money invested. Not every business need to raise money.&#8221;</p>\n<p>Fueled by their success in the WordPress market, Weglot plans to expand into other CMS and e-commerce markets, including BigCommerce and Jimdo, followed by Drupal, Magento, and Joomla. Berda said the company also plans to release an open version of the API for developers to integrate their non-CMS websites built on technologies like Symfony and Laravel.</p>\n<p>&#8220;In 2018, we will be adding many things: We will start using machine learning to improve the quality of automatic translations,&#8221; Berda said. &#8220;We will also leverage the fact that we are SaaS to add some insights about language usage for the users so they can see what languages are performing better. Finally, we will add extra features to manage multilingual SEO. In terms of monthly recurring revenue, we aim to reach €70,000 in 6 months.&#8221;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 10 Nov 2017 20:04:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:122:\"WPTavern: Jetpack 5.5 Removes Syntax Highlighting and Gallery Widget for Compatibility with Upcoming WordPress 4.9 Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=76369\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:133:\"https://wptavern.com/jetpack-5-5-removes-syntax-highlighting-and-gallery-widget-for-compatibility-with-upcoming-wordpress-4-9-release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2878:\"<p><a href=\"https://jetpack.com/2017/11/08/jetpack-5-5-compatibility-enhancements/\" rel=\"noopener\" target=\"_blank\">Jetpack 5.5</a> was released yesterday with several important changes that ensure the plugin is compatible with the upcoming WordPress 4.9 release scheduled for November 14. The plugin will be able to shed some weight, as core improvements will make Jetpack&#8217;s syntax highlighting and gallery widget obsolete.</p>\n<p>WordPress 4.9 incorporates <a href=\"https://codemirror.net/\" rel=\"noopener\" target=\"_blank\">CodeMirror</a>, which brings syntax highlighting, linting, and auto-completion to the built-in code editors. Jetpack 5.5+ will rely on WordPress to handle syntax highlighting and the Custom CSS module has been updated to be fully compatible with <a href=\"https://make.wordpress.org/core/2017/10/22/code-editing-improvements-in-wordpress-4-9/\" rel=\"noopener\" target=\"_blank\">core&#8217;s new code editing improvements</a>.</p>\n<a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/11/Screen-Shot-2017-11-08-at-12.30.08-PM.png?ssl=1\"><img /></a>image credit: <a href=\"https://make.wordpress.org/core/2017/10/22/code-editing-improvements-in-wordpress-4-9/\">make.wordpress.org</a>\n<p>Jetpack 5.5 also adds compatibility for WordPress 4.9&#8217;s <a href=\"https://wptavern.com/new-core-gallery-widget-targeted-for-wordpress-4-9\" rel=\"noopener\" target=\"_blank\">new core gallery widget</a>. When users update to 4.9, Jetpack will automatically migrate its own <a href=\"https://jetpack.com/support/extra-sidebar-widgets/gallery-widget/\" rel=\"noopener\" target=\"_blank\">gallery widgets</a> to use the widget included in core.</p>\n<p>The release also includes several other changes for compatibility with WordPress 4.9:</p>\n<ul>\n<li>Press This sharing button removed, since the feature is being <a href=\"https://wptavern.com/press-this-removed-from-wordpress-4-9-in-favor-of-a-plugin\" rel=\"noopener\" target=\"_blank\">removed from core in favor of a plugin</a></li>\n<li>Changes to ensure compatibility with <a href=\"https://make.wordpress.org/core/2017/10/15/improvements-for-roles-and-capabilities-in-4-9/\" rel=\"noopener\" target=\"_blank\">role and capability updates in WordPress 4.9</a></li>\n<li>Remove code for processing Contact Form shortcodes in widgets, as <a href=\"https://wptavern.com/wordpress-4-9-will-support-shortcodes-and-embedded-media-in-the-text-widget\" rel=\"noopener\" target=\"_blank\">WordPress adds support for shortcodes in widgets in 4.9</a></li>\n</ul>\n<p>Jetpack 5.5 also improves the connection process between the plugin and WordPress.com, which should reduce recent issue users have experienced when migrating their sites from HTTP to HTTPS. A full list of the changes in this release is available in the plugin&#8217;s <a href=\"https://wordpress.org/plugins/jetpack/#developers\" rel=\"noopener\" target=\"_blank\">changelog</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 08 Nov 2017 20:13:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:42:\"Requests_Utility_CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:8:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Tue, 19 Dec 2017 16:55:44 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Tue, 19 Dec 2017 16:30:10 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";s:16:\"content-encoding\";s:4:\"gzip\";}}s:5:\"build\";s:14:\"20130911040210\";}','no'),(1091,'_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1513745745','no'),(1092,'_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1513702545','no'),(1093,'_transient_timeout_dash_v2_88ae138922fe95674369b1cb3d215a2b','1513745745','no'),(1094,'_transient_dash_v2_88ae138922fe95674369b1cb3d215a2b','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2017/12/the-month-in-wordpress-november-2017/\'>The Month in WordPress: November 2017</a></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://blog.akismet.com/2017/12/18/version-4-0-2-of-the-akismet-wordpress-plugin-is-now-available/\'>Akismet: Version 4.0.2 of the Akismet WordPress Plugin Is Now Available</a></li><li><a class=\'rsswidget\' href=\'https://wptavern.com/jetpack-5-6-1-increases-security-of-the-contact-form-module\'>WPTavern: Jetpack 5.6.1 Increases Security of the Contact Form Module</a></li><li><a class=\'rsswidget\' href=\'https://wptavern.com/wpweekly-episode-297-wordcamp-us-2017-recap\'>WPTavern: WPWeekly Episode 297 – WordCamp US 2017 Recap</a></li></ul></div>','no'),(1095,'_site_transient_timeout_available_translations','1513713383','no'),(1096,'_site_transient_available_translations','a:111:{s:2:\"af\";a:8:{s:8:\"language\";s:2:\"af\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-01 13:40:41\";s:12:\"english_name\";s:9:\"Afrikaans\";s:11:\"native_name\";s:9:\"Afrikaans\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/af.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"af\";i:2;s:3:\"afr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Gaan voort\";}}s:2:\"ar\";a:8:{s:8:\"language\";s:2:\"ar\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-27 09:27:02\";s:12:\"english_name\";s:6:\"Arabic\";s:11:\"native_name\";s:14:\"العربية\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/ar.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:2;s:3:\"ara\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:3:\"ary\";a:8:{s:8:\"language\";s:3:\"ary\";s:7:\"version\";s:5:\"4.7.7\";s:7:\"updated\";s:19:\"2017-01-26 15:42:35\";s:12:\"english_name\";s:15:\"Moroccan Arabic\";s:11:\"native_name\";s:31:\"العربية المغربية\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.7/ary.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:3;s:3:\"ary\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:2:\"as\";a:8:{s:8:\"language\";s:2:\"as\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-22 18:59:07\";s:12:\"english_name\";s:8:\"Assamese\";s:11:\"native_name\";s:21:\"অসমীয়া\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/as.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"as\";i:2;s:3:\"asm\";i:3;s:3:\"asm\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:2:\"az\";a:8:{s:8:\"language\";s:2:\"az\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-06 00:09:27\";s:12:\"english_name\";s:11:\"Azerbaijani\";s:11:\"native_name\";s:16:\"Azərbaycan dili\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/az.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:2;s:3:\"aze\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Davam\";}}s:3:\"azb\";a:8:{s:8:\"language\";s:3:\"azb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-12 20:34:31\";s:12:\"english_name\";s:17:\"South Azerbaijani\";s:11:\"native_name\";s:29:\"گؤنئی آذربایجان\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/azb.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:3;s:3:\"azb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:3:\"bel\";a:8:{s:8:\"language\";s:3:\"bel\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 06:19:36\";s:12:\"english_name\";s:10:\"Belarusian\";s:11:\"native_name\";s:29:\"Беларуская мова\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.9.1/bel.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"be\";i:2;s:3:\"bel\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Працягнуць\";}}s:5:\"bg_BG\";a:8:{s:8:\"language\";s:5:\"bg_BG\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 09:53:15\";s:12:\"english_name\";s:9:\"Bulgarian\";s:11:\"native_name\";s:18:\"Български\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/bg_BG.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bg\";i:2;s:3:\"bul\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:22:\"Продължение\";}}s:5:\"bn_BD\";a:8:{s:8:\"language\";s:5:\"bn_BD\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-10-01 12:57:10\";s:12:\"english_name\";s:7:\"Bengali\";s:11:\"native_name\";s:15:\"বাংলা\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.3/bn_BD.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"bn\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:23:\"এগিয়ে চল.\";}}s:2:\"bo\";a:8:{s:8:\"language\";s:2:\"bo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-05 09:44:12\";s:12:\"english_name\";s:7:\"Tibetan\";s:11:\"native_name\";s:21:\"བོད་ཡིག\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/bo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bo\";i:2;s:3:\"tib\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"མུ་མཐུད།\";}}s:5:\"bs_BA\";a:8:{s:8:\"language\";s:5:\"bs_BA\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-04 20:20:28\";s:12:\"english_name\";s:7:\"Bosnian\";s:11:\"native_name\";s:8:\"Bosanski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/bs_BA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bs\";i:2;s:3:\"bos\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:2:\"ca\";a:8:{s:8:\"language\";s:2:\"ca\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-12 08:56:15\";s:12:\"english_name\";s:7:\"Catalan\";s:11:\"native_name\";s:7:\"Català\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/ca.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ca\";i:2;s:3:\"cat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:3:\"ceb\";a:8:{s:8:\"language\";s:3:\"ceb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-02 17:25:51\";s:12:\"english_name\";s:7:\"Cebuano\";s:11:\"native_name\";s:7:\"Cebuano\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/ceb.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"ceb\";i:3;s:3:\"ceb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Padayun\";}}s:5:\"cs_CZ\";a:8:{s:8:\"language\";s:5:\"cs_CZ\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-12 08:46:26\";s:12:\"english_name\";s:5:\"Czech\";s:11:\"native_name\";s:9:\"Čeština\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/cs_CZ.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cs\";i:2;s:3:\"ces\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:11:\"Pokračovat\";}}s:2:\"cy\";a:8:{s:8:\"language\";s:2:\"cy\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-22 16:19:20\";s:12:\"english_name\";s:5:\"Welsh\";s:11:\"native_name\";s:7:\"Cymraeg\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/cy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cy\";i:2;s:3:\"cym\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Parhau\";}}s:5:\"da_DK\";a:8:{s:8:\"language\";s:5:\"da_DK\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-07 17:05:51\";s:12:\"english_name\";s:6:\"Danish\";s:11:\"native_name\";s:5:\"Dansk\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/da_DK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"da\";i:2;s:3:\"dan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Forts&#230;t\";}}s:5:\"de_CH\";a:8:{s:8:\"language\";s:5:\"de_CH\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-22 15:38:30\";s:12:\"english_name\";s:20:\"German (Switzerland)\";s:11:\"native_name\";s:17:\"Deutsch (Schweiz)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/de_CH.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Fortfahren\";}}s:14:\"de_CH_informal\";a:8:{s:8:\"language\";s:14:\"de_CH_informal\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-22 15:43:53\";s:12:\"english_name\";s:30:\"German (Switzerland, Informal)\";s:11:\"native_name\";s:21:\"Deutsch (Schweiz, Du)\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/translation/core/4.9.1/de_CH_informal.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:12:\"de_DE_formal\";a:8:{s:8:\"language\";s:12:\"de_DE_formal\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-03 11:38:18\";s:12:\"english_name\";s:15:\"German (Formal)\";s:11:\"native_name\";s:13:\"Deutsch (Sie)\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/translation/core/4.9.1/de_DE_formal.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Fortfahren\";}}s:5:\"de_DE\";a:8:{s:8:\"language\";s:5:\"de_DE\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-03 11:38:13\";s:12:\"english_name\";s:6:\"German\";s:11:\"native_name\";s:7:\"Deutsch\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/de_DE.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Fortfahren\";}}s:3:\"dzo\";a:8:{s:8:\"language\";s:3:\"dzo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-06-29 08:59:03\";s:12:\"english_name\";s:8:\"Dzongkha\";s:11:\"native_name\";s:18:\"རྫོང་ཁ\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/dzo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"dz\";i:2;s:3:\"dzo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:2:\"el\";a:8:{s:8:\"language\";s:2:\"el\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-10 15:04:39\";s:12:\"english_name\";s:5:\"Greek\";s:11:\"native_name\";s:16:\"Ελληνικά\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/el.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"el\";i:2;s:3:\"ell\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Συνέχεια\";}}s:5:\"en_CA\";a:8:{s:8:\"language\";s:5:\"en_CA\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-23 18:53:44\";s:12:\"english_name\";s:16:\"English (Canada)\";s:11:\"native_name\";s:16:\"English (Canada)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/en_CA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_NZ\";a:8:{s:8:\"language\";s:5:\"en_NZ\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-24 22:15:20\";s:12:\"english_name\";s:21:\"English (New Zealand)\";s:11:\"native_name\";s:21:\"English (New Zealand)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/en_NZ.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_ZA\";a:8:{s:8:\"language\";s:5:\"en_ZA\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 09:54:30\";s:12:\"english_name\";s:22:\"English (South Africa)\";s:11:\"native_name\";s:22:\"English (South Africa)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/en_ZA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_GB\";a:8:{s:8:\"language\";s:5:\"en_GB\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 14:51:39\";s:12:\"english_name\";s:12:\"English (UK)\";s:11:\"native_name\";s:12:\"English (UK)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/en_GB.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_AU\";a:8:{s:8:\"language\";s:5:\"en_AU\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 02:06:55\";s:12:\"english_name\";s:19:\"English (Australia)\";s:11:\"native_name\";s:19:\"English (Australia)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/en_AU.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"eo\";a:8:{s:8:\"language\";s:2:\"eo\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 01:23:37\";s:12:\"english_name\";s:9:\"Esperanto\";s:11:\"native_name\";s:9:\"Esperanto\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/eo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eo\";i:2;s:3:\"epo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Daŭrigi\";}}s:5:\"es_CO\";a:8:{s:8:\"language\";s:5:\"es_CO\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 23:17:08\";s:12:\"english_name\";s:18:\"Spanish (Colombia)\";s:11:\"native_name\";s:20:\"Español de Colombia\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/es_CO.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_GT\";a:8:{s:8:\"language\";s:5:\"es_GT\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 15:03:42\";s:12:\"english_name\";s:19:\"Spanish (Guatemala)\";s:11:\"native_name\";s:21:\"Español de Guatemala\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/es_GT.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_ES\";a:8:{s:8:\"language\";s:5:\"es_ES\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-18 11:09:35\";s:12:\"english_name\";s:15:\"Spanish (Spain)\";s:11:\"native_name\";s:8:\"Español\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/es_ES.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_MX\";a:8:{s:8:\"language\";s:5:\"es_MX\";s:7:\"version\";s:5:\"4.8.4\";s:7:\"updated\";s:19:\"2017-07-31 15:12:02\";s:12:\"english_name\";s:16:\"Spanish (Mexico)\";s:11:\"native_name\";s:19:\"Español de México\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.4/es_MX.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_VE\";a:8:{s:8:\"language\";s:5:\"es_VE\";s:7:\"version\";s:5:\"4.8.4\";s:7:\"updated\";s:19:\"2017-07-30 16:09:17\";s:12:\"english_name\";s:19:\"Spanish (Venezuela)\";s:11:\"native_name\";s:21:\"Español de Venezuela\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.4/es_VE.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CR\";a:8:{s:8:\"language\";s:5:\"es_CR\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-10-01 17:54:52\";s:12:\"english_name\";s:20:\"Spanish (Costa Rica)\";s:11:\"native_name\";s:22:\"Español de Costa Rica\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.3/es_CR.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_PE\";a:8:{s:8:\"language\";s:5:\"es_PE\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-09 09:36:22\";s:12:\"english_name\";s:14:\"Spanish (Peru)\";s:11:\"native_name\";s:17:\"Español de Perú\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/es_PE.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CL\";a:8:{s:8:\"language\";s:5:\"es_CL\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-28 20:09:49\";s:12:\"english_name\";s:15:\"Spanish (Chile)\";s:11:\"native_name\";s:17:\"Español de Chile\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/es_CL.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_AR\";a:8:{s:8:\"language\";s:5:\"es_AR\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-16 03:15:17\";s:12:\"english_name\";s:19:\"Spanish (Argentina)\";s:11:\"native_name\";s:21:\"Español de Argentina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/es_AR.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"et\";a:8:{s:8:\"language\";s:2:\"et\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-19 14:11:29\";s:12:\"english_name\";s:8:\"Estonian\";s:11:\"native_name\";s:5:\"Eesti\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/et.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"et\";i:2;s:3:\"est\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Jätka\";}}s:2:\"eu\";a:8:{s:8:\"language\";s:2:\"eu\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-09 21:12:23\";s:12:\"english_name\";s:6:\"Basque\";s:11:\"native_name\";s:7:\"Euskara\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/eu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eu\";i:2;s:3:\"eus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Jarraitu\";}}s:5:\"fa_IR\";a:8:{s:8:\"language\";s:5:\"fa_IR\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-06-09 15:50:45\";s:12:\"english_name\";s:7:\"Persian\";s:11:\"native_name\";s:10:\"فارسی\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8/fa_IR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fa\";i:2;s:3:\"fas\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:2:\"fi\";a:8:{s:8:\"language\";s:2:\"fi\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 09:48:14\";s:12:\"english_name\";s:7:\"Finnish\";s:11:\"native_name\";s:5:\"Suomi\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/fi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fi\";i:2;s:3:\"fin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Jatka\";}}s:5:\"fr_CA\";a:8:{s:8:\"language\";s:5:\"fr_CA\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-19 23:55:33\";s:12:\"english_name\";s:15:\"French (Canada)\";s:11:\"native_name\";s:19:\"Français du Canada\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/fr_CA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fr\";i:2;s:3:\"fra\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:5:\"fr_FR\";a:8:{s:8:\"language\";s:5:\"fr_FR\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-18 12:43:12\";s:12:\"english_name\";s:15:\"French (France)\";s:11:\"native_name\";s:9:\"Français\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/fr_FR.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"fr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:5:\"fr_BE\";a:8:{s:8:\"language\";s:5:\"fr_BE\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 21:50:23\";s:12:\"english_name\";s:16:\"French (Belgium)\";s:11:\"native_name\";s:21:\"Français de Belgique\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/fr_BE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fr\";i:2;s:3:\"fra\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:2:\"gd\";a:8:{s:8:\"language\";s:2:\"gd\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-08-23 17:41:37\";s:12:\"english_name\";s:15:\"Scottish Gaelic\";s:11:\"native_name\";s:9:\"Gàidhlig\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/gd.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"gd\";i:2;s:3:\"gla\";i:3;s:3:\"gla\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"Lean air adhart\";}}s:5:\"gl_ES\";a:8:{s:8:\"language\";s:5:\"gl_ES\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-16 10:40:05\";s:12:\"english_name\";s:8:\"Galician\";s:11:\"native_name\";s:6:\"Galego\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/gl_ES.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gl\";i:2;s:3:\"glg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"gu\";a:8:{s:8:\"language\";s:2:\"gu\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-16 11:06:53\";s:12:\"english_name\";s:8:\"Gujarati\";s:11:\"native_name\";s:21:\"ગુજરાતી\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/gu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gu\";i:2;s:3:\"guj\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:31:\"ચાલુ રાખવું\";}}s:3:\"haz\";a:8:{s:8:\"language\";s:3:\"haz\";s:7:\"version\";s:5:\"4.4.2\";s:7:\"updated\";s:19:\"2015-12-05 00:59:09\";s:12:\"english_name\";s:8:\"Hazaragi\";s:11:\"native_name\";s:15:\"هزاره گی\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.4.2/haz.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"haz\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:5:\"he_IL\";a:8:{s:8:\"language\";s:5:\"he_IL\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-06 13:23:01\";s:12:\"english_name\";s:6:\"Hebrew\";s:11:\"native_name\";s:16:\"עִבְרִית\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/he_IL.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"he\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"להמשיך\";}}s:5:\"hi_IN\";a:8:{s:8:\"language\";s:5:\"hi_IN\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-02 23:26:33\";s:12:\"english_name\";s:5:\"Hindi\";s:11:\"native_name\";s:18:\"हिन्दी\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/hi_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hi\";i:2;s:3:\"hin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"जारी\";}}s:2:\"hr\";a:8:{s:8:\"language\";s:2:\"hr\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 13:03:07\";s:12:\"english_name\";s:8:\"Croatian\";s:11:\"native_name\";s:8:\"Hrvatski\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/hr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hr\";i:2;s:3:\"hrv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:5:\"hu_HU\";a:8:{s:8:\"language\";s:5:\"hu_HU\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-14 10:14:07\";s:12:\"english_name\";s:9:\"Hungarian\";s:11:\"native_name\";s:6:\"Magyar\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/hu_HU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hu\";i:2;s:3:\"hun\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Tovább\";}}s:2:\"hy\";a:8:{s:8:\"language\";s:2:\"hy\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-03 16:21:10\";s:12:\"english_name\";s:8:\"Armenian\";s:11:\"native_name\";s:14:\"Հայերեն\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/hy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hy\";i:2;s:3:\"hye\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Շարունակել\";}}s:5:\"id_ID\";a:8:{s:8:\"language\";s:5:\"id_ID\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 11:09:49\";s:12:\"english_name\";s:10:\"Indonesian\";s:11:\"native_name\";s:16:\"Bahasa Indonesia\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/id_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"id\";i:2;s:3:\"ind\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Lanjutkan\";}}s:5:\"is_IS\";a:8:{s:8:\"language\";s:5:\"is_IS\";s:7:\"version\";s:5:\"4.7.7\";s:7:\"updated\";s:19:\"2017-04-13 13:55:54\";s:12:\"english_name\";s:9:\"Icelandic\";s:11:\"native_name\";s:9:\"Íslenska\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.7/is_IS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"is\";i:2;s:3:\"isl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Áfram\";}}s:5:\"it_IT\";a:8:{s:8:\"language\";s:5:\"it_IT\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-13 12:06:14\";s:12:\"english_name\";s:7:\"Italian\";s:11:\"native_name\";s:8:\"Italiano\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/it_IT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"it\";i:2;s:3:\"ita\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"ja\";a:8:{s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-17 09:56:44\";s:12:\"english_name\";s:8:\"Japanese\";s:11:\"native_name\";s:9:\"日本語\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/ja.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"ja\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"続ける\";}}s:5:\"jv_ID\";a:8:{s:8:\"language\";s:5:\"jv_ID\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 11:47:57\";s:12:\"english_name\";s:8:\"Javanese\";s:11:\"native_name\";s:9:\"Basa Jawa\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/jv_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"jv\";i:2;s:3:\"jav\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nutugne\";}}s:5:\"ka_GE\";a:8:{s:8:\"language\";s:5:\"ka_GE\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-07 12:32:16\";s:12:\"english_name\";s:8:\"Georgian\";s:11:\"native_name\";s:21:\"ქართული\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/ka_GE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ka\";i:2;s:3:\"kat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"გაგრძელება\";}}s:3:\"kab\";a:8:{s:8:\"language\";s:3:\"kab\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-08-22 15:33:00\";s:12:\"english_name\";s:6:\"Kabyle\";s:11:\"native_name\";s:9:\"Taqbaylit\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8.3/kab.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"kab\";i:3;s:3:\"kab\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:2:\"km\";a:8:{s:8:\"language\";s:2:\"km\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-07 02:07:59\";s:12:\"english_name\";s:5:\"Khmer\";s:11:\"native_name\";s:27:\"ភាសាខ្មែរ\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/km.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"km\";i:2;s:3:\"khm\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"បន្ត\";}}s:5:\"ko_KR\";a:8:{s:8:\"language\";s:5:\"ko_KR\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-04 01:44:20\";s:12:\"english_name\";s:6:\"Korean\";s:11:\"native_name\";s:9:\"한국어\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/ko_KR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ko\";i:2;s:3:\"kor\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"계속\";}}s:3:\"ckb\";a:8:{s:8:\"language\";s:3:\"ckb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:48:25\";s:12:\"english_name\";s:16:\"Kurdish (Sorani)\";s:11:\"native_name\";s:13:\"كوردی‎\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/ckb.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ku\";i:3;s:3:\"ckb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"به‌رده‌وام به‌\";}}s:2:\"lo\";a:8:{s:8:\"language\";s:2:\"lo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-12 09:59:23\";s:12:\"english_name\";s:3:\"Lao\";s:11:\"native_name\";s:21:\"ພາສາລາວ\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/lo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lo\";i:2;s:3:\"lao\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"ຕໍ່\";}}s:5:\"lt_LT\";a:8:{s:8:\"language\";s:5:\"lt_LT\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 19:40:23\";s:12:\"english_name\";s:10:\"Lithuanian\";s:11:\"native_name\";s:15:\"Lietuvių kalba\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/lt_LT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lt\";i:2;s:3:\"lit\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Tęsti\";}}s:2:\"lv\";a:8:{s:8:\"language\";s:2:\"lv\";s:7:\"version\";s:5:\"4.7.7\";s:7:\"updated\";s:19:\"2017-03-17 20:40:40\";s:12:\"english_name\";s:7:\"Latvian\";s:11:\"native_name\";s:16:\"Latviešu valoda\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.7/lv.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lv\";i:2;s:3:\"lav\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Turpināt\";}}s:5:\"mk_MK\";a:8:{s:8:\"language\";s:5:\"mk_MK\";s:7:\"version\";s:5:\"4.7.7\";s:7:\"updated\";s:19:\"2017-01-26 15:54:41\";s:12:\"english_name\";s:10:\"Macedonian\";s:11:\"native_name\";s:31:\"Македонски јазик\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.7/mk_MK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mk\";i:2;s:3:\"mkd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Продолжи\";}}s:5:\"ml_IN\";a:8:{s:8:\"language\";s:5:\"ml_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 03:43:32\";s:12:\"english_name\";s:9:\"Malayalam\";s:11:\"native_name\";s:18:\"മലയാളം\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ml_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ml\";i:2;s:3:\"mal\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:18:\"തുടരുക\";}}s:2:\"mn\";a:8:{s:8:\"language\";s:2:\"mn\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-12 07:29:35\";s:12:\"english_name\";s:9:\"Mongolian\";s:11:\"native_name\";s:12:\"Монгол\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/mn.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mn\";i:2;s:3:\"mon\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"Үргэлжлүүлэх\";}}s:2:\"mr\";a:8:{s:8:\"language\";s:2:\"mr\";s:7:\"version\";s:5:\"4.8.4\";s:7:\"updated\";s:19:\"2017-09-30 06:25:41\";s:12:\"english_name\";s:7:\"Marathi\";s:11:\"native_name\";s:15:\"मराठी\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.4/mr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mr\";i:2;s:3:\"mar\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"सुरु ठेवा\";}}s:5:\"ms_MY\";a:8:{s:8:\"language\";s:5:\"ms_MY\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-09 00:51:20\";s:12:\"english_name\";s:5:\"Malay\";s:11:\"native_name\";s:13:\"Bahasa Melayu\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/ms_MY.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ms\";i:2;s:3:\"msa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Teruskan\";}}s:5:\"my_MM\";a:8:{s:8:\"language\";s:5:\"my_MM\";s:7:\"version\";s:6:\"4.1.20\";s:7:\"updated\";s:19:\"2015-03-26 15:57:42\";s:12:\"english_name\";s:17:\"Myanmar (Burmese)\";s:11:\"native_name\";s:15:\"ဗမာစာ\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.1.20/my_MM.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"my\";i:2;s:3:\"mya\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:54:\"ဆက်လက်လုပ်ေဆာင်ပါ။\";}}s:5:\"nb_NO\";a:8:{s:8:\"language\";s:5:\"nb_NO\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-17 19:14:57\";s:12:\"english_name\";s:19:\"Norwegian (Bokmål)\";s:11:\"native_name\";s:13:\"Norsk bokmål\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/nb_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nb\";i:2;s:3:\"nob\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsett\";}}s:5:\"ne_NP\";a:8:{s:8:\"language\";s:5:\"ne_NP\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-10-05 06:45:20\";s:12:\"english_name\";s:6:\"Nepali\";s:11:\"native_name\";s:18:\"नेपाली\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.3/ne_NP.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ne\";i:2;s:3:\"nep\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:31:\"जारीराख्नु \";}}s:5:\"nl_BE\";a:8:{s:8:\"language\";s:5:\"nl_BE\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-06 06:13:30\";s:12:\"english_name\";s:15:\"Dutch (Belgium)\";s:11:\"native_name\";s:20:\"Nederlands (België)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/nl_BE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nl_NL\";a:8:{s:8:\"language\";s:5:\"nl_NL\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-25 10:53:17\";s:12:\"english_name\";s:5:\"Dutch\";s:11:\"native_name\";s:10:\"Nederlands\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/nl_NL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:12:\"nl_NL_formal\";a:8:{s:8:\"language\";s:12:\"nl_NL_formal\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-16 15:44:47\";s:12:\"english_name\";s:14:\"Dutch (Formal)\";s:11:\"native_name\";s:20:\"Nederlands (Formeel)\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/translation/core/4.9.1/nl_NL_formal.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nn_NO\";a:8:{s:8:\"language\";s:5:\"nn_NO\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-09-25 10:02:16\";s:12:\"english_name\";s:19:\"Norwegian (Nynorsk)\";s:11:\"native_name\";s:13:\"Norsk nynorsk\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.3/nn_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nn\";i:2;s:3:\"nno\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Hald fram\";}}s:3:\"oci\";a:8:{s:8:\"language\";s:3:\"oci\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-08-25 10:03:08\";s:12:\"english_name\";s:7:\"Occitan\";s:11:\"native_name\";s:7:\"Occitan\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8.3/oci.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"oc\";i:2;s:3:\"oci\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Contunhar\";}}s:5:\"pa_IN\";a:8:{s:8:\"language\";s:5:\"pa_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-16 05:19:43\";s:12:\"english_name\";s:7:\"Punjabi\";s:11:\"native_name\";s:18:\"ਪੰਜਾਬੀ\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/pa_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pa\";i:2;s:3:\"pan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"ਜਾਰੀ ਰੱਖੋ\";}}s:5:\"pl_PL\";a:8:{s:8:\"language\";s:5:\"pl_PL\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-28 19:24:26\";s:12:\"english_name\";s:6:\"Polish\";s:11:\"native_name\";s:6:\"Polski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/pl_PL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pl\";i:2;s:3:\"pol\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Kontynuuj\";}}s:2:\"ps\";a:8:{s:8:\"language\";s:2:\"ps\";s:7:\"version\";s:6:\"4.1.20\";s:7:\"updated\";s:19:\"2015-03-29 22:19:48\";s:12:\"english_name\";s:6:\"Pashto\";s:11:\"native_name\";s:8:\"پښتو\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.1.20/ps.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ps\";i:2;s:3:\"pus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"دوام\";}}s:5:\"pt_BR\";a:8:{s:8:\"language\";s:5:\"pt_BR\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-14 20:53:34\";s:12:\"english_name\";s:19:\"Portuguese (Brazil)\";s:11:\"native_name\";s:20:\"Português do Brasil\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/pt_BR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pt\";i:2;s:3:\"por\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:10:\"pt_PT_ao90\";a:8:{s:8:\"language\";s:10:\"pt_PT_ao90\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-18 12:10:14\";s:12:\"english_name\";s:27:\"Portuguese (Portugal, AO90)\";s:11:\"native_name\";s:17:\"Português (AO90)\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/translation/core/4.9.1/pt_PT_ao90.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"pt_PT\";a:8:{s:8:\"language\";s:5:\"pt_PT\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-18 12:10:02\";s:12:\"english_name\";s:21:\"Portuguese (Portugal)\";s:11:\"native_name\";s:10:\"Português\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/pt_PT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:3:\"rhg\";a:8:{s:8:\"language\";s:3:\"rhg\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-16 13:03:18\";s:12:\"english_name\";s:8:\"Rohingya\";s:11:\"native_name\";s:8:\"Ruáinga\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/rhg.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"rhg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:5:\"ro_RO\";a:8:{s:8:\"language\";s:5:\"ro_RO\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-15 11:13:25\";s:12:\"english_name\";s:8:\"Romanian\";s:11:\"native_name\";s:8:\"Română\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/ro_RO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ro\";i:2;s:3:\"ron\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuă\";}}s:5:\"ru_RU\";a:8:{s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-15 20:59:00\";s:12:\"english_name\";s:7:\"Russian\";s:11:\"native_name\";s:14:\"Русский\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/ru_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ru\";i:2;s:3:\"rus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продолжить\";}}s:3:\"sah\";a:8:{s:8:\"language\";s:3:\"sah\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-21 02:06:41\";s:12:\"english_name\";s:5:\"Sakha\";s:11:\"native_name\";s:14:\"Сахалыы\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/sah.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"sah\";i:3;s:3:\"sah\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Салҕаа\";}}s:5:\"si_LK\";a:8:{s:8:\"language\";s:5:\"si_LK\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-12 06:00:52\";s:12:\"english_name\";s:7:\"Sinhala\";s:11:\"native_name\";s:15:\"සිංහල\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/si_LK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"si\";i:2;s:3:\"sin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:44:\"දිගටම කරගෙන යන්න\";}}s:5:\"sk_SK\";a:8:{s:8:\"language\";s:5:\"sk_SK\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-19 10:53:46\";s:12:\"english_name\";s:6:\"Slovak\";s:11:\"native_name\";s:11:\"Slovenčina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/sk_SK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sk\";i:2;s:3:\"slk\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Pokračovať\";}}s:5:\"sl_SI\";a:8:{s:8:\"language\";s:5:\"sl_SI\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-16 18:38:56\";s:12:\"english_name\";s:9:\"Slovenian\";s:11:\"native_name\";s:13:\"Slovenščina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/sl_SI.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sl\";i:2;s:3:\"slv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Nadaljujte\";}}s:2:\"sq\";a:8:{s:8:\"language\";s:2:\"sq\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-30 17:20:03\";s:12:\"english_name\";s:8:\"Albanian\";s:11:\"native_name\";s:5:\"Shqip\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/sq.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sq\";i:2;s:3:\"sqi\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Vazhdo\";}}s:5:\"sr_RS\";a:8:{s:8:\"language\";s:5:\"sr_RS\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 23:19:48\";s:12:\"english_name\";s:7:\"Serbian\";s:11:\"native_name\";s:23:\"Српски језик\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/sr_RS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sr\";i:2;s:3:\"srp\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:14:\"Настави\";}}s:5:\"sv_SE\";a:8:{s:8:\"language\";s:5:\"sv_SE\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-06 10:38:27\";s:12:\"english_name\";s:7:\"Swedish\";s:11:\"native_name\";s:7:\"Svenska\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/sv_SE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sv\";i:2;s:3:\"swe\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Fortsätt\";}}s:3:\"szl\";a:8:{s:8:\"language\";s:3:\"szl\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-24 19:58:14\";s:12:\"english_name\";s:8:\"Silesian\";s:11:\"native_name\";s:17:\"Ślōnskŏ gŏdka\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/szl.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"szl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:13:\"Kōntynuować\";}}s:5:\"ta_IN\";a:8:{s:8:\"language\";s:5:\"ta_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 03:22:47\";s:12:\"english_name\";s:5:\"Tamil\";s:11:\"native_name\";s:15:\"தமிழ்\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ta_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ta\";i:2;s:3:\"tam\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"தொடரவும்\";}}s:2:\"te\";a:8:{s:8:\"language\";s:2:\"te\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:47:39\";s:12:\"english_name\";s:6:\"Telugu\";s:11:\"native_name\";s:18:\"తెలుగు\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/te.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"te\";i:2;s:3:\"tel\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"కొనసాగించు\";}}s:2:\"th\";a:8:{s:8:\"language\";s:2:\"th\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-10-07 02:08:56\";s:12:\"english_name\";s:4:\"Thai\";s:11:\"native_name\";s:9:\"ไทย\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.3/th.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"th\";i:2;s:3:\"tha\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"ต่อไป\";}}s:2:\"tl\";a:8:{s:8:\"language\";s:2:\"tl\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-30 02:38:08\";s:12:\"english_name\";s:7:\"Tagalog\";s:11:\"native_name\";s:7:\"Tagalog\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/tl.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tl\";i:2;s:3:\"tgl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Magpatuloy\";}}s:5:\"tr_TR\";a:8:{s:8:\"language\";s:5:\"tr_TR\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-20 16:20:13\";s:12:\"english_name\";s:7:\"Turkish\";s:11:\"native_name\";s:8:\"Türkçe\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/tr_TR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tr\";i:2;s:3:\"tur\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Devam\";}}s:5:\"tt_RU\";a:8:{s:8:\"language\";s:5:\"tt_RU\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-20 20:20:50\";s:12:\"english_name\";s:5:\"Tatar\";s:11:\"native_name\";s:19:\"Татар теле\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/tt_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tt\";i:2;s:3:\"tat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:17:\"дәвам итү\";}}s:3:\"tah\";a:8:{s:8:\"language\";s:3:\"tah\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-06 18:39:39\";s:12:\"english_name\";s:8:\"Tahitian\";s:11:\"native_name\";s:10:\"Reo Tahiti\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/tah.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"ty\";i:2;s:3:\"tah\";i:3;s:3:\"tah\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:5:\"ug_CN\";a:8:{s:8:\"language\";s:5:\"ug_CN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-05 09:23:39\";s:12:\"english_name\";s:6:\"Uighur\";s:11:\"native_name\";s:9:\"Uyƣurqə\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ug_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ug\";i:2;s:3:\"uig\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:26:\"داۋاملاشتۇرۇش\";}}s:2:\"uk\";a:8:{s:8:\"language\";s:2:\"uk\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-11-02 17:05:02\";s:12:\"english_name\";s:9:\"Ukrainian\";s:11:\"native_name\";s:20:\"Українська\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.3/uk.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"uk\";i:2;s:3:\"ukr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продовжити\";}}s:2:\"ur\";a:8:{s:8:\"language\";s:2:\"ur\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-07 09:26:23\";s:12:\"english_name\";s:4:\"Urdu\";s:11:\"native_name\";s:8:\"اردو\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/ur.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ur\";i:2;s:3:\"urd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:19:\"جاری رکھیں\";}}s:5:\"uz_UZ\";a:8:{s:8:\"language\";s:5:\"uz_UZ\";s:7:\"version\";s:5:\"4.8.3\";s:7:\"updated\";s:19:\"2017-10-15 05:40:58\";s:12:\"english_name\";s:5:\"Uzbek\";s:11:\"native_name\";s:11:\"O‘zbekcha\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.3/uz_UZ.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"uz\";i:2;s:3:\"uzb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продолжить\";}}s:2:\"vi\";a:8:{s:8:\"language\";s:2:\"vi\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-15 10:43:28\";s:12:\"english_name\";s:10:\"Vietnamese\";s:11:\"native_name\";s:14:\"Tiếng Việt\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.9.1/vi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"vi\";i:2;s:3:\"vie\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Tiếp tục\";}}s:5:\"zh_TW\";a:8:{s:8:\"language\";s:5:\"zh_TW\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-02 09:46:12\";s:12:\"english_name\";s:16:\"Chinese (Taiwan)\";s:11:\"native_name\";s:12:\"繁體中文\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/zh_TW.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}s:5:\"zh_HK\";a:8:{s:8:\"language\";s:5:\"zh_HK\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-12-09 02:29:44\";s:12:\"english_name\";s:19:\"Chinese (Hong Kong)\";s:11:\"native_name\";s:16:\"香港中文版	\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/zh_HK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}s:5:\"zh_CN\";a:8:{s:8:\"language\";s:5:\"zh_CN\";s:7:\"version\";s:5:\"4.9.1\";s:7:\"updated\";s:19:\"2017-11-17 22:20:52\";s:12:\"english_name\";s:15:\"Chinese (China)\";s:11:\"native_name\";s:12:\"简体中文\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.9.1/zh_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"继续\";}}}','no'),(1098,'_site_transient_timeout_theme_roots','1513708176','no'),(1099,'_site_transient_theme_roots','a:11:{s:6:\"astrid\";s:7:\"/themes\";s:5:\"avata\";s:7:\"/themes\";s:13:\"big-pix-child\";s:7:\"/themes\";s:7:\"big-pix\";s:7:\"/themes\";s:7:\"krystal\";s:7:\"/themes\";s:7:\"prasoon\";s:7:\"/themes\";s:17:\"siteorigin-unwind\";s:7:\"/themes\";s:6:\"tracks\";s:7:\"/themes\";s:13:\"twentyfifteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:13:\"twentysixteen\";s:7:\"/themes\";}','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=268 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (1,2,'_wp_page_template','default'),(4,5,'_wp_trash_meta_status','publish'),(5,5,'_wp_trash_meta_time','1512147806'),(6,5,'_wp_desired_post_slug','hello-world'),(7,5,'_wp_trash_meta_comments_status','a:1:{i:1;s:1:\"1\";}'),(8,6,'_wp_page_template','default'),(9,7,'_edit_last','1'),(10,7,'_oembed_70d572faf3644fe99146e0f799367950','{{unknown}}'),(11,7,'_oembed_cba29d53586e06269b7bf4fc18c32575','{{unknown}}'),(12,7,'_oembed_34f9dc9fb5a06550f1019a710d4efe3b','{{unknown}}'),(13,7,'_oembed_e7d7d7d2a37cba900e7641c917646c9d','{{unknown}}'),(14,7,'_thumbnail_id','44'),(15,23,'_wp_attached_file','2017/12/Untitled-1.png'),(16,23,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:252;s:6:\"height\";i:72;s:4:\"file\";s:22:\"2017/12/Untitled-1.png\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(19,31,'_wp_attached_file','2017/12/Ubuntu-Wallpapers-12.jpg'),(20,31,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:2560;s:6:\"height\";i:1600;s:4:\"file\";s:32:\"2017/12/Ubuntu-Wallpapers-12.jpg\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(21,36,'_edit_last','1'),(22,36,'_oembed_ac9062c925e593ca1ab2f3141d07201c','{{unknown}}'),(23,36,'_thumbnail_id','42'),(24,42,'_wp_attached_file','2017/12/featured.jpg'),(25,42,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:2560;s:6:\"height\";i:1600;s:4:\"file\";s:20:\"2017/12/featured.jpg\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(26,44,'_wp_attached_file','2017/12/featured.png'),(27,44,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:1884;s:6:\"height\";i:824;s:4:\"file\";s:20:\"2017/12/featured.png\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(28,45,'_edit_last','1'),(29,45,'_oembed_c26efc4aa575ceaeb8f00a71a3077e4c','{{unknown}}'),(32,5,'_wp_trash_meta_status','publish'),(33,5,'_wp_trash_meta_time','1512147806'),(34,5,'_wp_desired_post_slug','hello-world'),(35,5,'_wp_trash_meta_comments_status','a:1:{i:1;s:1:\"1\";}'),(36,6,'_wp_page_template','default'),(37,7,'_edit_last','1'),(38,7,'_oembed_70d572faf3644fe99146e0f799367950','{{unknown}}'),(39,7,'_oembed_cba29d53586e06269b7bf4fc18c32575','{{unknown}}'),(40,7,'_oembed_34f9dc9fb5a06550f1019a710d4efe3b','{{unknown}}'),(41,7,'_oembed_e7d7d7d2a37cba900e7641c917646c9d','{{unknown}}'),(42,7,'_thumbnail_id','44'),(43,36,'_edit_last','1'),(44,36,'_oembed_ac9062c925e593ca1ab2f3141d07201c','{{unknown}}'),(45,36,'_thumbnail_id','42'),(46,45,'_edit_last','1'),(47,45,'_oembed_c26efc4aa575ceaeb8f00a71a3077e4c','{{unknown}}'),(48,1,'_wp_trash_meta_status','publish'),(49,1,'_wp_trash_meta_time','1512324732'),(50,1,'_wp_desired_post_slug','hello-world'),(51,1,'_wp_trash_meta_comments_status','a:1:{i:1;s:1:\"1\";}'),(52,45,'_edit_lock','1513434788:1'),(53,48,'_edit_lock','1512324839:1'),(54,49,'_wp_attached_file','2017/12/2000px-Logo-ubuntu_cof-white_orange-hex.svg_.png'),(55,49,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:2000;s:6:\"height\";i:2000;s:4:\"file\";s:56:\"2017/12/2000px-Logo-ubuntu_cof-white_orange-hex.svg_.png\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(56,48,'_wp_trash_meta_status','publish'),(57,48,'_wp_trash_meta_time','1512324839'),(58,50,'_wp_trash_meta_status','publish'),(59,50,'_wp_trash_meta_time','1512324870'),(60,51,'_wp_trash_meta_status','publish'),(61,51,'_wp_trash_meta_time','1512326270'),(62,36,'_edit_lock','1513492018:1'),(65,36,'_wp_old_slug','how-to-host-website-on-ubuntu-16-04'),(68,55,'_wp_trash_meta_status','publish'),(69,55,'_wp_trash_meta_time','1512497441'),(74,36,'_wp_old_slug','how-to-host-website-on-ubuntu-17-10'),(79,36,'_wp_old_slug','installing-lamp-on-ubuntu-17-10'),(80,59,'_edit_lock','1512559939:1'),(81,59,'_wp_trash_meta_status','publish'),(82,59,'_wp_trash_meta_time','1512559939'),(83,72,'_wp_attached_file','2017/12/featured-1.png'),(84,72,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:1920;s:6:\"height\";i:1080;s:4:\"file\";s:22:\"2017/12/featured-1.png\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(85,45,'_thumbnail_id','72'),(86,45,'_oembed_e58da8c27ba5e85ed1668640097e3967','{{unknown}}'),(87,45,'_oembed_712a5215df3a0897bd5380849acfd9e0','{{unknown}}'),(96,2,'_wp_trash_meta_status','publish'),(97,2,'_wp_trash_meta_time','1512584691'),(98,2,'_wp_desired_post_slug','sample-page'),(99,6,'_edit_lock','1512585315:1'),(102,84,'_edit_lock','1512835515:1'),(103,84,'_edit_last','1'),(106,84,'_thumbnail_id','89'),(107,89,'_wp_attached_file','2017/12/tes2.png'),(108,89,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:2100;s:6:\"height\";i:1500;s:4:\"file\";s:16:\"2017/12/tes2.png\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(109,7,'_edit_lock','1513434859:1'),(110,93,'_edit_lock','1513260968:1'),(133,106,'_edit_lock','1513443976:1'),(134,106,'_edit_last','1'),(135,106,'_oembed_1136ba1ab4319bf9a25b0b24ead49762','{{unknown}}'),(136,106,'_oembed_d51a3b442e5685298010d43be8dff7b9','{{unknown}}'),(137,84,'_wp_trash_meta_status','draft'),(138,84,'_wp_trash_meta_time','1513357122'),(139,84,'_wp_desired_post_slug','installing-lemp-on-ubuntu-17-10'),(140,106,'_thumbnail_id','31'),(153,128,'_edit_lock','1513418292:1'),(154,128,'_wp_trash_meta_status','publish'),(155,128,'_wp_trash_meta_time','1513418292'),(164,135,'_edit_lock','1513422550:1'),(165,135,'_wp_trash_meta_status','publish'),(166,135,'_wp_trash_meta_time','1513422550'),(169,36,'_yoast_wpseo_metadesc','This tutorial is going to show you steps to install LAMP on ubuntu and host websites on it.'),(170,36,'_yoast_wpseo_content_score','60'),(171,36,'_yoast_wpseo_primary_category',''),(178,7,'_yoast_wpseo_primary_category',''),(179,7,'_yoast_wpseo_content_score','90'),(182,45,'_yoast_wpseo_focuskw_text_input','Wordpress'),(183,45,'_yoast_wpseo_focuskw','Wordpress'),(184,45,'_yoast_wpseo_linkdex','80'),(185,45,'_yoast_wpseo_content_score','60'),(186,45,'_yoast_wpseo_primary_category',''),(189,7,'_yoast_wpseo_focuskw_text_input','h5ai'),(190,7,'_yoast_wpseo_focuskw','h5ai'),(191,7,'_yoast_wpseo_metadesc','h5ai is a modern file indexer for HTTP web servers with focus on your files'),(192,7,'_yoast_wpseo_linkdex','84'),(195,36,'_yoast_wpseo_focuskw_text_input','LAMP'),(196,36,'_yoast_wpseo_focuskw','LAMP'),(197,36,'_yoast_wpseo_linkdex','76'),(200,106,'_yoast_wpseo_focuskw_text_input','Multiple Websites'),(201,106,'_yoast_wpseo_focuskw','Multiple Websites'),(202,106,'_yoast_wpseo_metadesc','In this guide we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.'),(203,106,'_yoast_wpseo_linkdex','71'),(204,106,'_yoast_wpseo_content_score','60'),(205,106,'_yoast_wpseo_primary_category',''),(208,36,'_yoast_wpseo_title','How To Install LAMP on Ubuntu - 17.10'),(211,36,'_wp_old_slug','installing-lamp-on-ubuntu'),(212,144,'_edit_lock','1513621005:1'),(213,144,'_edit_last','1'),(214,144,'_yoast_wpseo_content_score','60'),(215,144,'_yoast_wpseo_primary_category','5'),(216,144,'_yoast_wpseo_focuskw_text_input','ubuntu 17.10'),(217,144,'_yoast_wpseo_focuskw','ubuntu 17.10'),(218,144,'_yoast_wpseo_metadesc','This guide will walk you through the steps required for installing ubuntu 17.10.'),(219,144,'_yoast_wpseo_linkdex','68'),(220,177,'_wp_attached_file','2017/12/featured-1.jpg'),(221,177,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:2560;s:6:\"height\";i:1600;s:4:\"file\";s:22:\"2017/12/featured-1.jpg\";s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(222,144,'_thumbnail_id','177'),(237,189,'_edit_last','2'),(238,189,'_edit_lock','1513524233:1'),(239,189,'_wp_trash_meta_status','draft'),(240,189,'_wp_trash_meta_time','1513524377'),(241,189,'_wp_desired_post_slug',''),(242,191,'_edit_lock','1513526799:1'),(243,191,'_edit_last','1'),(246,191,'_yoast_wpseo_content_score','30'),(247,191,'_yoast_wpseo_primary_category',''),(248,191,'_wp_trash_meta_status','publish'),(249,191,'_wp_trash_meta_time','1513526979'),(250,191,'_wp_desired_post_slug','test'),(251,194,'_edit_lock','1513526967:1'),(252,194,'_edit_last','1'),(255,194,'_yoast_wpseo_content_score','30'),(256,194,'_yoast_wpseo_primary_category',''),(257,194,'_wp_trash_meta_status','publish'),(258,194,'_wp_trash_meta_time','1513527111'),(259,194,'_wp_desired_post_slug','test'),(260,196,'_edit_last','1'),(261,196,'_edit_lock','1513702446:1'),(262,196,'_yoast_wpseo_content_score','30'),(263,196,'_yoast_wpseo_primary_category','4'),(264,201,'_edit_lock','1513706375:1'),(265,201,'_edit_last','1'),(266,201,'_yoast_wpseo_content_score','30'),(267,201,'_yoast_wpseo_primary_category','');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=205 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (1,1,'2017-12-03 18:04:33','2017-12-03 18:04:33','Welcome to WordPress. This is your first post. Edit or delete it, then start writing!','Hello world!','','trash','open','open','','hello-world__trashed-2','','','2017-12-03 18:12:12','2017-12-03 18:12:12','',0,'http://35.196.242.183/?p=1',0,'post','',1),(2,1,'2017-12-03 18:04:33','2017-12-03 18:04:33','This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://35.196.242.183/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!','Sample Page','','trash','closed','open','','sample-page__trashed','','','2017-12-06 23:54:51','2017-12-06 18:24:51','',0,'http://35.196.242.183/?page_id=2',0,'page','',0),(5,1,'2017-11-30 19:50:37','2017-11-30 19:50:37','Welcome to WordPress. This is your first post. Edit or delete it, then start writing!','Hello world!','','trash','open','open','','hello-world__trashed','','','2017-11-30 19:50:37','2017-11-30 19:50:37','',0,'http://35.227.62.41/?p=1',0,'post','',0),(6,1,'2017-11-30 19:50:37','2017-11-30 19:50:37','This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://35.227.62.41/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!','Sample Page','','publish','closed','open','','sample-page-2','','','2017-11-30 19:50:37','2017-11-30 19:50:37','',0,'http://35.227.62.41/?page_id=2',0,'page','',0),(7,1,'2017-12-02 14:40:27','2017-12-02 14:40:27','<p style=\"text-align: center;\"><span style=\"color: #000000;\">h5ai is a modern file indexer for HTTP web servers with focus on your files. Directories are displayed in an appealing way and browsing them is enhanced by different views, a breadcrumb and a tree overview. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">PREREQUISITES </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server. </span></li>\r\n 	<li><span style=\"color: #000000;\">you’ll need to have a <strong>LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/how-to-host-website-on-ubuntu-16-04/\">this guide to learn how to install Apache on Ubuntu.</a></span></li>\r\n 	<li><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide. </span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — DOWNLOADING &amp; EXTRACTING </span><span style=\"color: #000000;\">h5ai </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Change your directory to <strong>/var/www/html</strong> and user to sudo </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the latest release of h5ai from here . In my case <strong>0.29.0</strong> is the latest one. Right click on the download button and copy the link address. </span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/01.jpg\" width=\"733\" height=\"359\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Download in your terminal by using the command </span><strong><span style=\"color: #000000;\">wget &lt;copied address&gt;</span></strong></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">wget https://release.larsjung.de/h5ai/h5ai-0.29.0.zip</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">unzip the zip file by using</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">unzip h5ai-0.29.0.zip</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Now that you have a directory called <strong>_h5ai</strong> ,visit<strong> http://YOUR-DOMAIN.TLD/_h5ai/public/index.php</strong>, to check if h5ai is reachable. This page shows some hints on the server’s capabilities.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/0.JPG\" width=\"761\" height=\"369\" />\r\n\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/03.JPG\" width=\"780\" height=\"375\" />\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — CREATING .htaccess </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">An .htaccess file is a way to configure the details of your website without needed to alter the server config files. The period that starts the file name will keep the file hidden within the folder.</span><span style=\"color: #000000;\">Before creating .htaccess file, we need to make sure that our server can access the file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">For that go to <strong>/etc/apache2/sites-available</strong>. Open the <strong>000-default.conf</strong> file and add the following lines below DocumentRoot </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">&lt;Directory \"/var/www\"&gt;\r\nAllowOverride All\r\n&lt;/Directory&gt;</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the .htaccess file under<strong> /var/www/htm</strong>l and open it by using following command </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano .htaccess</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">write following code in it </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">DirectoryIndex index.html index.php /_h5ai/public/index.php</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Save and exit. Now that you have the .htaccess file which specifies the code above, it will direct the browser to open the index page of h5ai unless we have a main index on the directory. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3— VERIFYING EVERYTHING </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">now that we have everything set up , <strong>Visit http://YOUR-DOMAIN.TLD</strong> and check if the page is reachable. It will show all the files present in the <strong>/var/www/html</strong> folder except files starting <strong>name with _ or .</strong> </span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/04.JPG\" width=\"771\" height=\"373\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Lets add a test file to it . </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">nano hello.txt</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in “<strong>Hello</strong>!” and save and exit. Reload page in browser. you should be able to see the same file</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/05.JPG\" width=\"745\" height=\"359\" /><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/06.JPG\" width=\"745\" height=\"334\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Congrats, you have reached the end of this guide. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hope you enjoyed</span></p>','Installing h5ai on Your Web Server','','publish','open','open','','installing-h5ai-on-your-web-server','','','2017-12-16 20:06:36','2017-12-16 14:36:36','',0,'http://www.hyperdroid.in/?p=4',0,'post','',2),(23,1,'2017-12-01 13:52:03','2017-12-01 13:52:03','','Untitled-1','','inherit','open','closed','','untitled-1','','','2017-12-01 13:52:03','2017-12-01 13:52:03','',0,'http://35.196.242.183/wp-content/uploads/2017/12/Untitled-1.png',0,'attachment','image/png',0),(31,1,'2017-12-01 17:01:02','2017-12-01 17:01:02','','Ubuntu-Wallpapers-12','','inherit','open','closed','','ubuntu-wallpapers-12','','','2017-12-01 17:01:02','2017-12-01 17:01:02','',0,'http://35.196.242.183/wp-content/uploads/2017/12/Ubuntu-Wallpapers-12.jpg',0,'attachment','image/jpeg',0),(36,1,'2017-12-01 17:54:48','2017-12-01 17:54:48','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10 and older. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\r\nsudo apt-get install apache2</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install mysql-server mysql-client</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot -p</span></pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install php libapache2-mod-php php-mysql</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</span></pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','How To Install LAMP (Apache2) on Ubuntu','','publish','open','open','','how-to-install-lamp-on-ubuntu','','','2017-12-17 11:50:37','2017-12-17 06:20:37','',0,'http://www.hyperdroid.in/?p=36',0,'post','',0),(42,1,'2017-12-01 17:55:29','2017-12-01 17:55:29','','featured','','inherit','open','closed','','featured','','','2017-12-01 17:55:29','2017-12-01 17:55:29','',36,'http://35.196.242.183/wp-content/uploads/2017/12/featured.jpg',0,'attachment','image/jpeg',0),(44,1,'2017-12-02 15:51:49','2017-12-02 15:51:49','','featured','','inherit','open','closed','','featured-2','','','2017-12-02 15:51:49','2017-12-02 15:51:49','',7,'http://35.196.242.183/wp-content/uploads/2017/12/featured.png',0,'attachment','image/png',0),(45,1,'2017-12-06 20:09:57','2017-12-06 14:39:57','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\">cd ~ \r\nwget http://wordpress.org/latest.tar.gz</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive.So we need to allow the web server itself to write to this directory and we can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','publish','open','open','','installing-wordpress-on-ubuntu','','\nhttp://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/','2017-12-16 20:05:28','2017-12-16 14:35:28','',0,'http://www.hyperdroid.in/?p=45',0,'post','',0),(47,1,'2017-12-03 18:12:12','2017-12-03 18:12:12','Welcome to WordPress. This is your first post. Edit or delete it, then start writing!','Hello world!','','inherit','closed','closed','','1-revision-v1','','','2017-12-03 18:12:12','2017-12-03 18:12:12','',1,'http://35.196.242.183/index.php/2017/12/03/1-revision-v1/',0,'revision','',0),(48,1,'2017-12-03 18:13:59','2017-12-03 18:13:59','{\n    \"big-pix::BIGPIX_logo\": {\n        \"value\": \"http://35.196.242.183/wp-content/uploads/2017/12/Untitled-1.png\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-03 18:13:22\"\n    },\n    \"big-pix::BIGPIX_favicon\": {\n        \"value\": \"http://35.196.242.183/wp-content/uploads/2017/12/2000px-Logo-ubuntu_cof-white_orange-hex.svg_.png\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-03 18:13:59\"\n    }\n}','','','trash','closed','closed','','1a6976da-c3e8-4b74-a145-3a0f02c0ae49','','','2017-12-03 18:13:59','2017-12-03 18:13:59','',0,'http://35.196.242.183/?p=48',0,'customize_changeset','',0),(49,1,'2017-12-03 18:13:54','2017-12-03 18:13:54','','2000px-Logo-ubuntu_cof-white_orange-hex.svg','','inherit','open','closed','','2000px-logo-ubuntu_cof-white_orange-hex-svg','','','2017-12-03 18:13:54','2017-12-03 18:13:54','',0,'http://35.196.242.183/wp-content/uploads/2017/12/2000px-Logo-ubuntu_cof-white_orange-hex.svg_.png',0,'attachment','image/png',0),(50,1,'2017-12-03 18:14:30','2017-12-03 18:14:30','{\n    \"big-pix::BIGPIX_color_settings_3\": {\n        \"value\": \"#ff2323\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-03 18:14:30\"\n    }\n}','','','trash','closed','closed','','903596b9-e136-4b59-9963-bed40f16f38f','','','2017-12-03 18:14:30','2017-12-03 18:14:30','',0,'http://35.196.242.183/index.php/2017/12/03/903596b9-e136-4b59-9963-bed40f16f38f/',0,'customize_changeset','',0),(51,1,'2017-12-04 00:07:50','2017-12-03 18:37:50','{\n    \"big-pix::BIGPIX_color_settings\": {\n        \"value\": \"#0a0a0a\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-03 18:37:50\"\n    }\n}','','','trash','closed','closed','','de00ac1f-6b5b-447f-8275-d421dfbdf7a5','','','2017-12-04 00:07:50','2017-12-03 18:37:50','',0,'http://www.hyperdroid.in/index.php/2017/12/04/de00ac1f-6b5b-447f-8275-d421dfbdf7a5/',0,'customize_changeset','',0),(52,1,'2017-12-17 11:50:33','2017-12-17 06:20:33','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10 and older. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\n\n<ul style=\"text-align: center;\">\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\n</ul>\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\nsudo apt-get install apache2</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install mysql-server mysql-client</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if mySQL is installed properly, open mysql on terminal with command –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot -p</span></pre>\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install php libapache2-mod-php php-mysql</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">&lt;?php\n\nphpinfo();\n\n?&gt;</span></pre>\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Restart apache2 web server –</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','How To Install LAMP (Apache2) on Ubuntu','','inherit','closed','closed','','36-autosave-v1','','','2017-12-17 11:50:33','2017-12-17 06:20:33','',36,'http://www.hyperdroid.in/index.php/2017/12/05/36-autosave-v1/',0,'revision','',0),(53,1,'2017-12-05 23:34:12','2017-12-05 18:04:12','<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','How to Host Website on Ubuntu-17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-05 23:34:12','2017-12-05 18:04:12','',36,'http://www.hyperdroid.in/index.php/2017/12/05/36-revision-v1/',0,'revision','',0),(54,1,'2017-12-05 23:39:16','2017-12-05 18:09:16','<blockquote>\r\n<h3 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">INSTALLING LAMP ON UBUNTU </span></strong></h3>\r\n<span style=\"color: #000000;\">This brief tutorial is going to show students and new users steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to host and run dynamic websites and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','How to Host Website on Ubuntu-17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-05 23:39:16','2017-12-05 18:09:16','',36,'http://www.hyperdroid.in/index.php/2017/12/05/36-revision-v1/',0,'revision','',0),(55,1,'2017-12-05 23:40:41','2017-12-05 18:10:41','{\n    \"big-pix::BIGPIX_color_settings_2\": {\n        \"value\": \"#ffffff\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-05 18:10:41\"\n    }\n}','','','trash','closed','closed','','d88d32e2-56c6-4b23-97fa-e603837042f0','','','2017-12-05 23:40:41','2017-12-05 18:10:41','',0,'http://www.hyperdroid.in/index.php/2017/12/05/d88d32e2-56c6-4b23-97fa-e603837042f0/',0,'customize_changeset','',0),(56,1,'2017-12-05 23:41:47','2017-12-05 18:11:47','<blockquote>\r\n<h3 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">INSTALLING LAMP ON UBUNTU </span></strong></h3>\r\n<span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to host and run dynamic websites and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','How to Host Website on Ubuntu-17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-05 23:41:47','2017-12-05 18:11:47','',36,'http://www.hyperdroid.in/index.php/2017/12/05/36-revision-v1/',0,'revision','',0),(57,1,'2017-12-05 23:42:48','2017-12-05 18:12:48','<blockquote>\r\n<h3 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">INSTALLING LAMP ON UBUNTU </span></strong></h3>\r\n<span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','INSTALLING LAMP ON UBUNTU -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-05 23:42:48','2017-12-05 18:12:48','',36,'http://www.hyperdroid.in/index.php/2017/12/05/36-revision-v1/',0,'revision','',0),(58,1,'2017-12-05 23:43:23','2017-12-05 18:13:23','<blockquote>\r\n<h3 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">INSTALLING LAMP ON UBUNTU </span></strong></h3>\r\n<span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','Installing LAMP on Ubuntu -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-05 23:43:23','2017-12-05 18:13:23','',36,'http://www.hyperdroid.in/index.php/2017/12/05/36-revision-v1/',0,'revision','',0),(59,1,'2017-12-06 17:02:19','2017-12-06 11:32:19','{\n    \"big-pix::BIGPIX_color_settings_2\": {\n        \"value\": \"#4f4f4f\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-06 11:31:57\"\n    }\n}','','','trash','closed','closed','','ff276c7a-b0ac-450f-9551-5ac998785115','','','2017-12-06 17:02:19','2017-12-06 11:32:19','',0,'http://www.hyperdroid.in/?p=59',0,'customize_changeset','',0),(60,1,'2017-12-06 18:55:13','2017-12-06 13:25:13','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP ONE — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span>\r\n<span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span>\r\n<span style=\"color: #000000;\"> sudo mysql -u root -p</span>\r\n<span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span>\r\n<span style=\"color: #000000;\"> CREATE DATABASE wordpress;</span>\r\n<span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span>\r\n<span style=\"color: #000000;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span>\r\n<span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span>\r\n<span style=\"color: #000000;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span>\r\n<span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span>\r\n<span style=\"color: #000000;\"> FLUSH PRIVILEGES;</span>\r\n<span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span>\r\n<span style=\"color: #000000;\"> exit</span>\r\n<span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 18:55:13','2017-12-06 13:25:13','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(61,1,'2017-12-06 18:56:00','2017-12-06 13:26:00','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span>\r\n<span style=\"color: #000000;\"> sudo mysql -u root -p</span>\r\n<span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span>\r\n<span style=\"color: #000000;\"> CREATE DATABASE wordpress;</span>\r\n<span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span>\r\n<span style=\"color: #000000;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span>\r\n<span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span>\r\n<span style=\"color: #000000;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span>\r\n<span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span>\r\n<span style=\"color: #000000;\"> FLUSH PRIVILEGES;</span>\r\n<span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span>\r\n<span style=\"color: #000000;\"> exit</span>\r\n<span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 18:56:00','2017-12-06 13:26:00','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(62,1,'2017-12-06 18:56:15','2017-12-06 13:26:15','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span>\r\n<span style=\"color: #000000;\"> sudo mysql -u root -p</span>\r\n<span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span>\r\n<span style=\"color: #000000;\"> CREATE DATABASE wordpress;</span>\r\n<span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span>\r\n<span style=\"color: #000000;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span>\r\n<span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span>\r\n<span style=\"color: #000000;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span>\r\n<span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span>\r\n<span style=\"color: #000000;\"> FLUSH PRIVILEGES;</span>\r\n<span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span>\r\n<span style=\"color: #000000;\"> exit</span>\r\n<span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 18:56:15','2017-12-06 13:26:15','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(63,1,'2017-12-06 18:58:11','2017-12-06 13:28:11','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span>\r\n<span style=\"color: #000000;\"> CREATE DATABASE wordpress;</span>\r\n<span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span>\r\n<span style=\"color: #000000;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span>\r\n<span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span>\r\n<span style=\"color: #000000;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span>\r\n<span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span>\r\n<span style=\"color: #000000;\"> FLUSH PRIVILEGES;</span>\r\n<span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span>\r\n<span style=\"color: #000000;\"> exit</span>\r\n<span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 18:58:11','2017-12-06 13:28:11','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(64,1,'2017-12-06 18:59:33','2017-12-06 13:29:33','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CREATE DATABASE wordpress;</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">FLUSH PRIVILEGES;</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">exit</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 18:59:33','2017-12-06 13:29:33','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(65,1,'2017-12-06 18:59:39','2017-12-06 13:29:39','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CREATE DATABASE wordpress;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">FLUSH PRIVILEGES;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">exit</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 18:59:39','2017-12-06 13:29:39','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(66,1,'2017-12-06 19:04:55','2017-12-06 13:34:55','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP TWO — DOWNLOAD WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span>\r\n<span style=\"color: #000000;\"> cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span>\r\n<span style=\"color: #000000;\"> tar xzvf latest.tar.gz</span>\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:04:55','2017-12-06 13:34:55','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(67,1,'2017-12-06 19:19:07','2017-12-06 13:49:07','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span>\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span>\r\n<span style=\"color: #000000;\"> cd ~/wordpress</span>\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span>\r\n<span style=\"color: #000000;\"> cp wp-config-sample.php wp-config.php</span>\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span>\r\n<span style=\"color: #000000;\"> nano wp-config.php</span>\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span>\r\n<span style=\"color: #000000;\"> // ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #000000;\"> /** The name of the database for WordPress */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_NAME\', \'wordpress\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database username */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_USER\', \'wordpressuser\');</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">/** MySQL database password */</span>\r\n<span style=\"color: #000000;\"> define(\'DB_PASSWORD\', \'password\');</span>\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:19:07','2017-12-06 13:49:07','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(68,1,'2017-12-06 19:24:06','2017-12-06 13:54:06','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</span>\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is /var/www/html/. We can transfer our WordPress files there by typing:</span>\r\n<span style=\"color: #000000;\"> sudo rsync -avP ~/wordpress/ /var/www/html/</span>\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span>\r\n<span style=\"color: #000000;\"> cd /var/www/html</span>\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R demo:www-data *</span>\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #000000;\"> mkdir /var/www/html/wp-content/themes</span>\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 777 /var/www</span>\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:24:06','2017-12-06 13:54:06','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(69,1,'2017-12-06 19:26:47','2017-12-06 13:56:47','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP THREE — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP FOUR — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff;\"> mkdir /var/www/html/wp-content/uploads</span>\r\n<span style=\"color: #ffffff;\">  mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">STEP FIVE — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span>\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<span style=\"color: #000000;\"> http://server_domain_name_or_IP</span>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CHANGING THE PERMALINK SETTINGS IN WORDPRESS</span>\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:26:47','2017-12-06 13:56:47','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(70,1,'2017-12-06 19:32:07','2017-12-06 14:02:07','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:32:07','2017-12-06 14:02:07','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(71,1,'2017-12-06 19:33:13','2017-12-06 14:03:13','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use this guide to learn how to install Apache on Ubuntu.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span>\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:33:13','2017-12-06 14:03:13','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(72,1,'2017-12-06 19:33:36','2017-12-06 14:03:36','','featured','','inherit','open','closed','','featured-3','','','2017-12-06 19:33:36','2017-12-06 14:03:36','',45,'http://www.hyperdroid.in/wp-content/uploads/2017/12/featured-1.png',0,'attachment','image/png',0),(73,1,'2017-12-06 19:54:17','2017-12-06 14:24:17','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" />\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 19:54:17','2017-12-06 14:24:17','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(74,1,'2017-12-06 20:07:34','2017-12-06 14:37:34','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must end in a semi-colon (;), so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making wordpressuser and will assign it a password of password. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as demo(demo@pc-name). This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is www-data. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 20:07:34','2017-12-06 14:37:34','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(75,1,'2017-12-06 20:09:57','2017-12-06 14:39:57','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-06 20:09:57','2017-12-06 14:39:57','',45,'http://www.hyperdroid.in/index.php/2017/12/06/45-revision-v1/',0,'revision','',0),(81,1,'2017-12-06 23:54:51','2017-12-06 18:24:51','This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://35.196.242.183/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!','Sample Page','','inherit','closed','closed','','2-revision-v1','','','2017-12-06 23:54:51','2017-12-06 18:24:51','',2,'http://www.hyperdroid.in/index.php/2017/12/06/2-revision-v1/',0,'revision','',0),(82,1,'2017-12-06 23:54:55','2017-12-06 18:24:55','This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\r\n\r\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\r\n\r\n...or something like this:\r\n\r\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\r\n\r\nAs a new WordPress user, you should go to <a href=\"http://35.227.62.41/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!','Sample Page','','inherit','closed','closed','','6-autosave-v1','','','2017-12-06 23:54:55','2017-12-06 18:24:55','',6,'http://www.hyperdroid.in/index.php/2017/12/06/6-autosave-v1/',0,'revision','',0),(83,1,'2017-12-09 12:47:31','2017-12-09 07:17:31','<blockquote>\r\n<h3 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">INSTALLING LAMP ON UBUNTU </span></strong></h3>\r\n<span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','Installing LAMP (Apache2) on Ubuntu -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-09 12:47:31','2017-12-09 07:17:31','',36,'https://www.hyperdroid.in/index.php/2017/12/09/36-revision-v1/',0,'revision','',0),(84,1,'2017-12-15 22:28:42','2017-12-15 16:58:42','','Installing LEMP(Nginx) on ubuntu-17.10','','trash','open','open','','installing-lemp-on-ubuntu-17-10__trashed','','','2017-12-15 22:28:42','2017-12-15 16:58:42','',0,'https://www.hyperdroid.in/?p=84',0,'post','',0),(85,1,'2017-12-09 12:48:19','2017-12-09 07:18:19','','Installing LEMP (Nginx) on ubuntu -17.10','','inherit','closed','closed','','84-revision-v1','','','2017-12-09 12:48:19','2017-12-09 07:18:19','',84,'https://www.hyperdroid.in/index.php/2017/12/09/84-revision-v1/',0,'revision','',0),(87,1,'2017-12-09 12:53:04','2017-12-09 07:23:04','','Installing LEMP (Nginx) on ubuntu-17.10','','inherit','closed','closed','','84-revision-v1','','','2017-12-09 12:53:04','2017-12-09 07:23:04','',84,'https://www.hyperdroid.in/index.php/2017/12/09/84-revision-v1/',0,'revision','',0),(88,1,'2017-12-09 12:53:41','2017-12-09 07:23:41','','Installing LEMP(Nginx) on ubuntu-17.10','','inherit','closed','closed','','84-revision-v1','','','2017-12-09 12:53:41','2017-12-09 07:23:41','',84,'https://www.hyperdroid.in/index.php/2017/12/09/84-revision-v1/',0,'revision','',0),(89,1,'2017-12-09 12:54:43','2017-12-09 07:24:43','','tes2','','inherit','open','closed','','tes2','','','2017-12-09 12:54:43','2017-12-09 07:24:43','',84,'https://www.hyperdroid.in/wp-content/uploads/2017/12/tes2.png',0,'attachment','image/png',0),(90,1,'2017-12-11 20:03:07','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-11 20:03:07','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=90',0,'post','',0),(91,2,'2017-12-12 20:07:45','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-12 20:07:45','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=91',0,'post','',0),(92,1,'2017-12-14 08:48:29','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-14 08:48:29','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=92',0,'post','',0),(93,1,'2017-12-14 19:45:40','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-14 19:45:40','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=93',0,'post','',0),(94,1,'2017-12-16 20:04:50','2017-12-16 14:34:50','<blockquote>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\n</blockquote>\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\n<ul style=\"text-align: center;\">\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\n</ul>\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\n\n<pre style=\"text-align: center;\">cd ~ \nwget http://wordpress.org/latest.tar.gz</pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></pre>\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\n\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\n\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\n</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\n\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive.So We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\n\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\n\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\n\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-autosave-v1','','','2017-12-16 20:04:50','2017-12-16 14:34:50','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-autosave-v1/',0,'revision','',0),(95,1,'2017-12-14 19:47:51','2017-12-14 14:17:51','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:47:51','2017-12-14 14:17:51','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(96,1,'2017-12-14 19:49:35','2017-12-14 14:19:35','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~ &amp;&amp; wget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:49:35','2017-12-14 14:19:35','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(97,1,'2017-12-14 19:50:40','2017-12-14 14:20:40','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~\r\nwget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:50:40','2017-12-14 14:20:40','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(98,1,'2017-12-14 19:52:25','2017-12-14 14:22:25','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: terminal, monaco, monospace;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~\r\nwget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:52:25','2017-12-14 14:22:25','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(99,1,'2017-12-14 19:53:11','2017-12-14 14:23:11','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~\r\nwget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:53:11','2017-12-14 14:23:11','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(100,1,'2017-12-14 19:53:30','2017-12-14 14:23:30','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~\r\nwget http://wordpress.org/latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:53:30','2017-12-14 14:23:30','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(101,1,'2017-12-14 19:54:47','2017-12-14 14:24:47','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~\r\nwget http://wordpress.org/latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></strong></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:54:47','2017-12-14 14:24:47','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(102,1,'2017-12-14 19:56:46','2017-12-14 14:26:46','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL, so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~ \r\nwget http://wordpress.org/latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></strong></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:56:46','2017-12-14 14:26:46','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(103,1,'2017-12-14 19:58:14','2017-12-14 14:28:14','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~ \r\nwget &lt;URL&gt;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></strong></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 19:58:14','2017-12-14 14:28:14','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(104,1,'2017-12-14 20:00:00','2017-12-14 14:30:00','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre><strong><span style=\"font-family: \'courier new\', courier, monospace;\">cd ~ \r\nwget http://wordpress.org/latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></strong></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 20:00:00','2017-12-14 14:30:00','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(105,1,'2017-12-14 20:17:57','2017-12-14 14:47:57','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong>cd ~ \r\nwget http://wordpress.org/latest.tar.gz</strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></strong></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-14 20:17:57','2017-12-14 14:47:57','',45,'https://www.hyperdroid.in/index.php/2017/12/14/45-revision-v1/',0,'revision','',0),(106,1,'2017-12-16 13:49:11','2017-12-16 08:19:11','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for<strong> example.com</strong> and another for<strong> test.com</strong>. These will be referenced throughout the guide, but<strong> you should substitute your own domains or values while following along.</strong></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a <strong>public_html</strong> folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the <strong>public_html</strong> sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on <strong>port 80</strong>, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> After this, we need to add two directives. The first, called <strong>ServerName</strong>, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called<strong> ServerAlias</strong>, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the <strong>DocumentRootdirective</strong> to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you visit your second page at </span><strong><span style=\"color: #000000;\">http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','Hosting Multiple Websites On Ubuntu','','publish','open','open','','hosting-multiple-websites-on-ubuntu','','\nhttp://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/','2017-12-16 22:37:42','2017-12-16 17:07:42','',0,'https://www.hyperdroid.in/?p=106',0,'post','',0),(107,1,'2017-12-14 23:33:40','2017-12-14 18:03:40','<blockquote>\r\n<p style=\"text-align: center;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.\r\nThese designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</p>\r\n</blockquote>\r\n<p style=\"text-align: center;\">\r\nPREREQUISITES\r\nYou will also need to have Apache installed in order to work through these steps. If you haven’t already done so, you can get Apache installed on your server through apt-get:\r\nsudo apt-get update\r\nsudo apt-get install apache2\r\nAfter these steps are complete, we can get started.\r\nFor the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.\r\nWe will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.\r\nSTEP ONE — CREATE THE DIRECTORY STRUCTURE\r\nThe first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.\r\nOur document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the /var/www directory. We will create a directory here for both of the virtual hosts we plan on making.\r\nWithin each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.\r\nFor instance, for our sites, we’re going to make our directories like this:\r\nsudo mkdir -p /var/www/example.com/public_html</p>\r\n<p style=\"text-align: center;\">sudo mkdir -p /var/www/test.com/public_html\r\nThe portions in red represent the domain names that we are wanting to serve from our VPS.\r\nSTEP TWO — GRANT PERMISSIONS\r\nNow we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:\r\nsudo chown -R $USER:$USER /var/www/example.com/public_html</p>\r\n<p style=\"text-align: center;\">sudo chown -R $USER:$USER /var/www/test.com/public_html\r\nThe $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.\r\nWe should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:\r\nsudo chmod -R 755 /var/www\r\nYour web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.\r\nSTEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST\r\nWe have our directory structure in place. Let’s create some content to serve.\r\nWe’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.\r\nLet’s start with example.com. We can open up an index.html file in our editor by typing:\r\nnano /var/www/example.com/public_html/index.html\r\nIn this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\">Success! The example.com virtual host is working!</h1>\r\n<p style=\"text-align: center;\">\r\n\r\nSave and close the file when you are finished.\r\nWe can copy this file to use as the basis for our second site by typing:\r\ncp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html\r\nWe can then open the file and modify the relevant pieces of information:\r\nnano /var/www/test.com/public_html/index.html\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\">Success! The test.com virtual host is working!</h1>\r\n<p style=\"text-align: center;\">\r\n\r\nSave and close this file as well. You now have the pages necessary to test the virtual host configuration.\r\nSTEP FOUR — CREATE NEW VIRTUAL HOST FILES\r\nVirtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.\r\nApache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.\r\nWe will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.\r\nCreate the First Virtual Host File\r\nStart by copying the file for the first domain:\r\nsudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf\r\nOpen the new file in your editor with root privileges:\r\nsudo nano /etc/apache2/sites-available/example.com.conf\r\nThe file will look something like this (I’ve removed the comments here to make the file more approachable):</p>\r\n<p style=\"text-align: center;\">ServerAdmin webmaster@localhost</p>\r\n<p style=\"text-align: center;\">DocumentRoot /var/www/html</p>\r\n<p style=\"text-align: center;\">ErrorLog ${APACHE_LOG_DIR}/error.log</p>\r\n<p style=\"text-align: center;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</p>\r\n<p style=\"text-align: center;\">\r\nAs you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.\r\nFirst, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.\r\nServerAdmin admin@example.com\r\nAfter this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:\r\nServerName example.com</p>\r\n<p style=\"text-align: center;\">ServerAlias www.example.com\r\nThe only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:\r\nDocumentRoot /var/www/example.com/public_html\r\nIn total, our virtualhost file should look like this:</p>\r\n<p style=\"text-align: center;\">ServerAdmin admin@example.com</p>\r\n<p style=\"text-align: center;\">ServerName example.com</p>\r\n<p style=\"text-align: center;\">ServerAlias www.example.com</p>\r\n<p style=\"text-align: center;\">DocumentRoot /var/www/example.com/public_html</p>\r\n<p style=\"text-align: center;\">ErrorLog ${APACHE_LOG_DIR}/error.log</p>\r\n<p style=\"text-align: center;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</p>\r\n<p style=\"text-align: center;\">\r\nSave and close the file.\r\nCOPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN\r\nNow that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.\r\nStart by copying it:\r\nsudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf\r\nOpen the new file with root privileges in your editor:\r\nsudo nano /etc/apache2/sites-available/test.com.conf\r\nYou now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</p>\r\n<p style=\"text-align: center;\">ServerAdmin admin@test.com</p>\r\n<p style=\"text-align: center;\">ServerName test.com</p>\r\n<p style=\"text-align: center;\">ServerAlias www.test.com</p>\r\n<p style=\"text-align: center;\">DocumentRoot /var/www/test.com/public_html</p>\r\n<p style=\"text-align: center;\">ErrorLog ${APACHE_LOG_DIR}/error.log</p>\r\n<p style=\"text-align: center;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</p>\r\n<p style=\"text-align: center;\">\r\nSave and close the file when you are finished.\r\nSTEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES\r\nNow that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.\r\nWe can use the a2ensite tool to enable each of our sites like this:\r\nsudo a2ensite example.com.conf</p>\r\n<p style=\"text-align: center;\">sudo a2ensite test.com.conf\r\nWhen you are finished, you need to restart Apache to make these changes take effect:\r\nsudo service apache2 restart\r\nYou will most likely receive a message saying something similar to:\r\n* Restarting web server apache2\r\nAH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message\r\nThis is a harmless message that does not affect our site.\r\nSTEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)\r\nIf you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.\r\nThis will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.\r\nMake sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.\r\nIf you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:\r\nsudo nano /etc/hosts\r\nThe details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.\r\nFor the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:\r\n127.0.0.1 localhost\r\n127.0.1.1 guest-desktop\r\n111.111.111.111 example.com\r\n111.111.111.111 test.com\r\nThis will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.\r\nSave and close the file.\r\nSTEP SEVEN — TEST YOUR RESULTS\r\nNow that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:\r\nhttp://example.com\r\nYou should see a page that looks like this:</p>\r\n<p style=\"text-align: center;\">Likewise, if you can visit your second page:\r\nhttp://test.com\r\nYou will see the file you created for your second site:</p>\r\n<p style=\"text-align: center;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.\r\nIf you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.\r\nCONCLUSION\r\nIf you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.\r\nThere is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:33:40','2017-12-14 18:03:40','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(108,1,'2017-12-14 23:34:34','2017-12-14 18:04:34','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> PREREQUISITES</span>\r\n<span style=\"color: #000000;\"> You will also need to have Apache installed in order to work through these steps. If you haven’t already done so, you can get Apache installed on your server through apt-get:</span>\r\n<span style=\"color: #000000;\"> sudo apt-get update</span>\r\n<span style=\"color: #000000;\"> sudo apt-get install apache2</span>\r\n<span style=\"color: #000000;\"> After these steps are complete, we can get started.</span>\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span>\r\n<span style=\"color: #000000;\"> STEP ONE — CREATE THE DIRECTORY STRUCTURE</span>\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the /var/www directory. We will create a directory here for both of the virtual hosts we plan on making.</span>\r\n<span style=\"color: #000000;\"> Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span>\r\n<span style=\"color: #000000;\"> sudo mkdir -p /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mkdir -p /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span>\r\n<span style=\"color: #000000;\"> STEP TWO — GRANT PERMISSIONS</span>\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R $USER:$USER /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 755 /var/www</span>\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:34:34','2017-12-14 18:04:34','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(109,1,'2017-12-14 23:37:46','2017-12-14 18:07:46','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></li>\r\n</ul>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span>\r\n<span style=\"color: #000000;\"> STEP ONE — CREATE THE DIRECTORY STRUCTURE</span>\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the /var/www directory. We will create a directory here for both of the virtual hosts we plan on making.</span>\r\n<span style=\"color: #000000;\"> Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span>\r\n<span style=\"color: #000000;\"> sudo mkdir -p /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mkdir -p /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span>\r\n<span style=\"color: #000000;\"> STEP TWO — GRANT PERMISSIONS</span>\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R $USER:$USER /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 755 /var/www</span>\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:37:46','2017-12-14 18:07:46','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(110,1,'2017-12-14 23:38:05','2017-12-14 18:08:05','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span>\r\n<span style=\"color: #000000;\"> STEP ONE — CREATE THE DIRECTORY STRUCTURE</span>\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the /var/www directory. We will create a directory here for both of the virtual hosts we plan on making.</span>\r\n<span style=\"color: #000000;\"> Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span>\r\n<span style=\"color: #000000;\"> sudo mkdir -p /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mkdir -p /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span>\r\n<span style=\"color: #000000;\"> STEP TWO — GRANT PERMISSIONS</span>\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R $USER:$USER /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 755 /var/www</span>\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:38:05','2017-12-14 18:08:05','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(111,1,'2017-12-14 23:38:13','2017-12-14 18:08:13','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span>\r\n<span style=\"color: #000000;\"> STEP ONE — CREATE THE DIRECTORY STRUCTURE</span>\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the /var/www directory. We will create a directory here for both of the virtual hosts we plan on making.</span>\r\n<span style=\"color: #000000;\"> Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span>\r\n<span style=\"color: #000000;\"> sudo mkdir -p /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mkdir -p /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span>\r\n<span style=\"color: #000000;\"> STEP TWO — GRANT PERMISSIONS</span>\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R $USER:$USER /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 755 /var/www</span>\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:38:13','2017-12-14 18:08:13','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(112,1,'2017-12-14 23:40:15','2017-12-14 18:10:15','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the /var/www directory. We will create a directory here for both of the virtual hosts we plan on making.</span>\r\n<span style=\"color: #000000;\"> Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span>\r\n<span style=\"color: #000000;\"> sudo mkdir -p /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo mkdir -p /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span>\r\n<span style=\"color: #000000;\"> STEP TWO — GRANT PERMISSIONS</span>\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R $USER:$USER /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 755 /var/www</span>\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:40:15','2017-12-14 18:10:15','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(113,1,'2017-12-14 23:42:19','2017-12-14 18:12:19','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span>\r\n<span style=\"color: #000000;\"> STEP TWO — GRANT PERMISSIONS</span>\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span>\r\n<span style=\"color: #000000;\"> sudo chown -R $USER:$USER /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span>\r\n<span style=\"color: #000000;\"> The $USER variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span>\r\n<span style=\"color: #000000;\"> sudo chmod -R 755 /var/www</span>\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:42:19','2017-12-14 18:12:19','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(114,1,'2017-12-14 23:45:50','2017-12-14 18:15:50','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span></strong>\r\n<strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></strong></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span>\r\n<span style=\"color: #000000;\"> STEP THREE — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span>\r\n<span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/example.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span>\r\n\r\n</p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\">\r\n\r\n<span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-14 23:45:50','2017-12-14 18:15:50','',106,'https://www.hyperdroid.in/index.php/2017/12/14/106-revision-v1/',0,'revision','',0),(115,1,'2017-12-16 00:28:10','2017-12-15 18:58:10','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span></strong>\r\n<strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The example.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span>\r\n<span style=\"color: #000000;\"> cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span>\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span>\r\n<span style=\"color: #000000;\"> nano /var/www/test.com/public_html/index.html</span></p>\r\n\r\n<h1 style=\"text-align: center;\"><span style=\"color: #000000;\">Success! The test.com virtual host is working!</span></h1>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span>\r\n<span style=\"color: #000000;\"> STEP FOUR — CREATE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.</span>\r\n<span style=\"color: #000000;\"> Create the First Virtual Host File</span>\r\n<span style=\"color: #000000;\"> Start by copying the file for the first domain:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/example.com.conf</span>\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin webmaster@localhost</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span>\r\n<span style=\"color: #000000;\"> ServerAdmin admin@example.com</span>\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span>\r\n<span style=\"color: #000000;\"> ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span>\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 00:28:10','2017-12-15 18:58:10','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(116,1,'2017-12-16 13:30:27','2017-12-16 08:00:27','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span></strong>\r\n<strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></strong></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></strong></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>ServerAdmin admin@example.com</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:30:27','2017-12-16 08:00:27','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(117,1,'2017-12-16 13:30:58','2017-12-16 08:00:58','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span></strong>\r\n<strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></strong></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></strong></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>ServerAdmin admin@example.com</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:30:58','2017-12-16 08:00:58','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(118,1,'2017-12-16 13:31:10','2017-12-16 08:01:10','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span></strong>\r\n<strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></strong></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></strong></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><strong><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></strong></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></strong></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-size: 12pt;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff; font-size: 12pt;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff; font-size: 12pt;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff; font-size: 12pt;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>ServerAdmin admin@example.com</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:31:10','2017-12-16 08:01:10','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(119,1,'2017-12-16 13:32:28','2017-12-16 08:02:28','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\"><strong>ServerAdmin admin@example.com</strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></strong></span>\r\n\r\n<span style=\"color: #ffffff;\"><strong><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></strong></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span>\r\n<span style=\"color: #000000;\"> DocumentRoot /var/www/example.com/public_html</span>\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.example.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/example.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> COPY FIRST VIRTUAL HOST AND CUSTOMIZE FOR SECOND DOMAIN</span>\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span>\r\n<span style=\"color: #000000;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span>\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAdmin admin@test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerName test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ServerAlias www.test.com</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">DocumentRoot /var/www/test.com/public_html</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> STEP FIVE — ENABLE THE NEW VIRTUAL HOST FILES</span>\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span>\r\n<span style=\"color: #000000;\"> sudo a2ensite example.com.conf</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">sudo a2ensite test.com.conf</span>\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span>\r\n<span style=\"color: #000000;\"> sudo service apache2 restart</span>\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span>\r\n<span style=\"color: #000000;\"> * Restarting web server apache2</span>\r\n<span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span>\r\n<span style=\"color: #000000;\"> This is a harmless message that does not affect our site.</span>\r\n<span style=\"color: #000000;\"> STEP SIX — SET UP LOCAL HOSTS FILE (OPTIONAL)</span>\r\n<span style=\"color: #000000;\"> If you haven’t been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.</span>\r\n<span style=\"color: #000000;\"> This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.</span>\r\n<span style=\"color: #000000;\"> Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer’s administrative password or otherwise be a member of the administrative group.</span>\r\n<span style=\"color: #000000;\"> If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:</span>\r\n<span style=\"color: #000000;\"> sudo nano /etc/hosts</span>\r\n<span style=\"color: #000000;\"> The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.</span>\r\n<span style=\"color: #000000;\"> For the domains that I used in this guide, assuming that my VPS IP address is 111.111.111.111, I could add the following lines to the bottom of my hosts file:</span>\r\n<span style=\"color: #000000;\"> 127.0.0.1 localhost</span>\r\n<span style=\"color: #000000;\"> 127.0.1.1 guest-desktop</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 example.com</span>\r\n<span style=\"color: #000000;\"> 111.111.111.111 test.com</span>\r\n<span style=\"color: #000000;\"> This will direct any requests for example.com and test.com on our computer and send them to our server at 111.111.111.111. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.</span>\r\n<span style=\"color: #000000;\"> Save and close the file.</span>\r\n<span style=\"color: #000000;\"> STEP SEVEN — TEST YOUR RESULTS</span>\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<span style=\"color: #000000;\"> http://example.com</span>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<span style=\"color: #000000;\"> http://test.com</span>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span>\r\n<span style=\"color: #000000;\"> CONCLUSION</span>\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:32:28','2017-12-16 08:02:28','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(120,1,'2017-12-16 13:40:41','2017-12-16 08:10:41','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"></h2>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<strong><span style=\"color: #000000;\"> http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:40:41','2017-12-16 08:10:41','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(121,1,'2017-12-16 13:42:12','2017-12-16 08:12:12','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span>\r\n<span style=\"color: #000000;\"> We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"></h2>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<strong><span style=\"color: #000000;\"> http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:42:12','2017-12-16 08:12:12','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(122,1,'2017-12-16 13:42:34','2017-12-16 08:12:34','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for example.com and another for test.com. These will be referenced throughout the guide, but you should substitute your own domains or values while following along.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the public_html sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRootdirective to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"></h2>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<strong><span style=\"color: #000000;\"> http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:42:34','2017-12-16 08:12:34','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(123,1,'2017-12-16 13:45:15','2017-12-16 08:15:15','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for<strong> example.com</strong> and another for<strong> test.com</strong>. These will be referenced throughout the guide, but<strong> you should substitute your own domains or values while following along.</strong></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a <strong>public_html</strong> folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the <strong>public_html</strong> sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on <strong>port 80</strong>, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called <strong>ServerName</strong>, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called<strong> ServerAlias</strong>, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the <strong>DocumentRootdirective</strong> to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<strong><span style=\"color: #000000;\"> http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:45:15','2017-12-16 08:15:15','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(124,1,'2017-12-16 13:48:41','2017-12-16 08:18:41','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for<strong> example.com</strong> and another for<strong> test.com</strong>. These will be referenced throughout the guide, but<strong> you should substitute your own domains or values while following along.</strong></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a <strong>public_html</strong> folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the <strong>public_html</strong> sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on <strong>port 80</strong>, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> After this, we need to add two directives. The first, called <strong>ServerName</strong>, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called<strong> ServerAlias</strong>, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the <strong>DocumentRootdirective</strong> to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\">\r\n <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\">\r\n<strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<strong><span style=\"color: #000000;\"> http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\">\r\n<span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','Hosting Multiple Websites On Ubuntu','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:48:41','2017-12-16 08:18:41','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(125,1,'2017-12-16 13:49:23','2017-12-16 08:19:23','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for<strong> example.com</strong> and another for<strong> test.com</strong>. These will be referenced throughout the guide, but<strong> you should substitute your own domains or values while following along.</strong></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a <strong>public_html</strong> folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the <strong>public_html</strong> sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on <strong>port 80</strong>, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> After this, we need to add two directives. The first, called <strong>ServerName</strong>, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called<strong> ServerAlias</strong>, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the <strong>DocumentRootdirective</strong> to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Likewise, if you can visit your second page:</span>\r\n<strong><span style=\"color: #000000;\"> http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','Hosting Multiple Websites On Ubuntu','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 13:49:23','2017-12-16 08:19:23','',106,'https://www.hyperdroid.in/index.php/2017/12/16/106-revision-v1/',0,'revision','',0),(126,1,'2017-12-16 13:50:29','2017-12-16 08:20:29','<p style=\"text-align: center;\"><span style=\"color: #000000;\">h5ai is a modern file indexer for HTTP web servers with focus on your files. Directories are displayed in a appealing way and browsing them is enhanced by different views, a breadcrumb and a tree overview. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">PREREQUISITES </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server. </span></li>\r\n 	<li><span style=\"color: #000000;\">you’ll need to have a <strong>LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/how-to-host-website-on-ubuntu-16-04/\">this guide to learn how to install Apache on Ubuntu.</a></span></li>\r\n 	<li><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide. </span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — DOWNLOADING &amp; EXTRACTING </span><span style=\"color: #000000;\">h5ai </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Change your directory to <strong>/var/www/html</strong> and user to sudo </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the latest release of h5ai from here . In my case <strong>0.29.0</strong> is the latest one. Right click on the download button and copy the link address. </span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/01.jpg\" width=\"733\" height=\"359\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Download in your terminal by using the command </span><strong><span style=\"color: #000000;\">wget &lt;copied address&gt;</span></strong></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">wget https://release.larsjung.de/h5ai/h5ai-0.29.0.zip </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">unzip the zip file by using</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #ffffff;\">unzip h5ai-0.29.0.zip</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">sudo service apache2 restart </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Now that you have a directory called <strong>_h5ai</strong> ,visit<strong> http://YOUR-DOMAIN.TLD/_h5ai/public/index.php</strong>, to check if h5ai is reachable. This page shows some hints on the server’s capabilities.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/0.JPG\" width=\"761\" height=\"369\" />\r\n\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/03.JPG\" width=\"780\" height=\"375\" />\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — CREATING .htaccess </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">An .htaccess file is a way to configure the details of your website without needed to alter the server config files. The period that starts the file name will keep the file hidden within the folder.</span><span style=\"color: #000000;\">Before creating .htaccess file, we need to make sure that our server can access the file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">For that go to <strong>/etc/apache2/sites-available</strong>. Open the <strong>000-default.conf</strong> file and add the following lines below DocumentRoot </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #ffffff;\">&lt;Directory \"/var/www\"&gt;\r\nAllowOverride All\r\n&lt;/Directory&gt;</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the .htaccess file under<strong> /var/www/htm</strong>l and open it by using following command </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\">nano .htaccess </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">write following code in it </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #ffffff;\">DirectoryIndex index.html index.php /_h5ai/public/index.php</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Save and exit. Now that you have the .htaccess file which specifies the code above, it will direct the browser to open the index page of h5ai unless we have a main index on the directory. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3— VERIFYING EVERYTHING </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">now that we have everything set up , <strong>Visit http://YOUR-DOMAIN.TLD</strong> and check if the page is reachable. It will show all the files present in the <strong>/var/www/html</strong> folder except files starting <strong>name with _ or .</strong> </span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/04.JPG\" width=\"771\" height=\"373\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Lets add a test file to it . </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #ffffff;\">nano hello.txt</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in “<strong>Hello</strong>!” and save and exit. Reload page in browser. you should be able to see the same file</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/05.JPG\" width=\"745\" height=\"359\" /><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/06.JPG\" width=\"745\" height=\"334\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Congrats, you have reached the end of this guide. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hope you enjoyed</span></p>','Installing h5ai on Your Web Server','','inherit','closed','closed','','7-revision-v1','','','2017-12-16 13:50:29','2017-12-16 08:20:29','',7,'https://www.hyperdroid.in/index.php/2017/12/16/7-revision-v1/',0,'revision','',0),(127,1,'2017-12-16 13:53:05','2017-12-16 08:23:05','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get update\r\nsudo apt-get install apache2</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install mysql-server mysql-client</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo mysql -uroot -p</pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo apt-get install php libapache2-mod-php php-mysql</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\">sudo service apache2 restart</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','Installing LAMP (Apache2) on Ubuntu -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-16 13:53:05','2017-12-16 08:23:05','',36,'https://www.hyperdroid.in/index.php/2017/12/16/36-revision-v1/',0,'revision','',0),(128,1,'2017-12-16 15:28:12','2017-12-16 09:58:12','{\n    \"big-pix::background_color\": {\n        \"value\": \"#ffffff\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 09:57:20\"\n    },\n    \"big-pix::BIGPIX_color_settings_3\": {\n        \"value\": \"#ff2121\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 09:58:12\"\n    }\n}','','','trash','closed','closed','','fc8965d3-55eb-4d91-9011-00c97ce9dbb4','','','2017-12-16 15:28:12','2017-12-16 09:58:12','',0,'https://www.hyperdroid.in/?p=128',0,'customize_changeset','',0),(129,1,'2017-12-16 15:57:16','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-16 15:57:16','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=129',0,'post','',0),(130,1,'2017-12-16 16:29:24','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-16 16:29:24','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=130',0,'post','',0),(131,1,'2017-12-16 16:29:35','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-16 16:29:35','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=131',0,'post','',0),(132,1,'2017-12-16 16:31:03','2017-12-16 11:01:03','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\">cd ~ \r\nwget http://wordpress.org/latest.tar.gz</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive. We need to allow the web server itself to write to this directory. We can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-16 16:31:03','2017-12-16 11:01:03','',45,'https://www.hyperdroid.in/45-revision-v1/',0,'revision','',0),(133,1,'2017-12-16 16:33:38','2017-12-16 11:03:38','<p style=\"text-align: center;\"><span style=\"color: #000000;\">h5ai is a modern file indexer for HTTP web servers with focus on your files. Directories are displayed in a appealing way and browsing them is enhanced by different views, a breadcrumb and a tree overview. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">PREREQUISITES </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server. </span></li>\r\n 	<li><span style=\"color: #000000;\">you’ll need to have a <strong>LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/how-to-host-website-on-ubuntu-16-04/\">this guide to learn how to install Apache on Ubuntu.</a></span></li>\r\n 	<li><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide. </span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — DOWNLOADING &amp; EXTRACTING </span><span style=\"color: #000000;\">h5ai </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Change your directory to <strong>/var/www/html</strong> and user to sudo </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the latest release of h5ai from here . In my case <strong>0.29.0</strong> is the latest one. Right click on the download button and copy the link address. </span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/01.jpg\" width=\"733\" height=\"359\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Download in your terminal by using the command </span><strong><span style=\"color: #000000;\">wget &lt;copied address&gt;</span></strong></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">wget https://release.larsjung.de/h5ai/h5ai-0.29.0.zip</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">unzip the zip file by using</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">unzip h5ai-0.29.0.zip</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Now that you have a directory called <strong>_h5ai</strong> ,visit<strong> http://YOUR-DOMAIN.TLD/_h5ai/public/index.php</strong>, to check if h5ai is reachable. This page shows some hints on the server’s capabilities.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/0.JPG\" width=\"761\" height=\"369\" />\r\n\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/03.JPG\" width=\"780\" height=\"375\" />\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — CREATING .htaccess </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">An .htaccess file is a way to configure the details of your website without needed to alter the server config files. The period that starts the file name will keep the file hidden within the folder.</span><span style=\"color: #000000;\">Before creating .htaccess file, we need to make sure that our server can access the file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">For that go to <strong>/etc/apache2/sites-available</strong>. Open the <strong>000-default.conf</strong> file and add the following lines below DocumentRoot </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">&lt;Directory \"/var/www\"&gt;\r\nAllowOverride All\r\n&lt;/Directory&gt;</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the .htaccess file under<strong> /var/www/htm</strong>l and open it by using following command </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano .htaccess</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">write following code in it </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">DirectoryIndex index.html index.php /_h5ai/public/index.php</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Save and exit. Now that you have the .htaccess file which specifies the code above, it will direct the browser to open the index page of h5ai unless we have a main index on the directory. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3— VERIFYING EVERYTHING </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">now that we have everything set up , <strong>Visit http://YOUR-DOMAIN.TLD</strong> and check if the page is reachable. It will show all the files present in the <strong>/var/www/html</strong> folder except files starting <strong>name with _ or .</strong> </span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/04.JPG\" width=\"771\" height=\"373\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Lets add a test file to it . </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">nano hello.txt</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in “<strong>Hello</strong>!” and save and exit. Reload page in browser. you should be able to see the same file</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/05.JPG\" width=\"745\" height=\"359\" /><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/06.JPG\" width=\"745\" height=\"334\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Congrats, you have reached the end of this guide. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hope you enjoyed</span></p>','Installing h5ai on Your Web Server','','inherit','closed','closed','','7-revision-v1','','','2017-12-16 16:33:38','2017-12-16 11:03:38','',7,'https://www.hyperdroid.in/7-revision-v1/',0,'revision','',0),(134,1,'2017-12-16 16:35:07','2017-12-16 11:05:07','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\r\nsudo apt-get install apache2</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install mysql-server mysql-client</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot -p</span></pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install php libapache2-mod-php php-mysql</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</span></pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','Installing LAMP (Apache2) on Ubuntu -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-16 16:35:07','2017-12-16 11:05:07','',36,'https://www.hyperdroid.in/36-revision-v1/',0,'revision','',0),(135,1,'2017-12-16 16:39:10','2017-12-16 11:09:10','{\n    \"big-pix::BIGPIX_author_bio\": {\n        \"value\": false,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 11:07:32\"\n    },\n    \"big-pix::BIGPIX_related_posts\": {\n        \"value\": true,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 11:07:32\"\n    },\n    \"big-pix::BIGPIX_twitter\": {\n        \"value\": \"https://twitter.com/TheDemon1253\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 11:07:44\"\n    },\n    \"big-pix::BIGPIX_google\": {\n        \"value\": \"https://plus.google.com/+KartikBhalla\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 11:08:16\"\n    },\n    \"big-pix::BIGPIX_youtube\": {\n        \"value\": \"https://www.youtube.com/channel/UCS3TDkQidab81sW_pWbDjsg\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 11:09:10\"\n    },\n    \"big-pix::BIGPIX_email\": {\n        \"value\": \"kartikbhalla12@gmail.com\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2017-12-16 11:09:10\"\n    }\n}','','','trash','closed','closed','','cb8f9e66-fe8a-46eb-bb13-e05398b6ea2d','','','2017-12-16 16:39:10','2017-12-16 11:09:10','',0,'https://www.hyperdroid.in/?p=135',0,'customize_changeset','',0),(136,1,'2017-12-16 19:38:05','2017-12-16 14:08:05','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10 and older. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\r\nsudo apt-get install apache2</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install mysql-server mysql-client</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot -p</span></pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install php libapache2-mod-php php-mysql</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</span></pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','Installing LAMP (Apache2) on Ubuntu -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-16 19:38:05','2017-12-16 14:08:05','',36,'https://www.hyperdroid.in/36-revision-v1/',0,'revision','',0),(137,1,'2017-12-16 20:03:04','2017-12-16 14:33:04','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10 and older. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\r\nsudo apt-get install apache2</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install mysql-server mysql-client</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot -p</span></pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install php libapache2-mod-php php-mysql</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</span></pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','Installing LAMP (Apache2) on Ubuntu -17.10','','inherit','closed','closed','','36-revision-v1','','','2017-12-16 20:03:04','2017-12-16 14:33:04','',36,'https://www.hyperdroid.in/36-revision-v1/',0,'revision','',0),(138,1,'2017-12-16 20:05:28','2017-12-16 14:35:28','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this time, WordPress is the most popular CMS (content management system) on the internet. It allows you to easily set up flexible blogs and websites on top of a MySQL backend with PHP processing. WordPress has seen incredible adoption and is a great choice for getting a website up and running quickly.</span>\r\n<span style=\"color: #000000;\"> In this guide, we’ll focus on getting a WordPress instance set up with an Apache web server on Ubuntu</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span>\r\n<span style=\"color: #000000;\"> We will be proceeding through these steps as a non-root user with sudo privileges, so you will need to have one available.</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Additionally, you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATE A MYSQL DATABASE AND USER FOR WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we will take is a preparatory one. WordPress uses a relational database to manage and store site and user information.</span>\r\n<span style=\"color: #000000;\"> We have MySQL installed, which can provide this functionality, but we need to make a database and a user for WordPress to work with.</span>\r\n<span style=\"color: #000000;\"> To get started, log into the MySQL root (administrative) account by issuing this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo mysql -u root -p</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will be prompted for the password you set for the MySQL root account when you installed the software. You will then be given a MySQL command prompt.</span>\r\n<span style=\"color: #000000;\"> First, we can create a separate database that WordPress can control. You can call this whatever you would like, but I will be calling it wordpress because it is descriptive and simple. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Enter this command to create the database:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CREATE DATABASE wordpress;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Every MySQL statement must <strong>end in a semi-colon (;)</strong>, so check to make sure this is present if you are running into any issues.</span>\r\n<span style=\"color: #000000;\"> Next, we are going to create a separate MySQL user account that we will use exclusively to operate on our new database. Creating one-function databases and accounts is a good idea from a management and security standpoint.</span>\r\n<span style=\"color: #000000;\"> I am going to call the new account that I’m making <strong>wordpressuser</strong> and will assign it a password of <strong>password</strong>. You should definitely change the password for your installation and can name the user whatever you’d like. This is the command you need to create the user:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> CREATE USER wordpressuser@localhost IDENTIFIED BY \'password\';</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> At this point, you have a database and a user account, each made specifically for WordPress. However, these two components have no relationship yet. The user has no access to the database.</span>\r\n<span style=\"color: #000000;\"> Let’s fix that by granting our user account access to our database with this command:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now the user has access to the database. We need to flush the privileges so that the current instance of MySQL knows about the recent privilege changes we’ve made:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">FLUSH PRIVILEGES;</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We’re all set now. We can exit out of the MySQL prompt by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">exit</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You should now be back to your regular command prompt.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — DOWNLOAD WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, we will download the actual WordPress files from the project’s website.</span>\r\n<span style=\"color: #000000;\"> Luckily, the WordPress team always links the most recent stable version of their software to the same URL that is <strong>http://wordpress.org/latest.tar.gz</strong> , so we can get the most up-to-date version of WordPress by typing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\">cd ~ \r\nwget http://wordpress.org/latest.tar.gz</pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will download a compressed file that contains the archived directory contents of the WordPress files to our home directory.</span>\r\n<span style=\"color: #000000;\"> We can extract the files to rebuild the WordPress directory we need by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">tar xzvf latest.tar.gz</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will create a directory called wordpress in your home directory.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo apt-get update</span></pre>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CONFIGURE WORDPRESS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Most of the configuration that we will be doing will be through a web interface later on. However, we do need to do some work from the command line before we can get this up and running.</span>\r\n<span style=\"color: #000000;\"> Begin by moving into the WordPress directory that you just unpacked:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd ~/wordpress</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> A sample configuration file that mostly matches the configuration we need is included by default. However, we need to copy it to the default configuration file location to get WordPress to recognize the file. Do that now by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp wp-config-sample.php wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Next, let’s open the configuration file in a text editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano wp-config.php</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only modifications we need to make are to the parameters that hold our database information.</span>\r\n<span style=\"color: #000000;\"> We will need to find the settings for DB_NAME, DB_USER, and DB_PASSWORD in order for WordPress to correctly connect and authenticate to the database we created.</span>\r\n<span style=\"color: #000000;\"> Fill in the values of these parameters with the information for the database you created. It should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">// ** MySQL settings - You can get this info from your web host ** //</span>\r\n<span style=\"color: #ffffff;\">  /** The name of the database for WordPress */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_NAME\', \'wordpress\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database username */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_USER\', \'wordpressuser\');</span>\r\n\r\n<span style=\"color: #ffffff;\">/** MySQL database password */</span>\r\n<span style=\"color: #ffffff;\">  define(\'DB_PASSWORD\', \'password\');</span>\r\n</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> These are the only values that you need to change.</span>\r\n<span style=\"color: #000000;\"> When you are finished, save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — COPY FILES TO THE DOCUMENT ROOT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our application configured, we need to copy it into Apache’s document root, where it can be served to visitors of our website.</span>\r\n<span style=\"color: #000000;\"> One of the easiest and most reliable way of transferring files from directory to directory is with the rsync command. This preserves permissions and has good data integrity features.</span>\r\n<span style=\"color: #000000;\"> The location of the document root in the Ubuntu is<strong> /var/www/html</strong>/. We can transfer our WordPress files there by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo rsync -avP ~/wordpress/ /var/www/html/</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will safely copy all of the contents from the directory you unpacked to the document root.</span>\r\n<span style=\"color: #000000;\"> We should now move into the document root to make some final permissions changes</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cd /var/www/html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will need to change the ownership of our files for increased security.</span>\r\n<span style=\"color: #000000;\"> We want to give user ownership to the regular, non-root user (with sudo privileges) that you plan on using to interact with your site. This can be your regular user if you wish, but some may suggest that you create an additional user for this process. It is up to you which you choose.</span>\r\n<span style=\"color: #000000;\"> For this guide, we will use the account name as <strong>demo(demo@pc-name).</strong> This is the account we are performing all of the actions of this guide as.</span>\r\n<span style=\"color: #000000;\"> The group ownership we will give to our web server process, which is <strong>www-data</strong>. This will allow Apache to interact with the content as necessary.</span>\r\n<span style=\"color: #000000;\"> We can quickly assign these ownership values by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R demo:www-data *</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will set up the ownership properties that we are looking for.</span>\r\n<span style=\"color: #000000;\"> While we are dealing with ownership and permissions, we should also look into assigning correct ownership on our uploads directory. This will allow us to upload images and other content to our site. Currently, the permissions are too restrictive.</span>\r\n<span style=\"color: #000000;\"> First, let’s manually create the uploads directory beneath the wp-content directory at our document root. This will be the parent directory of our content:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">m<span style=\"color: #ffffff;\">kdir /var/www/html/wp-content/uploads\r\n</span><span style=\"color: #ffffff;\">mkdir /var/www/html/wp-content/themes</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have a directory now to house uploaded files, however the permissions are still too restrictive.So we need to allow the web server itself to write to this directory and we can do this by assigning group ownership of this directory to our web server, like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chmod -R 777 /var/www</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> This will allow the web server to create files and directories under this directory, which will permit us to upload content to the server.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 5 — COMPLETE INSTALLATION THROUGH THE WEB INTERFACE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your files in place and your software is configured, you can complete the installation through the web interface.</span>\r\n<span style=\"color: #000000;\"> In your web browser, navigate to your server’s domain name or public IP address:</span>\r\n<strong><span style=\"color: #000000;\"> http://server_domain_name_or_IP</span></strong>\r\n<span style=\"color: #000000;\"> You will see the WordPress initial configuration page, where you will create an initial administrator account:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/TheDemon12/hyperdroid-media/master/wordpress/0.png\" width=\"690\" height=\"880\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Fill out the information for the site and the administrative account you wish to make. When you are finished, click on the install button at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> WordPress will confirm the installation, and then ask you to log in with the account you just created:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/01.png\" width=\"690\" height=\"432\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hit the button at the bottom and then fill out your account information:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/02.png\" width=\"342\" height=\"390\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be presented with the WordPress interface:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/03.png\" width=\"690\" height=\"377\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>CHANGING THE PERMALINK SETTINGS IN WORDPRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished doing the server-side changes, you can easily adjust the permalink settings through the WordPress administration interface.</span>\r\n<span style=\"color: #000000;\"> On the left-hand side, under the Settings menu, you can select Permalinks:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/04.png\" width=\"326\" height=\"221\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You can choose any of the preconfigured settings to organize URLs, or you can create your own.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you have made your selection, click “Save Changes” to generate the rewrite rules. You should see a message like this:</span></p>\r\n<p style=\"text-align: center;\"><img class=\"alignnone size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/05.png\" width=\"690\" height=\"337\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>UPDATING WORDPRESS DIRECTLY WITHOUT USING FTP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">WordPress will only prompt you for your FTP connection information while trying to install plugins or a WordPress update if it cannot write to /wp-content directly. Otherwise, if your web server has write access to the necessary files, it will take care of the updates and installation automatically. This method does not require you to have FTP/SFTP or SSH access, but it does require your to have specific file permissions set up on your webserver.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/wordpress/06.png\" width=\"700\" height=\"371\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If for some reason you do not want to rely on the automatic check for which filesystem method to use, you can define a constant, <strong>‘FS_METHOD’</strong> in your wp-config.php file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open <strong>wp-config.php</strong> in <strong>/var/www/html/</strong> and add</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">define(\'FS_METHOD\',\'direct\');</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It will allow you to use the ‘direct’ method of installing wordpress plugins, wordpress themes, or wordpress updates.</span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></h4>','Installing Wordpress On Ubuntu','','inherit','closed','closed','','45-revision-v1','','','2017-12-16 20:05:28','2017-12-16 14:35:28','',45,'https://www.hyperdroid.in/45-revision-v1/',0,'revision','',0),(139,1,'2017-12-16 20:06:36','2017-12-16 14:36:36','<p style=\"text-align: center;\"><span style=\"color: #000000;\">h5ai is a modern file indexer for HTTP web servers with focus on your files. Directories are displayed in an appealing way and browsing them is enhanced by different views, a breadcrumb and a tree overview. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">PREREQUISITES </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server. </span></li>\r\n 	<li><span style=\"color: #000000;\">you’ll need to have a <strong>LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/how-to-host-website-on-ubuntu-16-04/\">this guide to learn how to install Apache on Ubuntu.</a></span></li>\r\n 	<li><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide. </span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — DOWNLOADING &amp; EXTRACTING </span><span style=\"color: #000000;\">h5ai </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Change your directory to <strong>/var/www/html</strong> and user to sudo </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the latest release of h5ai from here . In my case <strong>0.29.0</strong> is the latest one. Right click on the download button and copy the link address. </span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/01.jpg\" width=\"733\" height=\"359\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Download in your terminal by using the command </span><strong><span style=\"color: #000000;\">wget &lt;copied address&gt;</span></strong></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">wget https://release.larsjung.de/h5ai/h5ai-0.29.0.zip</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">unzip the zip file by using</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">unzip h5ai-0.29.0.zip</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Now that you have a directory called <strong>_h5ai</strong> ,visit<strong> http://YOUR-DOMAIN.TLD/_h5ai/public/index.php</strong>, to check if h5ai is reachable. This page shows some hints on the server’s capabilities.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/0.JPG\" width=\"761\" height=\"369\" />\r\n\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/03.JPG\" width=\"780\" height=\"375\" />\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — CREATING .htaccess </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">An .htaccess file is a way to configure the details of your website without needed to alter the server config files. The period that starts the file name will keep the file hidden within the folder.</span><span style=\"color: #000000;\">Before creating .htaccess file, we need to make sure that our server can access the file.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">For that go to <strong>/etc/apache2/sites-available</strong>. Open the <strong>000-default.conf</strong> file and add the following lines below DocumentRoot </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">&lt;Directory \"/var/www\"&gt;\r\nAllowOverride All\r\n&lt;/Directory&gt;</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the .htaccess file under<strong> /var/www/htm</strong>l and open it by using following command </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano .htaccess</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">write following code in it </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">DirectoryIndex index.html index.php /_h5ai/public/index.php</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Save and exit. Now that you have the .htaccess file which specifies the code above, it will direct the browser to open the index page of h5ai unless we have a main index on the directory. </span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3— VERIFYING EVERYTHING </span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">now that we have everything set up , <strong>Visit http://YOUR-DOMAIN.TLD</strong> and check if the page is reachable. It will show all the files present in the <strong>/var/www/html</strong> folder except files starting <strong>name with _ or .</strong> </span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/04.JPG\" width=\"771\" height=\"373\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Lets add a test file to it . </span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #000000; font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">nano hello.txt</span> </span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in “<strong>Hello</strong>!” and save and exit. Reload page in browser. you should be able to see the same file</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/05.JPG\" width=\"745\" height=\"359\" /><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/h5ai/06.JPG\" width=\"745\" height=\"334\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Congrats, you have reached the end of this guide. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Hope you enjoyed</span></p>','Installing h5ai on Your Web Server','','inherit','closed','closed','','7-revision-v1','','','2017-12-16 20:06:36','2017-12-16 14:36:36','',7,'https://www.hyperdroid.in/7-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (140,1,'2017-12-16 22:35:21','2017-12-16 17:05:21','<blockquote>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\n</blockquote>\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\n\n<ul style=\"text-align: center;\">\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\n</ul>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\n\n<ul>\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for<strong> example.com</strong> and another for<strong> test.com</strong>. These will be referenced throughout the guide, but<strong> you should substitute your own domains or values while following along.</strong></span></li>\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\n</ul>\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a <strong>public_html</strong> folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the <strong>public_html</strong> sub directories where we will be storing our content.</span>\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\n\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\n\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\n\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on <strong>port 80</strong>, the default HTTP port.</span>\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> After this, we need to add two directives. The first, called <strong>ServerName</strong>, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called<strong> ServerAlias</strong>, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\n\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the <strong>DocumentRootdirective</strong> to reflect the directory we created:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\n\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\n\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\n\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you visit your second page at </span><strong><span style=\"color: #000000;\">http://test.com</span></strong>\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\n\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','Hosting Multiple Websites On Ubuntu','','inherit','closed','closed','','106-autosave-v1','','','2017-12-16 22:35:21','2017-12-16 17:05:21','',106,'https://www.hyperdroid.in/106-autosave-v1/',0,'revision','',0),(141,1,'2017-12-16 22:37:42','2017-12-16 17:07:42','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.</span>\r\n<span style=\"color: #000000;\">These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism.In this guide, we will walk you through how to set up Apache virtual hosts on an Ubuntu 17.10.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Before you begin this guide, there are some important steps that you need to complete on your server.</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">you’ll need to have a<strong> LAMP</strong> (Linux, Apache, MySQL, and PHP) stack installed on your instance. If you don’t have these components already installed and configured, you can use <a href=\"http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/\">this guide to learn how to install LAMP on Ubuntu.</a></span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">When you are finished with these steps, you can continue with this guide</span></p>\r\n\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\"> For the purposes of this guide, my configuration will make a virtual host for<strong> example.com</strong> and another for<strong> test.com</strong>. These will be referenced throughout the guide, but<strong> you should substitute your own domains or values while following along.</strong></span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">We will show how to edit your local hosts file later on to test the configuration if you are using dummy values. This will allow you to test your configuration from your home computer, even though your content won’t be available through the domain name to other visitors.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 1 — CREATING THE DIRECTORY STRUCTURE</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.</span>\r\n<span style=\"color: #000000;\"> Our document root (the top-level directory that Apache looks at to find content to serve) will be set to individual directories under the <strong>/var/www</strong> directory. We will create a directory here for both of the virtual hosts we plan on making.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Within each of these directories, we will create a <strong>public_html</strong> folder that will hold our actual files. This gives us some flexibility in our hosting.</span>\r\n<span style=\"color: #000000;\"> For instance, for our sites, we’re going to make our directories like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\"><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/example.com/public_html\r\n</span><span style=\"color: #ffffff;\">sudo mkdir -p /var/www/test.com/public_html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The portions in red represent the domain names that we are wanting to serve from our VPS.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 2 — GRANT PERMISSIONS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/example.com/public_html</span>\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo chown -R $USER:$USER /var/www/test.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The<strong> $USER</strong> variable will take the value of the user you are currently logged in as when you press “ENTER”. By doing this, our regular user now owns the <strong>public_html</strong> sub directories where we will be storing our content.</span>\r\n<span style=\"color: #000000;\"> We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo chmod -R 755 /var/www</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 3 — CREATE DEMO PAGES FOR EACH VIRTUAL HOST</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We have our directory structure in place. Let’s create some content to serve.</span>\r\n<span style=\"color: #000000;\"> We’re just going for a demonstration, so our pages will be very simple. We’re just going to make an index.html page for each site.</span>\r\n<span style=\"color: #000000;\"> Let’s start with example.com. We can open up an index.html file in our editor by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">nano /var/www/example.com/public_html/index.html</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In this file, create a simple HTML document that indicates the site it is connected to. My file looks like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">Success! The example.com virtual host is working!</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span>\r\n<span style=\"color: #000000;\"> We can copy this file to use as the basis for our second site by typing:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> We can then open the file and modify the relevant pieces of information:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">nano /var/www/test.com/public_html/index.html</span></pre>\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">Success! The test.com virtual host is working!</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close this file as well. You now have the pages necessary to test the virtual host configuration.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 4.1 — CREATE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.</span>\r\n<span style=\"color: #000000;\"> Apache comes with a default virtual host file called <strong>000-default.conf</strong> that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.</span>\r\n<span style=\"color: #000000;\"> We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in<strong> .conf</strong>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Create the First Virtual Host File. </span><span style=\"color: #000000;\">Start by copying the file for the first domain:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file in your editor with root privileges:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo nano /etc/apache2/sites-available/example.com.conf</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The file will look something like this (I’ve removed the comments here to make the file more approachable):</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAdmin webmaster@localhost</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/html</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> As you can see, there’s not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on <strong>port 80</strong>, the default HTTP port.</span>\r\n<span style=\"color: #000000;\"> First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace; color: #ffffff;\">ServerAdmin admin@example.com</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> After this, we need to add two directives. The first, called <strong>ServerName</strong>, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called<strong> ServerAlias</strong>, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerName example.com</span></span>\r\n\r\n<span style=\"color: #ffffff;\"><span style=\"font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span></span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the <strong>DocumentRootdirective</strong> to reflect the directory we created:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> In total, our virtualhost file should look like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.example.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/example.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 4.2 — </span></strong><strong><span style=\"color: #000000;\">CUSTOMIZING FOR SECOND DOMAIN</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have our first virtual host file established, we can create our second one by copying that file and adjusting it as needed.</span>\r\n<span style=\"color: #000000;\"> Start by copying it:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Open the new file with root privileges in your editor:</span></p>\r\n\r\n<pre style=\"text-align: center;\"> <span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\"> sudo nano /etc/apache2/sites-available/test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You now need to modify all of the pieces of information to reference your second domain. When you are finished, it may look something like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAdmin admin@test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerName test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ServerAlias www.test.com</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">DocumentRoot /var/www/test.com/public_html</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">ErrorLog ${APACHE_LOG_DIR}/error.log</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">CustomLog ${APACHE_LOG_DIR}/access.log combined</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Save and close the file when you are finished.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\"> STEP 5 — ENABLE THE NEW VIRTUAL HOST FILES</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.</span>\r\n<span style=\"color: #000000;\"> We can use the a2ensite tool to enable each of our sites like this:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">  sudo a2ensite example.com.conf</span>\r\n\r\n<span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo a2ensite test.com.conf</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> When you are finished, you need to restart Apache to make these changes take effect:</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"color: #ffffff; font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> You will most likely receive a message saying something similar to:</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">* Restarting web server apache2</span></strong>\r\n<strong> <span style=\"color: #000000;\"> AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This is a harmless message that does not affect our site.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">STEP 6 — TEST YOUR RESULTS</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> Now that you have your virtual hosts configured, you can test your setup easily by going to the domains that you configured in your web browser:</span>\r\n<strong><span style=\"color: #000000;\"> http://example.com</span></strong>\r\n<span style=\"color: #000000;\"> You should see a page that looks like this:</span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/0.png\" width=\"690\" height=\"47\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you visit your second page at </span><strong><span style=\"color: #000000;\">http://test.com</span></strong>\r\n<span style=\"color: #000000;\"> You will see the file you created for your second site:</span></p>\r\n<img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/multiple_hosting/01.png\" width=\"637\" height=\"45\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If both of these sites work well, you’ve successfully configured two virtual hosts on the same server.</span>\r\n<span style=\"color: #000000;\"> If you adjusted your home computer’s hosts file, you may want to delete the lines you added now that you verified that your configuration works. This will prevent your hosts file from being filled with entries that are not actually necessary.</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">CONCLUSION</span></strong></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"> If you followed along, you should now have a single server handling two separate domain names. You can expand this process by following the steps we outlined above to make additional virtual hosts.</span>\r\n<span style=\"color: #000000;\"> There is no software limit on the number of domain names Apache can handle, so feel free to make as many as your server is capable of handling.</span></p>','Hosting Multiple Websites On Ubuntu','','inherit','closed','closed','','106-revision-v1','','','2017-12-16 22:37:42','2017-12-16 17:07:42','',106,'https://www.hyperdroid.in/106-revision-v1/',0,'revision','',0),(142,1,'2017-12-17 11:50:37','2017-12-17 06:20:37','<blockquote><span style=\"color: #000000;\">This brief tutorial is going to show you steps to install <strong>LAMP</strong> on Ubuntu server 17.04 / 17.10 and older. LAMP is an acronym for <strong><span style=\"color: #ff0000;\">L</span>inux,<span style=\"color: #ff0000;\"> A</span>pache2, <span style=\"color: #ff0000;\">M</span>ySQL and <span style=\"color: #ff0000;\">P</span>HP</strong>. It’s a combination of open software that are typically used to <strong>host and run dynamic websites</strong> and web applications.</span></blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>PREREQUISITES</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To setup web server on your own Linux computer, we’ll require the following three components to be installed –</span></p>\r\n\r\n<ul style=\"text-align: center;\">\r\n 	<li><span style=\"color: #000000;\"><strong>APACHE2</strong> : apache2 is open-source HTTP server. It is still most popular web-server used worldwide today.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>PHP AND PHP SQLITE COMPONENT</strong>: PHP is server side scripting language. PHP and its component will help you to interact with backend mySQL database for your website.</span></li>\r\n 	<li><span style=\"color: #000000;\"><strong>MYSQL</strong>: mySQL is database solution in which you shall be storing your data in table.</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — INSTALL APACHE2</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Apache is open source web-server software that powers much of the web today. It is maintained by apache-http-project.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Explore more here: <a style=\"color: #000000;\" href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your terminal and type in commands –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\r\nsudo apt-get install apache2</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To check if apache2 is installed properly –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open your web-browser and open link using ip–address of your server. If you are practicing locally, you can type in <strong>localhost or 127.0.0.1.</strong></span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/0.jpg\" width=\"753\" height=\"423\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">By default, apache runs on port 80 and hence you need not provide the port number in your browser.</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Or ip-address of your server. For example 198.162.12.52</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">It should show message like it works!</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To change port address, you need to edit the configuration file at <strong>/etc/apache2/ports.conf</strong>  and change the <strong>Listen 80</strong> to your desired port number. After edit you need to restart the apache2 server.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/01.jpg\" width=\"766\" height=\"430\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALL mySQL</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">mySQL is the database management solution that helps you to store and retrieve data in tables. Since in this tutorial we shall be using php, we will also need to install<strong> php7.0-mysql</strong> component.</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install mysql-server mysql-client</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if mySQL is installed properly, open mysql on terminal with command –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you set the password during installation open with <strong>-p</strong> parameter –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo mysql -uroot -p</span></pre>\r\n<h2><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/02.jpg\" width=\"768\" height=\"432\" /></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — INSTALL PHP</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">PHP is open source web server scripting language. It is back-end scripting language that will help you to interact with the mySQL database. For example, if you want to show the tabular employee list stored in your mySQL database in your website, with the help of PHP you can interact with mySQL, retrieve the employee list and render in html page. Php-mysql library helps you in this regard. PHP provides multiple auxiliary libraries for different needs. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">To install PHP and php-mysql</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get install php libapache2-mod-php php-mysql</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Check if php is installed correctly, make file <strong>/var/www/html/info.php</strong> and add the following content to this file –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">&lt;?php\r\n\r\nphpinfo();\r\n\r\n?&gt;</span></pre>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/03.jpg\" width=\"781\" height=\"439\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Restart apache2 web server –</span></p>\r\n\r\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo service apache2 restart</span></pre>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open web browser and navigate to</span></p>\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">127.0.0.1/info.php</span></strong></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">If you are using remote server replace ip with server’s ip address.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Upon success, you should see following webpage –</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><strong> <img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/hosting/04.jpg\" width=\"769\" height=\"432\" /></strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Well that’s it, you are ready with the basic setup required for this tutorial</span></p>','How To Install LAMP (Apache2) on Ubuntu','','inherit','closed','closed','','36-revision-v1','','','2017-12-17 11:50:37','2017-12-17 06:20:37','',36,'https://www.hyperdroid.in/36-revision-v1/',0,'revision','',0),(143,1,'2017-12-17 14:04:50','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-17 14:04:50','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=143',0,'post','',0),(144,1,'2017-12-17 16:31:03','2017-12-17 11:01:03','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the<strong> ISO of ubuntu 17.10</strong> from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download the <strong>17.10</strong> one by clicking the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>time zone</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>keyboard layout</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','publish','open','open','','ubuntu-17-10-desktop-installation','','','2017-12-17 17:56:14','2017-12-17 12:26:14','',0,'https://www.hyperdroid.in/?p=144',0,'post','',3),(145,1,'2017-12-17 14:12:08','2017-12-17 08:42:08','<ul>\r\n 	<li><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:12:08','2017-12-17 08:42:08','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(146,1,'2017-12-17 14:12:24','2017-12-17 08:42:24','<ul>\r\n 	<li>\r\n<blockquote><span style=\"color: #000000;\">2 GHz dual core processor or better</span></blockquote>\r\n</li>\r\n 	<li>\r\n<blockquote><span style=\"color: #000000;\">2 GB system memory</span></blockquote>\r\n</li>\r\n 	<li>\r\n<blockquote><span style=\"color: #000000;\">25 GB of free hard drive space</span></blockquote>\r\n</li>\r\n 	<li>\r\n<blockquote><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></blockquote>\r\n</li>\r\n 	<li>\r\n<blockquote><span style=\"color: #000000;\">Internet access is helpful</span></blockquote>\r\n</li>\r\n</ul>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:12:24','2017-12-17 08:42:24','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(147,1,'2017-12-17 14:12:38','2017-12-17 08:42:38','<blockquote>\r\n<ul>\r\n 	<li><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n</blockquote>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:12:38','2017-12-17 08:42:38','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(148,1,'2017-12-17 14:13:18','2017-12-17 08:43:18','<blockquote>\r\n<ul>\r\n 	<li>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">REQUIREMENTS </span></h2>\r\n</li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n</blockquote>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:13:18','2017-12-17 08:43:18','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(149,1,'2017-12-17 14:13:47','2017-12-17 08:43:47','<blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">REQUIREMENTS </span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n</blockquote>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:13:47','2017-12-17 08:43:47','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(150,1,'2017-12-17 14:14:00','2017-12-17 08:44:00','<blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">REQUIREMENTS </span></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n</blockquote>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:14:00','2017-12-17 08:44:00','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(151,1,'2017-12-17 14:14:15','2017-12-17 08:44:15','<blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n</blockquote>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:14:15','2017-12-17 08:44:15','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(152,1,'2017-12-17 14:20:14','2017-12-17 08:50:14','<blockquote><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></blockquote>\r\n&nbsp;\r\n<blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n</blockquote>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:20:14','2017-12-17 08:50:14','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(153,1,'2017-12-17 14:20:23','2017-12-17 08:50:23','<blockquote><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></blockquote>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n</ul>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:20:23','2017-12-17 08:50:23','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(154,1,'2017-12-17 14:20:31','2017-12-17 08:50:31','<blockquote><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></blockquote>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></span></h2>\r\n<ul>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:20:31','2017-12-17 08:50:31','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(155,1,'2017-12-17 14:21:08','2017-12-17 08:51:08','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<p style=\"text-align: center;\"></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:21:08','2017-12-17 08:51:08','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(156,1,'2017-12-17 14:26:25','2017-12-17 08:56:25','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the iso of ubuntu 17.10 from the official website. Type in https://www.ubuntu.com/ and go to Downloads page and select desctop. You will see the two options the 16.04.x(LTS release, LTS Stands for Long Term Support ) and the 17.10 link, go ahead and download from the download button</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:26:25','2017-12-17 08:56:25','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(157,1,'2017-12-17 14:33:29','2017-12-17 09:03:29','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Either a DVD drive or a USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> and go to Downloads page and select desktop. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the 16.04.x(LTS release, LTS Stands for Long Term Support ) and the 17.10 link, go ahead and download from the download button</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:33:29','2017-12-17 09:03:29','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(158,1,'2017-12-17 14:38:01','2017-12-17 09:08:01','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> and go to Downloads page and select desktop. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the 16.04.x(LTS release, LTS Stands for Long Term Support ) and the 17.10 link, go ahead and download from the download button</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:38:01','2017-12-17 09:08:01','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(159,1,'2017-12-17 14:38:54','2017-12-17 09:08:54','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> and go to Downloads page and select desktop. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the download button</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:38:54','2017-12-17 09:08:54','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(160,1,'2017-12-17 14:43:04','2017-12-17 09:13:04','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"788\" height=\"443\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the download button</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:43:04','2017-12-17 09:13:04','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(161,1,'2017-12-17 14:43:41','2017-12-17 09:13:41','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><img class=\"size-medium aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"1366\" height=\"768\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the download button</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:43:41','2017-12-17 09:13:41','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(162,1,'2017-12-17 14:45:08','2017-12-17 09:15:08','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"740\" height=\"416\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the download button</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"786\" height=\"442\" />','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:45:08','2017-12-17 09:15:08','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(163,1,'2017-12-17 14:45:41','2017-12-17 09:15:41','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the download button</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"786\" height=\"442\" />','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:45:41','2017-12-17 09:15:41','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(164,1,'2017-12-17 14:46:03','2017-12-17 09:16:03','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the download button</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" />','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:46:03','2017-12-17 09:16:03','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(165,1,'2017-12-17 14:46:51','2017-12-17 09:16:51','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1 — DOWNLOADING AND BURNING THE ISO</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n&nbsp;\r\n\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" />','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:46:51','2017-12-17 09:16:51','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(166,1,'2017-12-17 14:53:28','2017-12-17 09:23:28','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is 2.18)</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 14:53:28','2017-12-17 09:23:28','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(167,1,'2017-12-17 15:26:45','2017-12-17 09:56:45','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is 2.18).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the usb device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FREE DOS is written. Select the iso file you downloaded , and click start at the bottom</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:26:45','2017-12-17 09:56:45','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(168,1,'2017-12-17 15:28:23','2017-12-17 09:58:23','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<p style=\"text-align: center;\">This finishes the part one of the guide</p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:28:23','2017-12-17 09:58:23','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(169,1,'2017-12-17 15:31:35','2017-12-17 10:01:35','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of the guide</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:31:35','2017-12-17 10:01:35','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(170,1,'2017-12-17 15:33:53','2017-12-17 10:03:53','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of the guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:33:53','2017-12-17 10:03:53','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(171,1,'2017-12-17 15:42:16','2017-12-17 10:12:16','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"720\" height=\"400\" /></span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:42:16','2017-12-17 10:12:16','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(172,1,'2017-12-17 15:44:39','2017-12-17 10:14:39','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option</span></p>\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" />','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:44:39','2017-12-17 10:14:39','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(173,1,'2017-12-17 15:55:30','2017-12-17 10:25:30','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><strong><span style=\"color: #000000;\">MINIMUM REQUIREMENTS </span></strong></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></span></span></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n&nbsp;\r\n\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" />\r\n\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>S<span style=\"color: #000000;\">TEP 3 — </span></strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n\r\n<img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" />\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,In my case I will be checking the first one only</span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<h4></h4>\r\n&nbsp;','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 15:55:30','2017-12-17 10:25:30','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(174,1,'2017-12-17 16:09:27','2017-12-17 10:39:27','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click continue</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click continue</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click continue</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"1200\" height=\"604\" /></span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:09:27','2017-12-17 10:39:27','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(175,1,'2017-12-17 16:09:51','2017-12-17 10:39:51','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click continue</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click continue</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click continue</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"790\" height=\"398\" /></span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:09:51','2017-12-17 10:39:51','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(176,1,'2017-12-17 16:21:50','2017-12-17 10:51:50','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 should have started and should be in progress.</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" />\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, installer will prompt you to restart your system.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Reboot it and you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:21:50','2017-12-17 10:51:50','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(177,1,'2017-12-17 16:22:55','2017-12-17 10:52:55','','featured','','inherit','open','closed','','featured-4','','','2017-12-17 16:22:55','2017-12-17 10:52:55','',144,'https://www.hyperdroid.in/wp-content/uploads/2017/12/featured-1.jpg',0,'attachment','image/jpeg',0),(178,1,'2017-12-17 16:25:39','2017-12-17 10:55:39','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 should have started and should be in progress.</span></p>\r\n<img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" />\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, installer will prompt you to restart your system.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></p>\r\nThat\'s it for this guide of installing ubuntu. Hope you had fun installing it with us','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:25:39','2017-12-17 10:55:39','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(179,1,'2017-12-17 16:26:40','2017-12-17 10:56:40','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 should have started and should be in progress.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, installer will prompt you to restart your system.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:26:40','2017-12-17 10:56:40','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(180,1,'2017-12-17 16:27:49','2017-12-17 10:57:49','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 should have started and should be in progress.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, installer will prompt you to restart your system.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:27:49','2017-12-17 10:57:49','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(181,1,'2017-12-17 16:28:16','2017-12-17 10:58:16','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 should have started and should be in progress.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, installer will prompt you to restart your system.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:28:16','2017-12-17 10:58:16','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(182,1,'2017-12-17 16:28:39','2017-12-17 10:58:39','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and select the USB device you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the CD icon in front where FreeDOS is written. Select the ISO file you downloaded , and click start at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the part one of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared bootable media.You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 should have started and should be in progress.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, installer will prompt you to restart your system.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:28:39','2017-12-17 10:58:39','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(183,1,'2017-12-17 16:31:03','2017-12-17 11:01:03','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n<p style=\"text-align: center;\"></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n<p style=\"text-align: center;\"></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:31:03','2017-12-17 11:01:03','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(184,1,'2017-12-17 16:31:59','2017-12-17 11:01:59','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:31:59','2017-12-17 11:01:59','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(185,1,'2017-12-17 16:32:28','2017-12-17 11:02:28','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your time zone and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your keyboard layout and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:32:28','2017-12-17 11:02:28','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(186,1,'2017-12-17 16:33:13','2017-12-17 11:03:13','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the ISO of ubuntu 17.10 from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>time zone</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>keyboard layout</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:33:13','2017-12-17 11:03:13','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(187,1,'2017-12-17 16:33:49','2017-12-17 11:03:49','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the<strong> ISO of ubuntu 17.10</strong> from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download it from the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>time zone</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>keyboard layout</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 16:33:49','2017-12-17 11:03:49','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(188,1,'2017-12-17 17:56:14','2017-12-17 12:26:14','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Ubuntu is an open source operating system for computers. It is a Linux distribution based on the Debian architecture.In this guide we will be learning how to install ubuntu on your PC.</span></p>\r\n</blockquote>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>MINIMUM REQUIREMENTS </strong></span></h2>\r\n<ul style=\"text-align: center;\">\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GHz dual core processor or better</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">2 GB system memory</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">25 GB of free hard drive space</span></li>\r\n 	<li><span style=\"color: #000000;\">An USB Drive</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">A USB port for the installer media</span></li>\r\n 	<li style=\"text-align: center;\"><span style=\"color: #000000;\">Internet access is helpful</span></li>\r\n</ul>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.1 — DOWNLOADING THE ISO </strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">First we need to download the<strong> ISO of ubuntu 17.10</strong> from the official website. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in <strong>https://www.ubuntu.com/</strong> , Go to <span style=\"text-decoration: underline;\">Downloads</span> page and select <span style=\"text-decoration: underline;\">Desktop</span>.</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/10.png\" width=\"870\" height=\"489\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will see the two options the <strong>16.04.x LTS</strong> release (LTS Stands for Long Term Support ) and the <strong>17.10</strong> release , go ahead and download the <strong>17.10</strong> one by clicking the <strong>Download </strong>button</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/11.png\" width=\"907\" height=\"510\" /></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 1.2 — BURNING THE ISO </strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In order to burn the iso in the pen drive, we need <strong>Rufus</strong> (Rufus is a utility that helps format and create bootable USB flash drives, such as USB keys/pendrives, memory sticks, etc.) </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Type in<strong> https://rufus.akeo.ie/</strong> and download the latest version (which in my case is<strong> 2.18</strong>).</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Open the tool and <strong>select the USB device</strong> you want from the drop down menu. </span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter size-medium\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/12.png\" width=\"379\" height=\"529\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click the <strong>CD icon</strong> in front where FreeDOS is written. Select the ISO file you downloaded , and click <strong>start</strong> at the bottom.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/13.png\" width=\"777\" height=\"546\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">This finishes the <strong>part 1</strong> of this guide</span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 2 — INSTALLING UBUNTU-17.10</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Plug the USB drive in the PC you want to install ubuntu and boot your system with above prepared <strong>bootable media.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You will be prompted with the following screen :</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/0.png\" width=\"772\" height=\"429\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In the next window, select “<strong>Install Ubuntu</strong>” option.</span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/01.png\" width=\"788\" height=\"385\" /></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 3 — </strong><strong>INSTALLING UPDATES DURING INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/02.png\" width=\"802\" height=\"392\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In case your system is connected to the Internet, then select both options to install latest updates, third party and multimedia software during the installation else you can leave them unchecked ,</span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">In my case I will be checking the first one only</span></p>\r\n\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 4 — </strong><strong>SELECTING THE INSTALLATION TYPE</strong></span></h2>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/04.png\" width=\"782\" height=\"382\" /></span></p>\r\n\r\n<h4 style=\"text-align: center;\"><span style=\"color: #000000;\"> </span></h4>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select <strong>Erase disks and Install Ubuntu</strong>.In this guide we will be doing a clean installation of ubuntu , if you need to <strong>dual boot</strong> or<strong> select the partition</strong> in which you need to install ubuntu, select <strong>Something else.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click <strong>Install Now</strong>.There will be a <strong>pop-up</strong> screen prompting you about writing to disk, Click<strong> Continue</strong></span></p>\r\n\r\n<h2></h2>\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 5 — </strong><strong>SELECTING RESPECTIVE TIME ZONE AND KEYBOARD LAYOUT</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/06.png\" width=\"807\" height=\"394\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>time zone</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/07.png\" width=\"795\" height=\"388\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Select your <strong>keyboard layout</strong> and click <strong>continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — THE USER NAME AND SYSTEM\'S NAME</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/08.png\" width=\"792\" height=\"387\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Input all the values and click<strong> continue</strong></span></p>\r\n&nbsp;\r\n<h2 style=\"text-align: center;\"><span style=\"color: #000000;\"><strong>STEP 6 — PROGRESS OF INSTALLATION</strong></span></h2>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">At this step, Installation of Ubuntu 17.10 would have been started and should be in <strong>progress.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/14.jpg\" width=\"802\" height=\"394\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Once the installation is completed, <strong>installer will prompt you to restart your system.</strong></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\"alignnone \" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/09.png\" width=\"814\" height=\"410\" /></span></p>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Click on <strong>Restart Now</strong> , you will be booted to Ubuntu </span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\"><img class=\" aligncenter\" src=\"https://github.com/TheDemon12/hyperdroid-media/raw/master/ubuntu_installation/15.jpg\" width=\"818\" height=\"460\" /></span></p>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><strong><span style=\"color: #000000;\">That\'s it for this guide of installing ubuntu. Hope you had fun installing it with us</span></strong></p>','Ubuntu 17.10 Desktop Installation','','inherit','closed','closed','','144-revision-v1','','','2017-12-17 17:56:14','2017-12-17 12:26:14','',144,'https://www.hyperdroid.in/144-revision-v1/',0,'revision','',0),(189,2,'2017-12-17 20:56:17','2017-12-17 15:26:17','test post with w3m\r\n','test','','trash','open','open','','__trashed','','','2017-12-17 20:56:17','2017-12-17 15:26:17','',0,'https://www.hyperdroid.in/?p=189',0,'post','',0),(190,2,'2017-12-17 20:44:04','2017-12-17 15:14:04','test post with w3m\r\n','test','','inherit','closed','closed','','189-revision-v1','','','2017-12-17 20:44:04','2017-12-17 15:14:04','',189,'https://www.hyperdroid.in/189-revision-v1/',0,'revision','',0),(191,1,'2017-12-17 21:38:58','2017-12-17 16:08:58','Jagrav spam service test','Test','','trash','open','open','','test__trashed','','','2017-12-17 21:39:39','2017-12-17 16:09:39','',0,'https://www.hyperdroid.in/?p=191',0,'post','',0),(192,1,'2017-12-17 21:38:58','2017-12-17 16:08:58','Jagrav spam service test','Test','','inherit','closed','closed','','191-revision-v1','','','2017-12-17 21:38:58','2017-12-17 16:08:58','',191,'https://www.hyperdroid.in/191-revision-v1/',0,'revision','',0),(193,1,'2017-12-17 21:39:03','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-17 21:39:03','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=193',0,'post','',0),(194,1,'2017-12-17 21:41:34','2017-12-17 16:11:34','spam test','test','','trash','open','open','','test__trashed-2','','','2017-12-17 21:41:51','2017-12-17 16:11:51','',0,'https://www.hyperdroid.in/?p=194',0,'post','',0),(195,1,'2017-12-17 21:41:34','2017-12-17 16:11:34','spam test','test','','inherit','closed','closed','','194-revision-v1','','','2017-12-17 21:41:34','2017-12-17 16:11:34','',194,'https://www.hyperdroid.in/194-revision-v1/',0,'revision','',0),(196,3,'2017-12-19 01:46:47','0000-00-00 00:00:00','','Git 101: How To Cherry-Pick from GitHub','','draft','open','open','','git-101-how-to-cherry-pick-from-github','','','2017-12-19 01:46:47','2017-12-18 20:16:47','',0,'https://www.hyperdroid.in/?p=196',0,'post','',0),(197,3,'2017-12-19 00:06:59','2017-12-18 18:36:59','','git 101: How to cherry-pick from github','','inherit','closed','closed','','196-revision-v1','','','2017-12-19 00:06:59','2017-12-18 18:36:59','',196,'https://www.hyperdroid.in/196-revision-v1/',0,'revision','',0),(198,3,'2017-12-19 00:06:59','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-12-19 00:06:59','0000-00-00 00:00:00','',0,'https://www.hyperdroid.in/?p=198',0,'post','',0),(199,3,'2017-12-19 00:07:14','2017-12-18 18:37:14','','git 101: How to cherry-pick from GitHub','','inherit','closed','closed','','196-revision-v1','','','2017-12-19 00:07:14','2017-12-18 18:37:14','',196,'https://www.hyperdroid.in/196-revision-v1/',0,'revision','',0),(200,1,'2017-12-19 01:46:26','2017-12-18 20:16:26','','Git 101: How To Cherry-Pick from GitHub','','inherit','closed','closed','','196-revision-v1','','','2017-12-19 01:46:26','2017-12-18 20:16:26','',196,'https://www.hyperdroid.in/196-revision-v1/',0,'revision','',0),(201,1,'2017-12-19 23:29:35','0000-00-00 00:00:00','<blockquote>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Let’s Encrypt is a free, automated, and open certificate authority that provides an easy way to obtain and install free TLS/SSL certificates, thereby enabling encrypted HTTPS on web servers. It simplifies the process by providing a software client, Certbot, that attempts to automate most (if not all) of the required steps. In this tutorial, you will use Certbot to obtain a free SSL certificate for Apache2 on Ubuntu 17.10 and set up your certificate to renew automatically.</span></p>\n</blockquote>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">On Ubuntu systems, the Certbot team maintains a <a style=\"color: #000000;\" href=\"https://help.ubuntu.com/community/PPA\">PPA</a>. Once you add it to your list of repositories all you\'ll need to do is apt-get the following packages.</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">sudo apt-get update\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:certbot/certbot\n\n</span></pre>\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">You\'ll need to press <code>ENTER</code> to accept. Then, update the package list to pick up the new repository\'s package information.</span></p>\n\n<pre style=\"text-align: center;\"><span style=\"font-family: \'courier new\', courier, monospace;\">\nsudo apt-get update\nsudo apt-get install python-certbot-apache</span></pre>','SSL Certification For Your Website For Free','','draft','open','open','','','','','2017-12-19 23:29:35','2017-12-19 17:59:35','',0,'https://www.hyperdroid.in/?p=201',0,'post','',0),(202,1,'2017-12-19 23:21:24','2017-12-19 17:51:24','','SSL Certification For Your Website For Free','','inherit','closed','closed','','201-revision-v1','','','2017-12-19 23:21:24','2017-12-19 17:51:24','',201,'https://www.hyperdroid.in/201-revision-v1/',0,'revision','',0),(203,1,'2017-12-19 23:25:15','2017-12-19 17:55:15','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Let’s Encrypt is a free, automated, and open certificate authority that provides an easy way to obtain and install free <a href=\"https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs\">TLS/SSL certificates</a>, thereby enabling encrypted HTTPS on web servers. It simplifies the process by providing a software client, Certbot, that attempts to automate most (if not all) of the required steps. In this tutorial, you will use Certbot to obtain a free SSL certificate for Apache2 on Ubuntu 17.10 and set up your certificate to renew automatically.</span></p>\r\n</blockquote>','SSL Certification For Your Website For Free','','inherit','closed','closed','','201-revision-v1','','','2017-12-19 23:25:15','2017-12-19 17:55:15','',201,'https://www.hyperdroid.in/201-revision-v1/',0,'revision','',0),(204,1,'2017-12-19 23:25:25','2017-12-19 17:55:25','<blockquote>\r\n<p style=\"text-align: center;\"><span style=\"color: #000000;\">Let’s Encrypt is a free, automated, and open certificate authority that provides an easy way to obtain and install free TLS/SSL certificates, thereby enabling encrypted HTTPS on web servers. It simplifies the process by providing a software client, Certbot, that attempts to automate most (if not all) of the required steps. In this tutorial, you will use Certbot to obtain a free SSL certificate for Apache2 on Ubuntu 17.10 and set up your certificate to renew automatically.</span></p>\r\n</blockquote>','SSL Certification For Your Website For Free','','inherit','closed','closed','','201-revision-v1','','','2017-12-19 23:25:25','2017-12-19 17:55:25','',201,'https://www.hyperdroid.in/201-revision-v1/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (1,1,0),(5,1,0),(7,3,0),(36,3,0),(45,3,0),(84,1,0),(106,3,0),(144,5,0),(189,1,0),(191,1,0),(194,1,0),(196,4,0),(201,1,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,0),(3,3,'category','',0,4),(4,4,'category','',0,0),(5,5,'category','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(3,'Web Hosting','web-hosting',0),(4,'Git Basics','git-basics',0),(5,'Linux Basics','linux-basics',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','thedemon12'),(2,1,'first_name','Kartik'),(3,1,'last_name','B.'),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'syntax_highlighting','true'),(7,1,'comment_shortcuts','false'),(8,1,'admin_color','midnight'),(9,1,'use_ssl','0'),(10,1,'show_admin_bar_front','true'),(11,1,'locale',''),(12,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(13,1,'wp_user_level','10'),(14,1,'dismissed_wp_pointers','theme_editor_notice'),(15,1,'show_welcome_panel','0'),(16,1,'session_tokens','a:6:{s:64:\"deedcaf033894c3e900b64b794d32d75c4df44f3f9c34141127ff009680c57b4\";a:4:{s:10:\"expiration\";i:1513709496;s:2:\"ip\";s:15:\"103.212.144.105\";s:2:\"ua\";s:76:\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0\";s:5:\"login\";i:1512499896;}s:64:\"45c4ae09eb6601823b934b45a0ef335c30e84a0b8d8cdfe4b50b00f17c7ccdf1\";a:4:{s:10:\"expiration\";i:1513709623;s:2:\"ip\";s:15:\"103.212.144.105\";s:2:\"ua\";s:76:\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0\";s:5:\"login\";i:1512500023;}s:64:\"996a1867ded0d5e2ea7dd812c960163d8799e7053509935a106f374c8bbc4ac7\";a:4:{s:10:\"expiration\";i:1513792982;s:2:\"ip\";s:15:\"103.212.146.160\";s:2:\"ua\";s:113:\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\";s:5:\"login\";i:1512583382;}s:64:\"6251048670ddb506318498df3cbab6af8ff68eb9bef7af31b46fd2973d5f002f\";a:4:{s:10:\"expiration\";i:1513862299;s:2:\"ip\";s:15:\"103.212.146.160\";s:2:\"ua\";s:113:\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\";s:5:\"login\";i:1512652699;}s:64:\"2b9c113ed428c841b375c15035b0ae53ec9e9173e4ce6d0d93a94397ac707005\";a:4:{s:10:\"expiration\";i:1514830690;s:2:\"ip\";s:15:\"103.212.146.178\";s:2:\"ua\";s:133:\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/62.0.3202.94 Chrome/62.0.3202.94 Safari/537.36\";s:5:\"login\";i:1513621090;}s:64:\"f244c284fed58ff3fdef52b09efac0d3e2bbc9cdb3229fb735ec07e894148d7d\";a:4:{s:10:\"expiration\";i:1514831471;s:2:\"ip\";s:15:\"103.212.146.178\";s:2:\"ua\";s:137:\"Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53\";s:5:\"login\";i:1513621871;}}'),(17,1,'wp_dashboard_quick_press_last_post_id','90'),(18,1,'community-events-location','a:4:{s:11:\"description\";s:9:\"New Delhi\";s:8:\"latitude\";s:10:\"28.6519500\";s:9:\"longitude\";s:10:\"77.2314900\";s:7:\"country\";s:2:\"IN\";}'),(19,1,'wp_user-settings','libraryContent=browse&mfold=o&advImgDetails=show'),(20,1,'wp_user-settings-time','1513508459'),(21,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),(22,1,'metaboxhidden_nav-menus','a:2:{i:0;s:12:\"add-post_tag\";i:1;s:15:\"add-post_format\";}'),(23,1,'closedpostboxes_post','a:0:{}'),(24,1,'metaboxhidden_post','a:8:{i:0;s:12:\"revisionsdiv\";i:1;s:11:\"postexcerpt\";i:2;s:13:\"trackbacksdiv\";i:3;s:10:\"postcustom\";i:4;s:16:\"commentstatusdiv\";i:5;s:11:\"commentsdiv\";i:6;s:7:\"slugdiv\";i:7;s:9:\"authordiv\";}'),(25,1,'closedpostboxes_dashboard','a:0:{}'),(26,1,'metaboxhidden_dashboard','a:0:{}'),(27,2,'nickname','akhil'),(28,2,'first_name','Akhil'),(29,2,'last_name','Narang'),(30,2,'description',''),(31,2,'rich_editing','true'),(32,2,'syntax_highlighting','true'),(33,2,'comment_shortcuts','false'),(34,2,'admin_color','fresh'),(35,2,'use_ssl','0'),(36,2,'show_admin_bar_front','true'),(37,2,'locale',''),(38,2,'wp_capabilities','a:1:{s:11:\"contributor\";b:1;}'),(39,2,'wp_user_level','1'),(40,2,'default_password_nag',''),(41,3,'nickname','Jagrav'),(42,3,'first_name',''),(43,3,'last_name',''),(44,3,'description','Noob who can build ROMs'),(45,3,'rich_editing','true'),(46,3,'syntax_highlighting','true'),(47,3,'comment_shortcuts','false'),(48,3,'admin_color','midnight'),(49,3,'use_ssl','0'),(50,3,'show_admin_bar_front','true'),(51,3,'locale',''),(52,3,'wp_capabilities','a:1:{s:11:\"contributor\";b:1;}'),(53,3,'wp_user_level','1'),(54,3,'default_password_nag',''),(55,3,'session_tokens','a:1:{s:64:\"283643208362f562dc14986f2b9f2dabac770a210b97610a5f597f8dcd5bd888\";a:4:{s:10:\"expiration\";i:1513794979;s:2:\"ip\";s:13:\"167.21.142.43\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\";s:5:\"login\";i:1513622179;}}'),(56,3,'wp_user-settings','mfold=o'),(57,3,'wp_user-settings-time','1512582485'),(58,3,'community-events-location','a:1:{s:2:\"ip\";s:12:\"167.21.142.0\";}'),(59,3,'wp_dashboard_quick_press_last_post_id','198'),(60,4,'nickname','Cauncage'),(61,4,'first_name',''),(62,4,'last_name',''),(63,4,'description',''),(64,4,'rich_editing','true'),(65,4,'syntax_highlighting','true'),(66,4,'comment_shortcuts','false'),(67,4,'admin_color','fresh'),(68,4,'use_ssl','0'),(69,4,'show_admin_bar_front','false'),(70,4,'locale',''),(71,4,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(72,4,'wp_user_level','0'),(73,4,'default_password_nag','1'),(74,2,'session_tokens','a:2:{s:64:\"2759f629628a7c34f3be5326cd4f980d3e730b4a7d443c4ef9da0924389c64e4\";a:4:{s:10:\"expiration\";i:1513696374;s:2:\"ip\";s:12:\"139.59.22.89\";s:2:\"ua\";s:21:\"w3m/0.5.3+git20170102\";s:5:\"login\";i:1513523574;}s:64:\"e8efa3d7e2a6abb30e5d20ecebd6a027554e8e6aea5a1fdf06f11984fcca7808\";a:4:{s:10:\"expiration\";i:1514733380;s:2:\"ip\";s:14:\"45.117.221.241\";s:2:\"ua\";s:105:\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36\";s:5:\"login\";i:1513523780;}}'),(75,2,'wp_dashboard_quick_press_last_post_id','91'),(76,2,'community-events-location','a:1:{s:2:\"ip\";s:12:\"45.117.221.0\";}'),(77,1,'chld_thm_cfg_upgrade_notice','2.2.8.1'),(78,1,'wp_yoast_notifications','a:2:{i:0;a:2:{s:7:\"message\";s:780:\"We\'ve noticed you\'ve been using Yoast SEO for some time now; we hope you love it! We\'d be thrilled if you could <a href=\"https://yoa.st/rate-yoast-seo?utm_content=5.9.3\">give us a 5 stars rating on WordPress.org</a>!\n\nIf you are experiencing issues, <a href=\"https://yoa.st/bugreport?utm_content=5.9.3\">please file a bug report</a> and we\'ll do our best to help you out.\n\nBy the way, did you know we also have a <a href=\'https://yoa.st/premium-notification?utm_content=5.9.3\'>Premium plugin</a>? It offers advanced features, like a redirect manager and support for multiple keywords. It also comes with 24/7 personal support.\n\n<a class=\"button\" href=\"https://www.hyperdroid.in/wp-admin/?page=wpseo_dashboard&yoast_dismiss=upsell\">Please don\'t show me this notification anymore</a>\";s:7:\"options\";a:8:{s:4:\"type\";s:7:\"warning\";s:2:\"id\";s:19:\"wpseo-upsell-notice\";s:5:\"nonce\";N;s:8:\"priority\";d:0.80000000000000004;s:9:\"data_json\";a:0:{}s:13:\"dismissal_key\";N;s:12:\"capabilities\";s:20:\"wpseo_manage_options\";s:16:\"capability_check\";s:3:\"all\";}}i:1;a:2:{s:7:\"message\";s:533:\"Yoast SEO and Advanced Custom Fields can work together a lot better by adding a helper plugin. Please install <a href=\"https://www.hyperdroid.in/wp-admin/update.php?action=install-plugin&amp;plugin=acf-content-analysis-for-yoast-seo&amp;_wpnonce=9b1d1dd275\">ACF Content Analysis for Yoast SEO</a> to make your life better. <a href=\"https://wordpress.org/plugins/acf-content-analysis-for-yoast-seo/\" aria-label=\"More information about ACF Content Analysis for Yoast SEO\" target=\"_blank\" rel=\"noopener noreferrer\">More information</a>.\";s:7:\"options\";a:8:{s:4:\"type\";s:7:\"warning\";s:2:\"id\";s:41:\"wpseo-suggested-plugin-yoast-acf-analysis\";s:5:\"nonce\";N;s:8:\"priority\";d:0.5;s:9:\"data_json\";a:0:{}s:13:\"dismissal_key\";N;s:12:\"capabilities\";a:1:{i:0;s:15:\"install_plugins\";}s:16:\"capability_check\";s:3:\"all\";}}}'),(79,1,'wpseo-upsell-notice','seen'),(80,1,'wpseo-suggested-plugin-yoast-acf-analysis','seen'),(81,1,'itsec_user_activity_last_seen','1513706191'),(82,1,'itsec-settings-view','grid'),(83,2,'itsec_user_activity_last_seen','1513523576'),(84,3,'itsec_user_activity_last_seen','1513622180');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'thedemon12','$P$BFmUqMjfHVI9kV5Dph.s2qa0VUZyfT/','thedemon12','kartikbhalla12@gmail.com','https://www.hyperdroid.in','2017-12-03 18:04:33','1513091451:$P$B70plXPMT/VbnAy1ykAzOTiE1cSe0R1',0,'Kartik B.'),(2,'akhil','$P$BaT4fmJHz7ZV/G2e6HXAx7fIsygull/','akhil','akhil@akhilnarang.me','http://akhilnarang.me','2017-12-06 17:35:15','1513091397:$P$BKXyno2sx.cHZZe9pSRQJnpKGQJmv3/',0,'Akhil Narang'),(3,'Jagrav','$P$B0xpAaYdSBn9Vp1vdsNuDD9EWJPYkQ.','jagrav','jagravnaik0@gmail.com','','2017-12-06 17:41:59','1512582145:$P$Bx9TPIEb0VojvdQZPTgG9KsRcP4R6J.',0,'Jagrav'),(4,'Cauncage','$P$Bgs.uK2FARDbiSfIaq7ymGE9YvBBUM/','cauncage','Cauncage@opno.life','','2017-12-10 14:33:21','1512916401:$P$B6zyA8wcbHfADVBbekau0OgF8q6int1',0,'Cauncage');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_yoast_seo_links`
--

DROP TABLE IF EXISTS `wp_yoast_seo_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_yoast_seo_links` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `url` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_id` bigint(20) unsigned NOT NULL,
  `target_post_id` bigint(20) unsigned NOT NULL,
  `type` varchar(8) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `link_direction` (`post_id`,`type`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_yoast_seo_links`
--

LOCK TABLES `wp_yoast_seo_links` WRITE;
/*!40000 ALTER TABLE `wp_yoast_seo_links` DISABLE KEYS */;
INSERT INTO `wp_yoast_seo_links` VALUES (5,'http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/',45,0,'internal'),(6,'http://www.hyperdroid.in/index.php/2017/12/01/how-to-host-website-on-ubuntu-16-04/',7,0,'internal'),(8,'http://www.hyperdroid.in/index.php/2017/12/01/installing-lamp-on-ubuntu/',106,0,'internal'),(10,'https://httpd.apache.org/',36,0,'external'),(15,'https://help.ubuntu.com/community/PPA',201,0,'external');
/*!40000 ALTER TABLE `wp_yoast_seo_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_yoast_seo_meta`
--

DROP TABLE IF EXISTS `wp_yoast_seo_meta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_yoast_seo_meta` (
  `object_id` bigint(20) unsigned NOT NULL,
  `internal_link_count` int(10) unsigned DEFAULT NULL,
  `incoming_link_count` int(10) unsigned DEFAULT NULL,
  UNIQUE KEY `object_id` (`object_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_yoast_seo_meta`
--

LOCK TABLES `wp_yoast_seo_meta` WRITE;
/*!40000 ALTER TABLE `wp_yoast_seo_meta` DISABLE KEYS */;
INSERT INTO `wp_yoast_seo_meta` VALUES (7,1,0),(36,0,0),(45,1,0),(106,1,0),(144,0,0),(189,0,0),(191,0,0),(194,0,0),(196,0,0),(201,0,0);
/*!40000 ALTER TABLE `wp_yoast_seo_meta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-12-19 17:59:37
